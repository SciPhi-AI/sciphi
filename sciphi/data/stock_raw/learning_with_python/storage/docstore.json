{"docstore/metadata": {"6685c205-00b5-4be1-b3aa-d0e9dae77c44": {"doc_hash": "2d0de5a371df3746ab755a1c8ef8fa62d6b6741f0cbbd585e1aa8ec30cd54cd5"}, "e5d27f08-e86f-411d-8d21-6cb9b9015eeb": {"doc_hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "65bb8589-485e-470d-b83a-68f40dd30598": {"doc_hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "c3fd772a-d386-4522-bf40-858dcb47beef": {"doc_hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "3f9cbb80-96f4-46f0-ba04-876c6740f788": {"doc_hash": "13ddcd1cfae725738279879c65c8cc78d2cddb7e1bc4f5ac6d9cc212c04cf188"}, "5586efe2-3b14-4421-84e8-ebd27a3acbe8": {"doc_hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "6798d972-db6f-4157-b244-43106ac2bb95": {"doc_hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "dbfcaa25-9f49-4920-a7a3-aa56fe190ede": {"doc_hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "55e9377f-cd20-4e8f-b312-4037fb435a8a": {"doc_hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "7bf09652-9a97-4f30-bc07-da12c2260de4": {"doc_hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c": {"doc_hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "06e73d4b-883b-4bd7-8bf9-7799be07321a": {"doc_hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "b39a27f4-bb19-4496-9cd3-a6710b808acd": {"doc_hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "4b44e675-64e5-457e-909e-a1553348de00": {"doc_hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "4c0e9bc5-b047-4250-a300-230f1a16cd97": {"doc_hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1": {"doc_hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2d4bd6b2-e597-4231-9fd7-ee576f2d485d": {"doc_hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "ef7906f0-0f42-4ca1-aaea-654d1c6674a9": {"doc_hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "366d85d8-9b45-40c4-992e-849cf65da266": {"doc_hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "646aed1c-3013-452e-ad89-93702220a065": {"doc_hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "6addee7a-a48c-4a90-9101-cb696f59a62d": {"doc_hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2bf315b5-29d8-46ec-a209-9313b0a60382": {"doc_hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "fc58a467-8927-4a0e-8f27-d70a9b65fae3": {"doc_hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a": {"doc_hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "32abb63a-2e47-4a29-a7e8-d187222d3e60": {"doc_hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "5a928013-b632-48cb-9ecd-b5670356cf8f": {"doc_hash": "7f41150f0ccac5de9bd0f529d47c68f3bd3f0cae633bde82cf0e31aedc727847"}, "a52d9267-6dab-41e4-861d-c627c9c03f5f": {"doc_hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "0d121388-4770-427c-beea-56d66cb85583": {"doc_hash": "0b40d73c911a2d66b9fe0977dfd4046d01c6c7eae283e866efa9a6a2f5ba5fbe"}, "b3ffcbd6-d068-4eaf-a60f-e172eaff7869": {"doc_hash": "577db7bc866e14083156471eb8420b66d9371633765b835c49996779b3a70371"}, "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f": {"doc_hash": "0a2a113b43bfaa43a52ce8145683bbd80010569267471d3d1aec093d606025b6"}, "54d8490b-0b63-40b6-8012-d279ddde92c8": {"doc_hash": "17a6fee2e3ea4e1355794d27faa230d4762c1c81e7e5a290d0cbcb141f9581ed"}, "67f8511a-826b-4d6f-acf1-6dcca534434d": {"doc_hash": "f3a7b1c00b19c4b7962b8c015f2d8255201bf3176ba2b8717404b87b722c8e4a"}, "19141fb6-d671-4159-b23c-c79984a6ccf1": {"doc_hash": "52248a5cca29a828d9d7e75d8e56e8251f21208e2402aff5d5c62b84939cd4fc"}, "1a6f88a7-9f7c-4ec8-9c81-79ef1b6c078f": {"doc_hash": "78e3c420a5ad6788e8c4fd7533250788075ab0342b0e9a52bc7497eacee22fa9", "ref_doc_id": "6685c205-00b5-4be1-b3aa-d0e9dae77c44"}, "3d5bb4f7-24c8-4cdc-bccc-4c9c188bedec": {"doc_hash": "a54ca5563833affe082df54603a8ff5d304f2f193ff11ace50a039ba529737af", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "43e2934d-8b5a-4253-a65c-6963192bf333": {"doc_hash": "7a508ee3dd4a0e32fae4ad124e6a2219ea76a3d835b5aba56428da48b87c59d7", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "e6412f55-0e69-40ea-9d17-2ba2dc205df8": {"doc_hash": "a5a8c47e83fbeb9a38180b1d98159a2a34172ec8413a49ef8c4c39f759a7af33", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "30edcd48-606d-40a4-b815-a31a30ffd824": {"doc_hash": "d2ab03878d9b54993e12a50a3aadb0ed01d62810af3626b906247c6f2cf35b09", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "08affb40-2cbf-4b09-aa2b-e31dde7a6daa": {"doc_hash": "1f360d1eed989980b4a720e5a8581ab25ec4b29cab3fa5c5499e8d516b3b3d06", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "a7c1cef1-ba90-4dd4-a366-05c37ea5289f": {"doc_hash": "459b255aaa99abe51b2d93b6b9616b4cb0aaa881e5e3d0fa08d15df03128db3b", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "ad10fe86-f437-47cb-873c-2c6cd3329369": {"doc_hash": "32ce97c8a961e4838906499414caf6b1b44216acf9103b5aea3127795a68da21", "ref_doc_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb"}, "a49e389c-f457-4114-bb4a-7ab41ec6490c": {"doc_hash": "ccb23ac1e210312a6e96836172661b1b2644ff363b9d2cde9f25dd9084822379", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "c381a8cb-0c74-4ec8-9dd4-326416f7bc32": {"doc_hash": "974022a8cb3d401c102f7509746e9a85638d99d96d0fb354864e8f1bfd43b7c1", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "6d7285c2-c06b-4c3e-9c04-eb4cb0482338": {"doc_hash": "94407d163baa5a82d88ae62fd0a010477a747f1761636e2dc4784737c48637a6", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9": {"doc_hash": "97749fa349984a6a862128ee102d91a5710d06a1d28d59972d864c3f3e85ed5b", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "209fc505-f77b-42eb-a0ec-3c89bc7993dd": {"doc_hash": "4ffdd0ede983743bbfdd1fd7cf20b9120c23de078fa46a2afe415f7a92c466fc", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "38d0187e-fd3c-40fe-84c5-6038c6db529f": {"doc_hash": "5938289984a317ba20f61ce85fcac21d37d7daebb763be62fe8079039cd28ed5", "ref_doc_id": "65bb8589-485e-470d-b83a-68f40dd30598"}, "e1ad94ee-b96e-43a4-8ce0-382b5ec83b21": {"doc_hash": "d84f8b9f58c60fe60a4ffb576b47443f48e038de630d0a65abcc579ed7d7ca94", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5": {"doc_hash": "39b7496d8f9ca5e24f724490f33246e875632ad1b3d240c2e08c68bda8ff3529", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "d2c42aad-be12-4391-9d49-6f98b336a7aa": {"doc_hash": "092b9c6a0a8a3c4e5dbc84d46610623d0ea06bb2176a27ca2ef416b3cf42521e", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "9447d812-d668-42d7-860b-27936468ab3d": {"doc_hash": "7ad434cd80cbdb3e8af1825252b1e1c5a1ca5ab88d2cea1cbad62dccf2dfa9cd", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "b8d382cd-0334-429b-9834-99a34e818741": {"doc_hash": "abddb556fe5a507c9f3357bc8e6efcf625649f60906693bdd6cbfc63e98d620c", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e": {"doc_hash": "70fc42c11782e3c18eb67a219b3930e1c6dfbf5c70fb3abf8ce4bd5a5fd1fb9c", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "fa24eeb0-41ac-4cd5-aa70-eadbea570e4f": {"doc_hash": "6f4b6a69e05d7a06e46cd221598a962bdcf8a185dbf6fbeba0c56578a031ecc1", "ref_doc_id": "c3fd772a-d386-4522-bf40-858dcb47beef"}, "28a02a3b-dde7-460a-9f99-bcb347d728bb": {"doc_hash": "b958722109282c2318f4bb211ca1add17ad4f93fcfa8cea4669e7d4f42f566c7", "ref_doc_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788"}, "741aa787-463c-4189-b641-510278e53f0f": {"doc_hash": "84fc49ee8070b2fde61902c7c9e12aec417f46d9cc5413878bdae44c468f7a15", "ref_doc_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788"}, "3fa2421e-8b56-472f-bdf8-db7bd95d817d": {"doc_hash": "d5754f01e316b06668db1612f2f689c26af446e6a2482936869789e90e925d3b", "ref_doc_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788"}, "c0b89d2e-7a53-4066-9bbd-2101bebb4f1c": {"doc_hash": "9a438ff50f67593f88a984e2af8204abca40e2001458f1aa8ea5e4757251246a", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "b7059d13-4bf1-4044-b228-2d2a847e89a2": {"doc_hash": "86a12bb25274512e7ebae2038e6260fd902522c730de1c906114aedff7b45ba6", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "44d86782-fbbf-4972-bfa0-f05631ace2d2": {"doc_hash": "558da0a43cd04931223993d4a1a08966112ce0390dff9a3f6afa7f17796bdd8e", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "c127a5a8-e5bd-4e52-98f2-f01c12db95b3": {"doc_hash": "38a54077c96472bd457c79487b8d0c6defbacf9c06da7a18d3e613ca6388cab3", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "ea53cead-3e5e-49cf-9c71-78029f117c0a": {"doc_hash": "0353c8c63ffd3cf2c8bca45b1511d60671a512e574466f9d5f8a7fd74c60b670", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "447c0f42-0e4f-435d-97c3-e88d6657386c": {"doc_hash": "4324122ab1082f88fd54da91482af49bb2a4ad71d574ee2559d2e57b7ce3361e", "ref_doc_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8"}, "26da9a8c-b014-4fbf-b7f5-47bf05613a9e": {"doc_hash": "35ea34d7270a2e749579877a41946d4135bda2b305fc8d8362034a947cfae1bd", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "62c45f91-a5d5-4db9-997b-7f2538092433": {"doc_hash": "52819b4fcfd4c6c00a8ae1f0693e15a36aab4c87ec6779d16282b7aad14ec498", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e": {"doc_hash": "dde9b17d31a19665e7d931375e831222ca1a71ac2140bb25160590a276a6fc90", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "95c352af-8078-4534-aad1-1124f88c56dd": {"doc_hash": "c9f1f1a0a174191f8d06a10f4968ef9c52da3ea8117b9a6060c4af34de37533b", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "2cad634c-c9c9-4205-9361-baa79a34008c": {"doc_hash": "cc555f57c1239ca33f570436cefcee835b32b76cbcb33ccf32099df9a15fe819", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "74429688-a399-4fd6-87c6-98bf364281ed": {"doc_hash": "5f434e21025926ae56c723241a99c30b6f946215da3264d75e75267f5eff837e", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "5051091c-194f-49a1-8289-f686858300ec": {"doc_hash": "785ae50a1841e82e384cdf5ff50bd2ac979b4beb5096840084d61bed2c617ed7", "ref_doc_id": "6798d972-db6f-4157-b244-43106ac2bb95"}, "4f932ede-8209-44e0-9202-0d644d756afc": {"doc_hash": "0e84ddac98747c405e502006642d6d3e7470ef7dfbd2b4cd913b71149fa1ce02", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "5379d4a0-b2cd-45ea-b795-818ae80fb090": {"doc_hash": "db3ab9f794c6bc32994357788ef9b09bd45c1845b4e3b1f2cea1d2d6a867fb96", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "34ed9af4-83b2-4f32-b700-fc003541f5a6": {"doc_hash": "b39d55b3e1e1c72a63dc1ac5c690425d5ccc64a50f51a30cbc999f46633ef5f9", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "5f510fb4-a8c9-4360-a742-ec2f3b45bab6": {"doc_hash": "c3ee9ecaa1533590c5ad83c14b30e730a8fd23632dc0a079b6ed80d05d431764", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "d5bc4479-681b-42f3-914e-09acf2d7ed74": {"doc_hash": "e2ef8a897f8ff911a14e783cfe44e22ce0b141fa07618b0c8efe0c48e5350a6d", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "3a459cfa-8984-45f1-a5d4-819cc5044aa9": {"doc_hash": "fc59565496f8526cd269311cfc7d970dd966982686e0fef17d9086159b1bcd1e", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "660b852a-0985-4490-aad3-e7b3ccfb829c": {"doc_hash": "ed839f334ebae923b5e66572139359ae41f05eafeb6973bd5e5e6a5eb7104d75", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "464a4c61-76db-4671-84b1-48da946f5f78": {"doc_hash": "0e6e8529bb52b92222ed5065f984191aa6a9cffccdf0b7318ce8fb5f8e43a780", "ref_doc_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede"}, "5948f425-654c-4cee-98e0-b64a0fb4bbe5": {"doc_hash": "c0747f39cb321155994aa1a7f0dceeb7d36f62c3e05bb8ba40f4a13d51f3b935", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "3f9412e4-a749-4bff-8739-4606b31ea8f1": {"doc_hash": "b75825908cb534ddf54717ef19fffceaa87b581b68363c796e5e39ca22a7ad9b", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "be0a3801-aaf8-41f3-9996-6218b1366d18": {"doc_hash": "e0bc4a8fc5709dddb9cd2778b9ee7aba1d015e8097c5ad3d89bb88d531cdaa13", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "248058b8-0d54-48db-9a21-55b77aa1eb04": {"doc_hash": "165dc46c35331e1ab3885ef62876246e1d8aed29feda1cec34a76d92d5d388ef", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "59c02e3e-4304-4e19-bab8-b92039c0a2e8": {"doc_hash": "f4daefb30b3ef3501567388026a9b208e8ac0d24814e9788300368e21a601a3b", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "a45af541-a681-431f-8e18-14c46748011c": {"doc_hash": "15fe45391510db384bc0b8663a112201d8d26a2232ac89211e69571dce6e7b20", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "9800400e-4b08-40de-8eab-a8030438fdea": {"doc_hash": "21bb590a14b2eb024b6b7b0118e63e810aad91067577b812808bb7f34ec95840", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "8d110233-ce34-468f-904d-59986c253e79": {"doc_hash": "db88dc1bf19b9df3b887bdfe88b7abc75d6397237b8ac9c7f9377520c34aaa05", "ref_doc_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a"}, "3654c353-73a0-4429-8b80-706b16bf79e3": {"doc_hash": "59e3869dbaf0d118e518f88c79ca7246fd59964b2bb979e4dc39c7858013d221", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "8c681b3e-fbde-4214-adaf-f9d1300c9aee": {"doc_hash": "c1eaf39f9c960a77077b3a27b5b68a284c2adaa8d60e1b31e60b79e875061ea6", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "8defb448-9071-4fc8-85d7-1c8c7994b068": {"doc_hash": "48805f2dac73bcc5930214ba32b30b3508ec0f39735dcbfe2475ce425e649c70", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a": {"doc_hash": "c498aa9aee283b9c50a4ff756d8ab370718d65f6ee25a861b1c4848addf9dc00", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "8a42847e-d34b-4214-83fd-6613a4b84086": {"doc_hash": "68e08f377e5d902f0c5b4cac2f3bf3bf1872124dad8a3d0140d11992a1de1429", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "46465398-05f7-49ec-bc8c-c6f1d9696bcc": {"doc_hash": "f799bc7d4024b191bda25186b0e879b121bf3405fddc6c6bcd5b0652e296d1aa", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "66035af3-6ef1-495b-a24c-4e6642d277f4": {"doc_hash": "e4f6e4c329b81bee01e2f9f5963590a686af8de1925d89241a622bf30a26a71c", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "c3def67b-d763-4f94-9a2b-53b81a1be41b": {"doc_hash": "e0de621c8f5dc66ffd4526067a206cdd6240c7b4d39bb1aed59e7073e65d8052", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "36bb8e59-f2dd-4374-897e-a97830ae042b": {"doc_hash": "bb97a49fc2fcba8fa0e78a36e3028bcd54d6cb9688b608cc60d45d3b82152840", "ref_doc_id": "7bf09652-9a97-4f30-bc07-da12c2260de4"}, "c1505c31-0d44-4e42-964c-1889324dc33b": {"doc_hash": "3b29f95d26e4bc8cf9efb6b7e6c20614ba0ebdb05f1ea4ddf221381fc1d8323a", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "bc137aa3-66e7-417d-951c-5d12b6ca21e9": {"doc_hash": "78704f05722c95e6173a791658398749b63ca2e032a997e562bbd45654cb6bc4", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "b5804993-458b-4b01-b13c-ad4cb9ea1c30": {"doc_hash": "91f5a8a93bc4930ee0fed4741ede2f265ddef8d3e179b24a4027f639d08c956e", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "b7cf44ff-494b-4b14-90d2-f358a2dbea32": {"doc_hash": "3fb09aa26d0f69f30389e5277d8946c6202b8bd44e3c29b0b228f9b5f057b18a", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "3a60dc4d-a8c5-4b8a-8389-dc972fdab765": {"doc_hash": "527392256c90d1aea5202f9244de0e50e3b03fb499c7abe2297d51e53f0e96d3", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "655b870a-ed3a-476f-a19f-b05285203802": {"doc_hash": "39973f7aafae1fff0fdbc03b503091613c88da708c667eae48d682f384283f64", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "6e24f274-bc98-41ba-bba6-1275248af13c": {"doc_hash": "70b574ba8f109cf968e93f0cdbf9af4c97ea13b67350193080cc1b86be104d66", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70": {"doc_hash": "e0d88610c6309454c22e59eee75277fdd3d3bd750de908681b32efb7997ae38d", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "45053040-3fa3-4bb5-aa00-7a11811e4098": {"doc_hash": "c998bd41bd90fb5669f9772e811d2b9f396d3813d744700ccc020a925464a3ff", "ref_doc_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c"}, "959cccdc-8990-470a-a8e8-64ef3ca824bd": {"doc_hash": "6d01005fba986675f0fdb396a209a5f9f6f8542d9a66c6c83d091fba1edbe052", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "3c0babf6-7299-46e3-8b25-a99533bce746": {"doc_hash": "735d0bcca2a9e6bf0e0865ac194f1224cd14bec22dcd15c00403a1b97ee91d77", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "80c4a719-ec82-4874-b183-7aef4ca5dceb": {"doc_hash": "c14255fc7cb2121cc92a304d83326b4fc20ad2c30728da8a5af136f17b42a9df", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "e3602a25-424c-4f8a-9898-c34357bd7420": {"doc_hash": "45efb16a6a470e7975752ab12fb92c62e1e978f426a22a113367ee70fe64c150", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "8875d27e-0ca8-4ae5-82bf-284d04df8f36": {"doc_hash": "86ea4db9491e6908f37130994adc90bc0b61be3ac33910a2dd967767a690320a", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "0f8f3308-6725-46c7-84bd-19d9d9f68ceb": {"doc_hash": "bfb52c67219bbd387f8057784cb43dfde2c07d3b11dda9a1e596edf573d375fb", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "eee0cc8b-2935-4cba-b198-f2213e577473": {"doc_hash": "f7c431161d8e3cd8c3969c70ce8c4b32e77dc348980850ebd500017d70751227", "ref_doc_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a"}, "c82bed89-8f47-4ba3-98c6-40149c08d156": {"doc_hash": "7b80c006cacb8d13182073b618e9440bad1e116aa98c9a87c8ff853dca213a9a", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "7fc185be-53f4-469d-8b85-7384546f2dae": {"doc_hash": "4cd6de72fb0ca14346c1a9f8b2cc6480e907d94927d42989cc07de5783930cd7", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "f395dbda-eaef-4363-890a-e136eb12c483": {"doc_hash": "7e33ab922458ecd5da7d328afa5afedb030ae07d89ea7c3a670c06a3ab5e278f", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "edae333f-d2c1-4fc5-b558-50faf36e419a": {"doc_hash": "5839bf742ede3dc1a28ba0a65d602886266d9398291d62e5d0e4d531b121b87a", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "359df20b-7775-474e-b3a4-bfbbc0e8a56c": {"doc_hash": "d1761e9915c9a111e140e9f096bf7a562e02ff7cc65d2c55aec846c665d2e536", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e": {"doc_hash": "022f4fd091c6ca4b9954bb35645e04c2055850653debe4fec86ccf62a7fec0a3", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "f8a816c2-2836-40c3-b2e7-5e2ea5584eab": {"doc_hash": "6523a7be6879e96e94c153c7ad9d95ed19b3df1bc33c36966695347313b8b39d", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "faba4ae7-0c67-498f-a704-eabd35773868": {"doc_hash": "bb5b82e3d02fadef2a20dbbb63ab1ba8646f53735c084188740097225d50b54c", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "00b14091-118e-4451-ad88-dd7db709b135": {"doc_hash": "63ea626e5a80338b543b599ac89b67aafc2e3bd4de82f2091a370b3e98ed1f84", "ref_doc_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd"}, "ebc2df6e-9ad0-494f-b5bd-1e02d342a82b": {"doc_hash": "c39643e53282c6a2902f89c717f8ffcd27ad3fa95addb68d9a12e5ed6a1e5b19", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "31aa5116-27d2-4e25-9ea7-e39a90baf975": {"doc_hash": "ea6989e45e373ef22ea75b6c97c976cc3aff927456dc089c0d3e3f1833d67228", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "bfda4cdd-355f-44cd-a333-592fb7cbade4": {"doc_hash": "c3ced4734c6b97d8f3ff2bd52171d803850326402dc41a65902f00fcf2b1f84e", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "7517e8c9-e829-47be-a792-3bb7aedb40a7": {"doc_hash": "4a99eea3c36191d40ec408c6796f60e5bb4cac4b086b7f0f25d2fa092224e2c1", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "eeeefeaf-d448-4ed2-967b-ac85b7dc012e": {"doc_hash": "b1784dbf90b13f34642c68fa4873209e8e0680eaf59af102003de67f516da973", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "7fd9dd64-d020-4c02-8c3e-7e498557b7e6": {"doc_hash": "1b5465abfaa4d670fddf0f276070e4fed2e3fbbbe627fb47495e250c0d7ae2f4", "ref_doc_id": "4b44e675-64e5-457e-909e-a1553348de00"}, "78fce47a-97ce-40a1-a41d-45c29ec1c6ff": {"doc_hash": "bae8a0a240f9b1c1edac65dea11aed7477bea31c7107f7c4f0703c4ab0e1b8d2", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "270fc7ae-49fc-4d87-a3e7-04ec0577a426": {"doc_hash": "1d211337437ef34e3a0b188e3abc96baba35800c4eb752b01eb498d33f203c37", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "d37333a6-d060-47f4-9e0e-29273ac89aa1": {"doc_hash": "1ea09d693255a02045d4b11b587061c36225487037d5f32662564f9c4abc11f1", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "97c67d12-52ac-46ba-8df3-c740bb16e497": {"doc_hash": "af9128b4ef3f5d78dc5775bc63983a22e49646210837bd8c49691302fabc10af", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "1f9270dc-5439-4eb4-b6a8-bee468243ae9": {"doc_hash": "c8f3ccc4ea92632c2cb9d2d005bd4273a87a900b950209d4c216e4d4953b6daf", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "bf7b3e64-7e63-4c9a-b611-622581711e8d": {"doc_hash": "44988c9b900451859896bf15a4d2ee70437d9f3127d76ea444a09f2dbe5391e5", "ref_doc_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97"}, "00b4a5d7-9bbd-4055-a1cf-f54e5357911b": {"doc_hash": "58c74a8f753f5627524f31a15d25ca3823e7767588d8981d79d3d5734186b907", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "cf0db177-d4a6-45eb-838d-074b79670592": {"doc_hash": "43b14ce32fcbe430ac7a49c5c61f792365a67437d17c515df23b7a2431efb030", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "fd76a23c-a4e7-463d-a4e4-2a999724795f": {"doc_hash": "c2f26a06a13a8c34996b3bba6eddd01e5f9a98fdb969824ee331a9cda28592f7", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b": {"doc_hash": "fea80c013bc777615b447136967f5829cce51a5caf3c430029739f7a7570b906", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "932ade67-eecb-47cd-b5fe-567427a3003a": {"doc_hash": "07a84d5219ebb70e08a263e735277406d289fbe9f4653530e22aabcc83663663", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935": {"doc_hash": "440752e479fc4dedd1ba69410b16d0856ceefc1e0c71b515611ce14d07a4fce9", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "4a21db87-f1d9-4f48-97ed-ef89e1c22707": {"doc_hash": "1539a4e6540a2bca7f8f8836e2e375cd96b6f518168a3ac4db8442cbdee1051e", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "ff5d255c-4788-45d5-b921-9cca84b2584a": {"doc_hash": "d4a3047c021c639998773a0db2ad69874968db10e38ce6d4c4c23e48897df884", "ref_doc_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1"}, "9e3a1ee4-9a16-458d-9d23-3a155e95ef79": {"doc_hash": "09e2f91ace6e3b0832a4449b8f755d2dd903e4574546a3a5b36e1bd8fe21eb8e", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "a5376a45-de84-4321-b327-d9e9c6742a8c": {"doc_hash": "9d40abf92aabc151deeb50290e5dc23aa7146a691774e27b6b926ae21e5baed7", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "87d37a51-fbbf-4575-a224-dfbce78025c6": {"doc_hash": "5e6eef98523896bc62410c1c73f53a52920519adc1b12c2ed8bf3ab19827f2d3", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "ddbf5900-58bf-41be-acf1-43b900410da6": {"doc_hash": "cf00de856470d0f93df4216db55d35e75ddd0601cddb0ba350c4e8dd9cebf30b", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "98b2ce96-a564-4c85-8471-1014e50c45b1": {"doc_hash": "946943857ee755604a90416a5e4b4d33aa5221a2e688316b802a1d7c67dc8ae0", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "1146c533-2788-4aa9-a68e-2f129677a095": {"doc_hash": "a79d816ddaa242ae78b2fbbb57e01037234551b2ccf808209266b0d06f392cf5", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "5501c185-c58a-4ee2-8d66-f373eb14f7f4": {"doc_hash": "99e9dfb7a97674614b7624ab714204a731b4d2bb19bcde2408d2b5674c269c50", "ref_doc_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d"}, "7ce69457-887b-4129-bc12-be646345587b": {"doc_hash": "ca7c78b3730f011f3219cf582de6261520bd15fb73cc9ac44e08b27091db4c4f", "ref_doc_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9"}, "a19ef6b2-886a-49f0-972c-adb25d81ea44": {"doc_hash": "4baaf7b2aa101a77215f23e189ff222d7b0a287f9ef2eafc57bd72fea437f727", "ref_doc_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9"}, "914c76dc-6aab-47cf-9ab6-731981d942fe": {"doc_hash": "2bb253b03abf79883db91c75870deeed1338862fd3737db7e30c66510f030892", "ref_doc_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9"}, "935bce25-2dce-433f-a117-7583d47ec888": {"doc_hash": "f83432b03f65234a53edb52755f63594d0536a0667d3c4b8da37022fd371562e", "ref_doc_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9"}, "51d8576b-7e29-4750-b6b9-0f17693077d5": {"doc_hash": "6e1cd873a606730dcbbdac3c8bad1d3343c396891f9e2b9757a9b98f94a85ce3", "ref_doc_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9"}, "55da5c49-c77a-4ce6-bd25-70b055db9658": {"doc_hash": "3d3ad5040d68562d80881264221853bee312c95716209c65eeb1dae802613120", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "ba390c38-cbab-4d5e-8737-21c68d6599e7": {"doc_hash": "1a5a9aa0002ddef1d1557bf29f583276843c7d92c259e266efcec81402c206de", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107": {"doc_hash": "3894241940c94a0e32a0e323c09a4bba1e11147200eba206597d7efdc1456b7b", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "b62efdf3-cde0-49ba-a7d5-68d8a09f3118": {"doc_hash": "8b2375437d05a095f1c85fe363b70772b135362e793a36290f674c50e64483f4", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "63f94e80-9f22-4700-ae0d-393029b21a47": {"doc_hash": "2f9299287a3afeaf3b2def0068bf39ce1eca2146b935474248cf094e47c86b99", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "51feec6d-2627-4b9e-a339-7524953b135c": {"doc_hash": "25019c40bdb85ee5999eedd9249928dfff52668c73bda9c1fe41d1be4c625a8a", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "02835535-81cb-4b99-9c36-7f722fe56e53": {"doc_hash": "b24b0bd67833645a1ebfccdb6e6e85a50c281f1938fe87df5f5c58209c41ae47", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "97fbcb7a-7a67-46dd-bdb5-c8fdb7742a0b": {"doc_hash": "0c3b580fa3ef72e5ff87d9b928d55c2dd65960e707d43cd58f02fef5121d1ae9", "ref_doc_id": "366d85d8-9b45-40c4-992e-849cf65da266"}, "d428515b-e422-458d-bb7c-b19c19acc64f": {"doc_hash": "ce9cc4d7f158e93fd0695065adee00f2cabf8bf698da3b12604b526fd0bdd429", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "4dc159c0-87f3-4130-8b29-fa95cb66e1bc": {"doc_hash": "d6eb1ce3dcd65d3816205f481b4326b92c4ad584347d4c0405b190ae8a15ca0a", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "8b135e07-e798-40ba-af9c-57338f8631ef": {"doc_hash": "6899501b84c600436d66b5d567d75c4a824be929c044416dc936f7986ad599a1", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "c2d8f160-644e-487d-a842-4813e7c6728d": {"doc_hash": "c010cb5298dcb69ffc5b352ad8a919cbda75092b18e5318c0836318bb3552096", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "7c41061f-967d-433f-978a-b0172c1cb3cd": {"doc_hash": "c910eb9d8d1eca71319aacbd190890c1ad9c9ea7c453f44df8793e5804d04e1f", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "74be3d9d-1ed6-45ea-a122-395f60330929": {"doc_hash": "5cd6f70b2804d1b24aec15e1e826138f33c05d9ae9ce2d698a98212122060565", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "31272119-3229-40a3-86bb-2282ac6d6fe3": {"doc_hash": "e7874bd96c74c16941dd40551f92dcf0e95adeab5b15bdeb478937b0b69903dd", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "27c585f2-eae8-4e0d-a64f-18a6221e0644": {"doc_hash": "ee9e254face0623d802cc1c88a4ae0391c730d5972e7453e5068a08c57e3ec23", "ref_doc_id": "646aed1c-3013-452e-ad89-93702220a065"}, "e4ea8093-4e35-4b68-86b8-5e5d52df3c5e": {"doc_hash": "56713eb38bfce0b6cecc0bad8195c6ecd9647ea18c040acbe6dc24b4ffa4da1f", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "efb2b508-2e2f-4b13-8294-bb36a71e2634": {"doc_hash": "6845a6b79bf426ef06758c89090cd292058386cb3481f5833b53fd8381ad4278", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e": {"doc_hash": "eeda2fc197f222a84f728ad71382816cbb05f127ffbc740048ab6bf76e7c491d", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "aec60a8e-dde5-4c5d-884a-af18bb204b1e": {"doc_hash": "8d438a45faf9044d0e7a4937e3ad378950ddbcb05f5c65a28fbebe83788b75c5", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "35a31964-52f0-4c13-bab7-e0ab575a3d7f": {"doc_hash": "d5dca9c98d00e103e62cf33160781328a89bfdd4ebd813796d8407743654acc5", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "23d3f456-47be-4dd3-8b8c-6c00f1d47889": {"doc_hash": "0e47dd7e8c9e1d1c8405d07d07141960cc371b55a2521ac5eb943198ea00def7", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "ff51296b-eafb-4862-88aa-ff2bae8c82eb": {"doc_hash": "1274e1c2a558a9509c835f08e844109519d283a8b4928dc7e2b6d19cf21d7784", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "4399a22c-d2d7-45fb-ab9b-06d16c6ca9dd": {"doc_hash": "b471cd308127118a448259ca5d2f91be229191023dea978dd129615ad04cff92", "ref_doc_id": "6addee7a-a48c-4a90-9101-cb696f59a62d"}, "ce31c578-fc0a-442c-acfd-232fb07ca028": {"doc_hash": "f198ae69d02251fa4b9fc8fce14f45658799c226378a5c5dfaf016130a7a664f", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b": {"doc_hash": "b6acd7c1de2b5526221930acebb962014b6692f62952ccd588cd38d3c4255c7f", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "6429847b-17f8-4e4e-8ec9-289a9f5b74d1": {"doc_hash": "f1a511c92efd1c56cacf7a38c8aa95b4b0eccb7b74f9adf32fbd7877a601cb8c", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd": {"doc_hash": "7e0a196bdd4d8ebc78d86ba0bbf5e0df62cd34e730f234e7d810b60d31ee7af1", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "3f2a1579-dc10-4d61-84ec-282a3582fe16": {"doc_hash": "2a20f834115c4851cff73e9d108a92aec459ebc79fa23d4839c6c5daa9fc972e", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "b84c306f-9568-4e43-93d6-8e8a7e64cc3a": {"doc_hash": "dc01ee77f70cf366da39bc3ac1907312e1a9e6d5f46469557773eebae24a7e02", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "8e899819-777f-4540-b925-c8eaa4b25258": {"doc_hash": "2d3ed8cff1dd13f332c62e49eecc7f9add5718567118890eb5f1ae3ad187ed38", "ref_doc_id": "2bf315b5-29d8-46ec-a209-9313b0a60382"}, "a12a726d-e5d7-4615-8f14-60665e34ec67": {"doc_hash": "d4644a0e7b7e2f2bc85d9aa1c86e5573f4123b3a52c423a5222934b0137b53b2", "ref_doc_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3"}, "523b9723-f604-4ad0-9140-1f46a38c90fd": {"doc_hash": "4122c20abd81e8691d018e9088e99d27852f6acde85eddbfc732a4266d7c5e00", "ref_doc_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3"}, "97f8d001-26d2-4042-87a6-da4c7e9df3d1": {"doc_hash": "ff1182aff21e30e45365304dbd5f8cb7c21d7dc5a77967f4dc1761521faa8ec5", "ref_doc_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3"}, "aacf5ef9-6dbd-40de-991b-a512b0552188": {"doc_hash": "6988493b68075730d2a7e7b9f4c8bf2f5fb1a648e20961b24df72ddc1fddeded", "ref_doc_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3"}, "decefc81-7ed0-450c-b7ad-bbc3f17b4994": {"doc_hash": "308874d968e9a1f54122dfba8f08a0139070e9fd371d93aa38ffb613154d7f12", "ref_doc_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3"}, "1f5f825e-ba06-4f69-8c26-0ce2aeaff2d6": {"doc_hash": "b31873bf80194ccd1fa5a7ec223dafdef36d3f7c5a79ba6c82ded8b6bb0f2565", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "c3556ce3-e8dc-44df-9263-115d43ae8b65": {"doc_hash": "0fb3dc59b92afc33c1046e28b3a9eb3e7a95eb91c6d567991ddbac9ea17ee459", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "b7618784-7da4-4ea7-a537-e13e4e6958a4": {"doc_hash": "a013dba54d0d6ef7c3d103be964f9858564bddfb6f8b09b9566a24f40d4b2f65", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "015f77e0-1857-45de-9299-ae361ba2bb5a": {"doc_hash": "8d8286332f0e7f59ff18614dbf4933ad752ae082c2deea18b21836c3cf414681", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "c8f16d49-c530-47af-a49c-3e0f2e6edac3": {"doc_hash": "e1b541c5ec4f4da58c5fc27e332a45414061851b923c608bbae6df4f69256b64", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "751318bf-7121-43da-88b3-b0c3e382e2f8": {"doc_hash": "cff5a136b79ff1a13723070392fd599de7d3897b65364e9bdaae5b7bb9e5dd95", "ref_doc_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a"}, "0938a373-57be-4f0f-bb30-8bd66beac402": {"doc_hash": "c3fff470a16513cb292218e49b6203dd8277351a27e02d9c17d72b2702c6990f", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "b8d3d508-5cbc-4dc0-b528-dc4943c195cc": {"doc_hash": "c31d6acee2a9557ee3687a5da5cc1a82ccac2eebc18186b533cdc7385a0789d8", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "d67269bf-5add-49da-8086-3ce46606e311": {"doc_hash": "625b688d45e930159a20f739b58a69b56f82b5183b0a2d0b22ddae0a52823e69", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "9efa0d03-95f2-447c-99c0-3085b92d0f82": {"doc_hash": "443a6dd30e3175fda78a8445fa8fa1838b6adebdcd52d6300685a700dd5dcf3c", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "f301d3a7-e76e-456d-9b46-6b971f9d23b2": {"doc_hash": "f11409314c1ca089a897bbee3e231022a9e5b61f10e0119e714b5401cc45753c", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "4c2e44e7-e40e-4937-96de-44c0628f61f4": {"doc_hash": "32a8ef382b4c72e15be715b540a642628a52a346dec288fc745735ed77d703b3", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "7a406987-eba0-4222-a34f-7ad3724a5604": {"doc_hash": "4f99a93acd3b54691adee1dbcd250a5e0d455b7a873f1006c153557e57e8d8a5", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "ec793519-e044-423d-ba4b-21c3ec916891": {"doc_hash": "0cc21ecce0950ad45477642b3d7ab969684cda22f2bc5464074a02cc93713111", "ref_doc_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60"}, "83808199-cb49-4a60-bcfe-27a4b9d3b685": {"doc_hash": "d235af6c0c0d9dd50b29801e7115c4f9693143ea647f2102785801e7a1a83972", "ref_doc_id": "5a928013-b632-48cb-9ecd-b5670356cf8f"}, "3363e09a-1ab4-4c17-bb8a-e6752917130a": {"doc_hash": "b310582126abe7f22a23f77d5ebbfd167da4140e0889452bb41f85d86c97afe0", "ref_doc_id": "5a928013-b632-48cb-9ecd-b5670356cf8f"}, "476b4f33-d161-4cbe-a216-dbfa745ef944": {"doc_hash": "d026bf3148ce7eed284ab214d1b8281e43888f702170fcaa308d60eceb9cd4b7", "ref_doc_id": "5a928013-b632-48cb-9ecd-b5670356cf8f"}, "479ce05c-61fd-4bea-8a73-e26b16cd3e70": {"doc_hash": "9ffd6d66ae282c4b6e078f4c3d0f733d65d624415d7b4f9faaa1df77421b6283", "ref_doc_id": "5a928013-b632-48cb-9ecd-b5670356cf8f"}, "47ee3c46-bad3-4aac-99eb-11a0b98ebf20": {"doc_hash": "b6d96f6c3bb85d8d2ef242e9324190aabf190cbb627ccce99162a6a233c4fe12", "ref_doc_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f"}, "20146fda-7b8b-4d03-adb9-1c79e9d87125": {"doc_hash": "8fb629faf6434d074fff0c3901cfb286836d07fb31a5c0d8547e951f88190ae7", "ref_doc_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f"}, "ff608a4c-36da-45aa-ad71-ea74392d397c": {"doc_hash": "9e60dd0ae06caca1fc2f8663c3e0bdee8325468f7b2f7d4fb7efcc73f9497246", "ref_doc_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f"}, "7a9c5d00-cd62-4a4e-9607-bd6caef08515": {"doc_hash": "ee5af6ea10dab8858f260571cbd1ebf89be906bd0c04223241b6e631a54319f2", "ref_doc_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f"}, "f620bea9-7052-4504-ade1-ba5cf9d769a4": {"doc_hash": "ae310102f38996585d9f421e65b7a66ebb1ca7935d2883e29b4f8ffcc21ed096", "ref_doc_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f"}, "4ade5e33-06eb-4908-ba7c-ff1047dc4cb7": {"doc_hash": "f83e3e9e3c499efceed6397ee27c034ff9c155bd4e8b363981fb506232717fd7", "ref_doc_id": "0d121388-4770-427c-beea-56d66cb85583"}, "9936a434-0aae-4070-99e6-d1abeb440546": {"doc_hash": "2460627122e40a72441e17a25d4c23df94c9b47ddab6e7f916df03a5fb7c83e4", "ref_doc_id": "0d121388-4770-427c-beea-56d66cb85583"}, "278d2c56-536c-4910-9fcb-daa1088cb994": {"doc_hash": "d0cadb0544a7ae24020f1f7f75cf378dbb16af9f5b1c78d07bc111afed98d681", "ref_doc_id": "b3ffcbd6-d068-4eaf-a60f-e172eaff7869"}, "c89bbe3f-202d-4a25-b59a-7b19e3f67aa3": {"doc_hash": "14ab568893315f28a4139c512caa7438c5c3a925383bdc5b59a46baf256caa6a", "ref_doc_id": "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f"}, "df1de581-9827-42fd-b1ed-e2fc4ca4899b": {"doc_hash": "0ab42e8bb8555d8d2e7dfeb401d0a405c7da1f2142367c403333f55dd55148eb", "ref_doc_id": "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f"}, "bb687d40-1093-4eaf-90c9-d0eb2e3dade1": {"doc_hash": "157789eb3883f33793554435b09c77efb4e71b422caa0cd6926cc6df54f6d868", "ref_doc_id": "54d8490b-0b63-40b6-8012-d279ddde92c8"}, "9f7ff698-db2b-41ab-9c8e-c255d8e3a586": {"doc_hash": "30225d1d620a45435660145c2cf70d664f4ab379978f8abfcae8457eb644a312", "ref_doc_id": "54d8490b-0b63-40b6-8012-d279ddde92c8"}, "d665cef5-0e08-47bb-9e34-0b0767c0f1ff": {"doc_hash": "56bda4d8dc2d4757dc8c5e73aeade85037a8ae23a386cd1e07a122ee06b087b5", "ref_doc_id": "54d8490b-0b63-40b6-8012-d279ddde92c8"}, "0e222bbb-583f-4ab9-84e6-79c3709b03e8": {"doc_hash": "0edad6f6276b8d016b26f62fc060f05d9459472758c445b0bbb27546705a246c", "ref_doc_id": "54d8490b-0b63-40b6-8012-d279ddde92c8"}, "3b555f83-9634-48a7-b8c0-a207c923d7bf": {"doc_hash": "0dcc7072302d5126368c031c9a46be39e9a5c8fbc2dd8ed06d78d31f7503bcfd", "ref_doc_id": "67f8511a-826b-4d6f-acf1-6dcca534434d"}, "45498fda-c622-4a9a-a1bc-4d2124f9b64d": {"doc_hash": "a42a15e17cec9ebc34c5cd830e1e87a8e85c24a0575a022f3974d309df5201af", "ref_doc_id": "67f8511a-826b-4d6f-acf1-6dcca534434d"}, "53b70118-7161-41bf-9e8c-8c33daf2307b": {"doc_hash": "800c73d895b6819ee26d24b9d5d2544e90e0064fdd3d6a342c549f0be092140f", "ref_doc_id": "67f8511a-826b-4d6f-acf1-6dcca534434d"}, "a0fa9976-9308-4e10-bcbc-a24ff57cef61": {"doc_hash": "11803adb34695647c904fff7c7a6d6a24f7bd69ac39825d453003fb6b92dd1b5", "ref_doc_id": "67f8511a-826b-4d6f-acf1-6dcca534434d"}, "50ce3962-d5f7-44be-81d3-35dfd06afa74": {"doc_hash": "e6f860615f0c043f0c414ff83d2479880ffb8ea2f65477e4ed7810b6aa4cfb6f", "ref_doc_id": "19141fb6-d671-4159-b23c-c79984a6ccf1"}, "5cabf076-22d0-4480-a111-3d87c6574c5b": {"doc_hash": "c5aae1a71b8a96beee91d7b04e40db4103decae1e2c12867fa644572c181f742", "ref_doc_id": "19141fb6-d671-4159-b23c-c79984a6ccf1"}, "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021": {"doc_hash": "28dce084bd07ad83be25dea4ae4ab7adba66a8731985fc08700282f7d69f3fca", "ref_doc_id": "19141fb6-d671-4159-b23c-c79984a6ccf1"}, "e79cb32e-d193-420b-9804-a5e004fdb394": {"doc_hash": "27ed8717605c75805706437a34d70bb46bdbcab8437ffce47367529735cf1ee4", "ref_doc_id": "19141fb6-d671-4159-b23c-c79984a6ccf1"}}, "docstore/data": {"1a6f88a7-9f7c-4ec8-9c81-79ef1b6c078f": {"__data__": {"id_": "1a6f88a7-9f7c-4ec8-9c81-79ef1b6c078f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6685c205-00b5-4be1-b3aa-d0e9dae77c44", "node_type": null, "metadata": {}, "hash": "2d0de5a371df3746ab755a1c8ef8fa62d6b6741f0cbbd585e1aa8ec30cd54cd5"}}, "hash": "78e3c420a5ad6788e8c4fd7533250788075ab0342b0e9a52bc7497eacee22fa9", "text": "LATEX = latex\n\nDVIPS = dvips\n\nPDFFLAGS = -dCompatibilityLevel=1.4 -dPDFSETTINGS=/prepress \\\n           -dCompressPages=true -dUseFlateCompression=true  \\\n           -dEmbedAllFonts=true -dSubsetFonts=true -dMaxSubsetPct=100\n\n%.dvi: %.tex\n\t$(LATEX) $<\n\n%.ps: %.dvi\n\t$(DVIPS) -o $@ $<\n\n%.pdf: %.ps\n\tps2pdf $(PDFFLAGS) $<\n\nall:\ttop.tex\n\tlatex top\n\tmakeindex top\n\tlatex top\n\tdvips -T 6.75in,9.25in -Ppdf -o thinkCSpy.ps top\n#\tdvips -T 7.444in,9.681in -Ppdf -o thinkCSpy.ps top\n\tps2pdf $(PDFFLAGS) thinkCSpy.ps\n\nDEST = /home/downey/public_html/greent/thinkpython/thinkCSpy\n\ndistrib:\n\trm -rf dist\n\tmkdir dist dist/tex dist/html\n\trsync -a thinkCSpy.pdf thinkCSpy.ps dist\n\trsync -a Makefile *.tex dist/tex\n\trsync -a illustrations dist/tex\n\trm dist/tex/illustrations/*.bak\n\trsync -a images dist/html\n\tmkdir dist/html/illustrations\n\trsync -a illustrations/*.png dist/html/illustrations\n\tcd dist/tex; make clean\n\tcd dist; tar -czf thinkCSpy.tex.tar.gz tex\n\tcd ltoh; perl make_book_html.pl ../dist/tex ../dist/html\n\tcd dist; tar -czf thinkCSpy.html.tar.gz html\n\tcd dist; cp thinkCSpy.tex.tar.gz thinkCSpy.tex.tgz\n\tcd dist; cp thinkCSpy.html.tar.gz thinkCSpy.html.tgz\n\trsync -a dist/* $(DEST)\n\tchmod -R o+r $(DEST)/*\n\nclean:\n\trm -f *~ *.aux *.log *.dvi *.idx *.ilg *.ind *.toc\n\n\nprop:\n\tzip downey_software_design.zip proposal/proposal.pdf proposal/table_of_contents.pdf proposal/chapters12-14.pdf", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3d5bb4f7-24c8-4cdc-bccc-4c9c188bedec": {"__data__": {"id_": "3d5bb4f7-24c8-4cdc-bccc-4c9c188bedec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "3": {"node_id": "43e2934d-8b5a-4253-a65c-6963192bf333", "node_type": null, "metadata": {}, "hash": "7a508ee3dd4a0e32fae4ad124e6a2219ea76a3d835b5aba56428da48b87c59d7"}}, "hash": "a54ca5563833affe082df54603a8ff5d304f2f193ff11ace50a039ba529737af", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\\chapter{Debugging}\n\\index{debugging}\n\nDifferent kinds of errors can occur\nin a program, and it is useful to distinguish among them\nin order to track them down more quickly:\n\n\\begin{itemize}\n\n\\item Syntax errors are produced by Python when it is\ntranslating the source code into byte code.  They usually\nindicate that there is something wrong with the syntax of the program.\nExample: Omitting the colon at the end of a {\\tt def} statement yields\nthe somewhat redundant message {\\tt SyntaxError: invalid syntax}.\n\n\\item Runtime errors are produced by the runtime system if something\ngoes wrong while the program is running.  Most runtime error messages\ninclude information about where the error occurred and what functions\nwere executing.\nExample: An infinite recursion eventually causes\na runtime error of ``maximum recursion depth exceeded.''\n\n\\item Semantic errors are problems with a program that compiles and\nruns but doesn't do the right thing.  Example: An expression may\nnot be evaluated in the order you expect, yielding an unexpected\nresult.\n\n\\end{itemize}\n\n\\index{compile-time error}\n\\index{syntax error}\n\\index{runtime error}\n\\index{semantic error}\n\\index{error!compile-time}\n\\index{error!syntax}\n\\index{error!runtime}\n\\index{error!semantic}\n\\index{exception}\n\nThe first step in debugging is to figure out which kind of\nerror you are dealing with.  Although the following sections are\norganized by error type, some techniques are\napplicable in more than one situation.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "43e2934d-8b5a-4253-a65c-6963192bf333": {"__data__": {"id_": "43e2934d-8b5a-4253-a65c-6963192bf333", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "3d5bb4f7-24c8-4cdc-bccc-4c9c188bedec", "node_type": null, "metadata": {}, "hash": "a54ca5563833affe082df54603a8ff5d304f2f193ff11ace50a039ba529737af"}, "3": {"node_id": "e6412f55-0e69-40ea-9d17-2ba2dc205df8", "node_type": null, "metadata": {}, "hash": "a5a8c47e83fbeb9a38180b1d98159a2a34172ec8413a49ef8c4c39f759a7af33"}}, "hash": "7a508ee3dd4a0e32fae4ad124e6a2219ea76a3d835b5aba56428da48b87c59d7", "text": "\\section{Syntax errors}\n\n\\index{error messages}\n\\index{compiler}\n\nSyntax errors are usually easy to fix once you figure out what they\nare.  Unfortunately, the error messages are often not helpful.\nThe most common messages are {\\tt SyntaxError: invalid syntax} and\n{\\tt SyntaxError: invalid token}, neither of which is very informative.\n\nOn the other hand, the message does tell you where in the program the\nproblem occurred.  Actually, it tells you where Python\nnoticed a problem, which is not necessarily where the error\nis.  Sometimes the error is prior to the location of the error\nmessage, often on the preceding line.\n\n\\index{incremental program development}\n\nIf you are building the program incrementally, you should have\na good idea about where the error is.  It will be in the last\nline you added.\n\nIf you are copying code from a book, start by comparing\nyour code to the book's code very carefully.  Check every character.\nAt the same time, remember that the book might be wrong, so\nif you see something that looks like a syntax error, it might be.\n\nHere are some ways to avoid the most common syntax errors:\n\n\\index{syntax}\n\n\\begin{enumerate}\n\n\\item Make sure you are not using a Python keyword for a variable name.\n\n\\item Check that you have a colon at the end of the header of every\ncompound statement, including {\\tt for}, {\\tt while},\n{\\tt if}, and {\\tt def} statements.\n\n\\item Check that indentation is consistent.  You may indent with either\nspaces or tabs but it's best not to mix them.  Each level should be\nnested the same amount.\n\n\\item Make sure that any strings in the code have matching\nquotation marks.\n\n\\item If you have multiline strings with triple quotes (single or double), make\nsure you have terminated the string properly.  An unterminated string\nmay cause an {\\tt invalid token} error at the end of your program,\nor it may treat the following part of the program as a string until it\ncomes to the next string.  In the second case, it might not produce an error\nmessage at all!\n\n\\item An unclosed bracket---\\verb+(+, \\verb+{+, or \\verb+[+---makes\nPython continue with the next line as part of the current statement.\nGenerally, an error occurs almost immediately in the next line.\n\n\\item Check for the classic {\\tt =} instead of {\\tt ==} inside\na conditional.\n\n\\end{enumerate}\n\nIf nothing works, move on to the next section...\n\n\n\\subsection{I can't get my program to run no matter\nwhat I do.}\n\nIf the compiler says there is an error and you don't see it, that\nmight be because you and the compiler are not looking at the same\ncode.  Check your programming environment to make sure that the\nprogram you are editing is the one Python is trying to run.  If you\nare not sure, try putting an obvious and deliberate syntax error at\nthe beginning of the program.  Now run (or import) it again.  If the\ncompiler doesn't find the new error, there is probably something wrong\nwith the way your environment is set up.  \n\nIf this happens, one approach is to start again with a new\nprogram like ``Hello, World!,'' and make sure you can get a known\nprogram to run.  Then gradually add the pieces of the new program\nto the working one.\n\n\n\n\\section{Runtime errors}\n\nOnce your program is syntactically correct,\nPython can import it and at least start running it.  What could\npossibly go wrong?\n\n\n\\subsection{My program does absolutely nothing.}\n\nThis problem is most common when your file consists of functions and classes\nbut does not actually invoke anything to start execution.  This may be\nintentional if you only plan to import this module to supply classes\nand functions.\n\nIf it is not intentional, make sure that you\nare invoking a function to start execution, or execute one from\nthe interactive prompt.  Also see the ``Flow of Execution'' section\nbelow.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e6412f55-0e69-40ea-9d17-2ba2dc205df8": {"__data__": {"id_": "e6412f55-0e69-40ea-9d17-2ba2dc205df8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "43e2934d-8b5a-4253-a65c-6963192bf333", "node_type": null, "metadata": {}, "hash": "7a508ee3dd4a0e32fae4ad124e6a2219ea76a3d835b5aba56428da48b87c59d7"}, "3": {"node_id": "30edcd48-606d-40a4-b815-a31a30ffd824", "node_type": null, "metadata": {}, "hash": "d2ab03878d9b54993e12a50a3aadb0ed01d62810af3626b906247c6f2cf35b09"}}, "hash": "a5a8c47e83fbeb9a38180b1d98159a2a34172ec8413a49ef8c4c39f759a7af33", "text": "\\subsection{My program hangs.}\n\\index{infinite loop}\n\\index{infinite recursion}\n\\index{hanging}\n\nIf a program stops and seems to be doing nothing, we\nsay it is ``hanging.''  Often that means that it is caught in\nan infinite loop or an infinite recursion.\n\n\\begin{itemize}\n\n\\item If there is a particular loop that you suspect is the\nproblem, add a {\\tt print} statement immediately before the loop that says\n``entering the loop'' and another immediately after that says\n``exiting the loop.''\n\nRun the program.  If you get the first message and not the second,\nyou've got an infinite loop.  Go to the ``Infinite Loop'' section\nbelow.\n\n\\item Most of the time, an infinite recursion will cause the program\nto run for a while and then produce a ``RuntimeError: Maximum\nrecursion depth exceeded'' error.  If that happens, go to the\n``Infinite Recursion'' section below.\n\nIf you are not getting this error but you suspect there is a problem\nwith a recursive method or function, you can still use the techniques\nin the ``Infinite Recursion'' section.\n\n\\item If neither of those steps works, start testing other\nloops and other recursive functions and methods.\n\n\\item If that doesn't work, then it is possible that\nyou don't understand the flow of execution in your program.\nGo to the ``Flow of Execution'' section below.\n\n\\end{itemize}\n\n\n\\subsubsection{Infinite Loop}\n\\index{infinite loop}\n\\index{loop!infinite}\n\\index{condition}\n\\index{loop!condition}\n\nIf you think you have an infinite loop and you think you know\nwhat loop is causing the problem, add a {\\tt print} statement at\nthe end of the loop that prints the values of the variables in\nthe condition and the value of the condition.\n\nFor example:\n\n\\beforeverb\n\\begin{verbatim}\nwhile x > 0 and y < 0 :\n  # do something to x\n  # do something to y\n\n  print  \"x: \", x\n  print  \"y: \", y\n  print  \"condition: \", (x > 0 and y < 0)\n\\end{verbatim}\n\\afterverb\n%\nNow when you run the program, you will see three lines of output\nfor each time through the loop.  The last time through the\nloop, the condition should be {\\tt false}.  If the loop keeps\ngoing, you will be able to see the values of {\\tt x} and {\\tt y},\nand you might figure out why they are not being updated correctly.\n\n\n\\subsubsection{Infinite Recursion}\n\\index{infinite recursion}\n\\index{recursion!infinite}\n\nMost of the time, an infinite recursion will cause the program to run\nfor a while and then produce a {\\tt Maximum recursion depth exceeded}\nerror.\n\nIf you suspect that a function or method is causing an infinite\nrecursion, start by checking to make sure that there is a base case.\nIn other words, there should be some condition that will cause the\nfunction or method to return without making a recursive invocation.\nIf not, then you need to rethink the algorithm and identify a base\ncase.\n\nIf there is a base case but the program doesn't seem to be reaching\nit, add a {\\tt print} statement at the beginning of the function or method\nthat prints the parameters.  Now when you run the program, you will see\na few lines of output every time the function or method is invoked,\nand you will see the parameters.  If the parameters are not moving\ntoward the base case, you will get some ideas about why not.\n\n\n\\subsubsection{Flow of Execution}\n\\index{flow of execution}\n\\index{execution!flow}\n\nIf you are not sure how the flow of execution is moving through\nyour program, add {\\tt print} statements to the beginning of each\nfunction with a message like ``entering function {\\tt foo},'' where\n{\\tt foo} is the name of the function.\n\nNow when you run the program, it will print a trace of each\nfunction as it is invoked.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "30edcd48-606d-40a4-b815-a31a30ffd824": {"__data__": {"id_": "30edcd48-606d-40a4-b815-a31a30ffd824", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "e6412f55-0e69-40ea-9d17-2ba2dc205df8", "node_type": null, "metadata": {}, "hash": "a5a8c47e83fbeb9a38180b1d98159a2a34172ec8413a49ef8c4c39f759a7af33"}, "3": {"node_id": "08affb40-2cbf-4b09-aa2b-e31dde7a6daa", "node_type": null, "metadata": {}, "hash": "1f360d1eed989980b4a720e5a8581ab25ec4b29cab3fa5c5499e8d516b3b3d06"}}, "hash": "d2ab03878d9b54993e12a50a3aadb0ed01d62810af3626b906247c6f2cf35b09", "text": "\\subsection{When I run the program I get an exception.}\n\\index{exception}\n\\index{runtime error}\n\nIf something goes wrong during runtime, Python\nprints a message that includes the name of the\nexception, the line of the program where the problem occurred,\nand a traceback.\n\n\\index{traceback}\n\nThe traceback identifies the function that is currently running,\nand then the function that invoked it, and then the function that\ninvoked {\\em that}, and so on.  In other words, it traces the\npath of function invocations that got you to where you are.  It\nalso includes the line number in your file where each of these\ncalls occurs.\n\nThe first step is to examine the place in the program where\nthe error occurred and see if you can figure out what happened.\nThese are some of the most common runtime errors:\n\n\\begin{description}\n\n\\item[NameError:]  You are trying to use a variable that doesn't\nexist in the current environment.\nRemember that local variables are local.  You\ncannot refer to them from outside the function where they are defined.\n\n\\index{NameError}\n\\index{TypeError}\n\n\\item[TypeError:] There are several possible causes:\n\n\\begin{itemize}\n\n\\item  You are trying to use a value improperly.  Example: indexing\na string, list, or tuple with something other than an integer.\n\n\\index{index}\n\n\\item There is a mismatch between the items in a format string and\nthe items passed for conversion.  This can happen if either the number\nof items does not match or an invalid conversion is called for.\n\n\\index{format operator}\n\\index{operator!format}\n\n\\item You are passing the wrong number of arguments to a function or method.\nFor methods, look at the method definition and\ncheck that the first parameter is {\\tt self}.  Then look at the\nmethod invocation; make sure you are invoking the method on an\nobject with the right type and providing the other arguments\ncorrectly.\n\n\\end{itemize}\n\n\\item[KeyError:]  You are trying to access an element of a dictionary\nusing a key value that the dictionary does not contain.\n\n\\index{KeyError}\n\\index{dictionary}\n\n\\item[AttributeError:] You are trying to access an attribute or method\nthat does not exist.\n\n\\index{AttributeError}\n\n\\item[IndexError:] The index you are using\nto access a list, string, or tuple is greater than\nits length minus one.  Immediately before the site of the error,\nadd a {\\tt print} statement to display\nthe value of the index and the length of the array.\nIs the array the right size?  Is the index the right value?\n\n\\index{IndexError}\n\n\\end{description}\n\n\n\\subsection{I added so many {\\tt print} statements I get inundated with\noutput.}\n\\index{print statement}\n\\index{statement!print}\n\nOne of the problems with using {\\tt print} statements for debugging\nis that you can end up buried in output.  There are two ways\nto proceed: simplify the output or simplify the program.\n\nTo simplify the output, you can remove or comment out {\\tt print}\nstatements that aren't helping, or combine them, or format\nthe output so it is easier to understand.\n\nTo simplify the program, there are several things you can do.  First,\nscale down the problem the program is working on.  For example, if you\nare sorting an array, sort a {\\em small} array.  If the program takes\ninput from the user, give it the simplest input that causes the\nproblem.\n\nSecond, clean up the program.  Remove dead code and reorganize the\nprogram to make it as easy to read as possible.  For example, if you\nsuspect that the problem is in a deeply nested part of the program,\ntry rewriting that part with simpler structure.  If you suspect a\nlarge function, try splitting it into smaller functions and testing them\nseparately.\n\nOften the process of finding the minimal test case leads you\nto the bug.  If you find that a program works\nin one situation but not in another,\nthat gives you a clue about what is going on.\n\nSimilarly, rewriting a piece of code can help you find subtle\nbugs.  If you make a change that you think doesn't affect the\nprogram, and it does, that can tip you off.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "08affb40-2cbf-4b09-aa2b-e31dde7a6daa": {"__data__": {"id_": "08affb40-2cbf-4b09-aa2b-e31dde7a6daa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "30edcd48-606d-40a4-b815-a31a30ffd824", "node_type": null, "metadata": {}, "hash": "d2ab03878d9b54993e12a50a3aadb0ed01d62810af3626b906247c6f2cf35b09"}, "3": {"node_id": "a7c1cef1-ba90-4dd4-a366-05c37ea5289f", "node_type": null, "metadata": {}, "hash": "459b255aaa99abe51b2d93b6b9616b4cb0aaa881e5e3d0fa08d15df03128db3b"}}, "hash": "1f360d1eed989980b4a720e5a8581ab25ec4b29cab3fa5c5499e8d516b3b3d06", "text": "\\section{Semantic errors}\n\\index{semantic error}\n\\index{error!semantic}\n\nIn some ways, semantic errors are the hardest to debug,\nbecause the compiler and the runtime system provide no information\nabout what is wrong.  Only you know what the program is supposed to\ndo, and only you know that it isn't doing it.\n\nThe first step is to make a connection between the program\ntext and the behavior you are seeing.  You need a hypothesis\nabout what the program is actually doing.  One of the things\nthat makes that hard is that computers run so fast.\n\nYou will often wish that you could slow the program down to human\nspeed, and with some debuggers you can.  But the time it takes to\ninsert a few well-placed {\\tt print} statements is often short compared to\nsetting up the debugger, inserting and removing breakpoints, and\n``walking'' the program to where the error is occurring.\n\n\\subsection{My program doesn't work.}\n\nYou should ask yourself these questions:\n\n\\begin{itemize}\n\n\\item Is there something the program was supposed to do but\nwhich doesn't seem to be happening?  Find the section of the code\nthat performs that function and make sure it is executing when\nyou think it should.\n\n\\item Is something happening that shouldn't?  Find code in\nyour program that performs that function and see if it is\nexecuting when it shouldn't.\n\n\\item Is a section of code producing an effect that is not\nwhat you expected?  Make sure that you understand the code in\nquestion, especially if it involves invocations to functions or methods in\nother Python modules.  Read the documentation for the functions you invoke.\nTry them out by writing simple test cases and checking the results.\n\n\\end{itemize}\n\nIn order to program, you need to have a mental model of how\nprograms work.  If you write a program that doesn't do what you expect,\nvery often the problem is not in the program; it's in your mental\nmodel.\n\n\\index{model!mental}\n\\index{mental model}\n\nThe best way to correct your mental model is to break the program\ninto its components (usually the functions and methods) and test\neach component independently.  Once you find the discrepancy\nbetween your model and reality, you can solve the problem.\n\nOf course, you should be building and testing components as you\ndevelop the program.  If you encounter a problem,\nthere should be only a small amount of new code\nthat is not known to be correct.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a7c1cef1-ba90-4dd4-a366-05c37ea5289f": {"__data__": {"id_": "a7c1cef1-ba90-4dd4-a366-05c37ea5289f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "08affb40-2cbf-4b09-aa2b-e31dde7a6daa", "node_type": null, "metadata": {}, "hash": "1f360d1eed989980b4a720e5a8581ab25ec4b29cab3fa5c5499e8d516b3b3d06"}, "3": {"node_id": "ad10fe86-f437-47cb-873c-2c6cd3329369", "node_type": null, "metadata": {}, "hash": "32ce97c8a961e4838906499414caf6b1b44216acf9103b5aea3127795a68da21"}}, "hash": "459b255aaa99abe51b2d93b6b9616b4cb0aaa881e5e3d0fa08d15df03128db3b", "text": "\\subsection{I've got a big hairy expression and it doesn't\ndo what I expect.}\n\\index{expression!big and hairy}\n\nWriting complex expressions is fine as long as they are readable,\nbut they can be hard to debug.  It is often a good idea to\nbreak a complex expression into a series of assignments to\ntemporary variables.\n\nFor example:\n\n\\beforeverb\n\\begin{verbatim}\nself.hands[i].addCard (self.hands[self.findNeighbor(i)].popCard())\n\\end{verbatim}\n\\afterverb\n%\nThis can be rewritten as:\n\n\\beforeverb\n\\begin{verbatim}\nneighbor = self.findNeighbor (i)\npickedCard = self.hands[neighbor].popCard()\nself.hands[i].addCard (pickedCard)\n\\end{verbatim}\n\\afterverb\n%\nThe explicit version is easier to read because the variable\nnames provide additional documentation, and it is easier to debug\nbecause you can check the types of the intermediate variables\nand display their values.\n\n\\index{temporary variable}\n\\index{variable!temporary}\n\\index{order of evaluation}\n\\index{precedence}\n\nAnother problem that can occur with big expressions is\nthat the order of evaluation may not be what you expect.\nFor example, if you are translating the expression\n$\\frac{x}{2 \\pi}$ into Python, you might write:\n\n\\beforeverb\n\\begin{verbatim}\ny = x / 2 * math.pi\n\\end{verbatim}\n\\afterverb\n%\nThat is not correct because multiplication and division have\nthe same precedence and are evaluated from left to right.\nSo this expression computes $x \\pi / 2$.\n\nA good way to debug expressions is to add parentheses to make\nthe order of evaluation explicit:\n\n\\beforeverb\n\\begin{verbatim}\n y = x / (2 * math.pi)\n\\end{verbatim}\n\\afterverb\n%\nWhenever you are not sure of the order of evaluation, use\nparentheses.  Not only will the program be correct (in the sense\nof doing what you intended), it will also be more readable for\nother people who haven't memorized the rules of precedence.\n\n\n\\subsection{I've got a function or method that doesn't return what I\nexpect.}\n\\index{return statement}\n\\index{statement!return}\n\nIf you have a {\\tt return} statement with a complex expression,\nyou don't have a chance to print the {\\tt return} value before\nreturning.  Again, you can use a temporary variable.  For\nexample, instead of:\n\n\\beforeverb\n\\begin{verbatim}\nreturn self.hands[i].removeMatches()\n\\end{verbatim}\n\\afterverb\n%\nyou could write:\n\n\\beforeverb\n\\begin{verbatim}\ncount = self.hands[i].removeMatches()\nreturn count\n\\end{verbatim}\n\\afterverb\n%\nNow you have the opportunity to display the value of\n{\\tt count} before returning.\n\n\n\\subsection{I'm really, really stuck and I need help.}\n\nFirst, try getting away from the computer for a few minutes.\nComputers emit waves that affect the brain, causing these\neffects:\n\n\\begin{itemize}\n\n\\item Frustration and/or rage.\n\n\\item Superstitious beliefs (``the computer hates me'') and\nmagical thinking (``the program only works when I wear my\nhat backward'').\n\n\\item Random-walk programming (the attempt to program by writing\nevery possible program and choosing the one that does the right\nthing).\n\n\\end{itemize}\n\nIf you find yourself suffering from any of these symptoms, get\nup and go for a walk.  When you are calm, think about the program.\nWhat is it doing?  What are some possible causes of that\nbehavior?  When was the last time you had a working program,\nand what did you do next?\n\nSometimes it just takes time to find a bug.  We often find bugs\nwhen we are away from the computer and let our minds wander.  Some\nof the best places to find bugs are trains, showers, and in bed,\njust before you fall asleep.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad10fe86-f437-47cb-873c-2c6cd3329369": {"__data__": {"id_": "ad10fe86-f437-47cb-873c-2c6cd3329369", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5d27f08-e86f-411d-8d21-6cb9b9015eeb", "node_type": null, "metadata": {}, "hash": "18bcc2a26edb52927481ba8ebb3c2ab800deac0bdd679a15548186b97f086ea0"}, "2": {"node_id": "a7c1cef1-ba90-4dd4-a366-05c37ea5289f", "node_type": null, "metadata": {}, "hash": "459b255aaa99abe51b2d93b6b9616b4cb0aaa881e5e3d0fa08d15df03128db3b"}}, "hash": "32ce97c8a961e4838906499414caf6b1b44216acf9103b5aea3127795a68da21", "text": "\\subsection{No, I really need help.}\n\nIt happens.  Even the best programmers occasionally get stuck.\nSometimes you work on a program so long that you can't see the\nerror.  A fresh pair of eyes is just the thing.\n\nBefore you bring someone else in, make sure you have exhausted\nthe techniques described here.  Your program should be as simple\nas possible, and you should be working on the smallest input\nthat causes the error.  You should have {\\tt print} statements in the\nappropriate places (and the output they produce should be\ncomprehensible).  You should understand the problem well enough\nto describe it concisely.\n\nWhen you bring someone in to help, be sure to give\nthem the information they need:\n\n\\begin{itemize}\n\n\\item If there is an error message, what is it\nand what part of the program does it indicate?\n\n\\item What was the last thing you did before this error occurred?\nWhat were the last lines of code that you wrote, or what is\nthe new test case that fails?\n\n\\item What have you tried so far, and what have you learned?\n\n\\end{itemize}\n\nWhen you find the bug, take a second to think about what you\ncould have done to find it faster.  Next time you see something\nsimilar, you will be able to find the bug more quickly.\n\nRemember, the goal is not just to make the program\nwork.  The goal is to learn how to make the program work.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a49e389c-f457-4114-bb4a-7ab41ec6490c": {"__data__": {"id_": "a49e389c-f457-4114-bb4a-7ab41ec6490c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "3": {"node_id": "c381a8cb-0c74-4ec8-9dd4-326416f7bc32", "node_type": null, "metadata": {}, "hash": "974022a8cb3d401c102f7509746e9a85638d99d96d0fb354864e8f1bfd43b7c1"}}, "hash": "ccb23ac1e210312a6e96836172661b1b2644ff363b9d2cde9f25dd9084822379", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\n\\chapter{Creating a new data type}\n\\label{overloading}\n\\index{data type!user-defined}\n\nObject-oriented programming languages allow programmers to create new\ndata types that behave much like built-in data types.  We will explore\nthis capability by building a {\\tt Fraction} class that works very much\nlike the built-in numeric types: integers, longs and floats.\n\nFractions, also known as rational numbers, are values that can be expressed\nas a ratio of whole numbers, such as $5/6$. The top number is\ncalled the numerator and the bottom number is called the denominator.\n\n\\index{rational}\n\\index{fraction}\n\\index{numerator}\n\\index{denominator}\n\nWe start by defining a {\\tt Fraction} class with an initialization\nmethod that provides the numerator and denominator as integers:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  def __init__(self, numerator, denominator=1):\n    self.numerator = numerator\n    self.denominator = denominator\n\\end{verbatim}\n\\afterverb\n%\nThe denominator is optional.  A Fraction with just one\nparameter represents a whole number.  If the numerator\nis $n$, we build the Fraction\n$n/1$.\n\nThe next step is to write a {\\tt \\_\\_str\\_\\_} method that\ndisplays fractions in a way that makes sense.  The form\n``numerator/denominator'' is natural here:\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  def __str__(self):\n    return \"%d/%d\" % (self.numerator, self.denominator)\n\\end{verbatim}\n\\afterverb\n%\nTo test what we have so far, we put it in a file named\n{\\tt Fraction.py} and import it into the Python interpreter.\nThen we create a fraction object and print it.\n\n\\beforeverb\n\\begin{verbatim}\n>>> from Fraction import Fraction\n>>> spam = Fraction(5,6)\n>>> print \"The fraction is\", spam\nThe fraction is 5/6\n\\end{verbatim}\n\\afterverb\n%\nAs usual, the {\\tt print} command invokes the {\\tt \\_\\_str\\_\\_}\nmethod implicitly.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c381a8cb-0c74-4ec8-9dd4-326416f7bc32": {"__data__": {"id_": "c381a8cb-0c74-4ec8-9dd4-326416f7bc32", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "2": {"node_id": "a49e389c-f457-4114-bb4a-7ab41ec6490c", "node_type": null, "metadata": {}, "hash": "ccb23ac1e210312a6e96836172661b1b2644ff363b9d2cde9f25dd9084822379"}, "3": {"node_id": "6d7285c2-c06b-4c3e-9c04-eb4cb0482338", "node_type": null, "metadata": {}, "hash": "94407d163baa5a82d88ae62fd0a010477a747f1761636e2dc4784737c48637a6"}}, "hash": "974022a8cb3d401c102f7509746e9a85638d99d96d0fb354864e8f1bfd43b7c1", "text": "\\section {Fraction multiplication}\n\\index{multiplication!fraction}\n\\index{fraction!multiplication}\n\nWe would like to be able to apply the normal addition, subtraction,\nmultiplication, and division operations to fractions.  To do this, we\ncan overload the mathematical operators for {\\tt Fraction} objects.\n\n\\index{overload}\n\\index{operator!overloading}\n\\index{mathematical operator}\n\nWe'll start with multiplication because it is the easiest to implement.\nTo multiply fractions, we create a new fraction with a numerator\nthat is the product of the original numerators and a denominator that\nis a product of the original denominators.  {\\tt \\_\\_mul\\_\\_} is the\nname Python uses for a method that overloads the {\\tt *} operator:\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  def __mul__(self, other):\n    return Fraction(self.numerator*other.numerator,\n                    self.denominator*other.denominator)\n\\end{verbatim}\n\\afterverb\n%\nWe can test this method by computing the product of two fractions:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print Fraction(5,6) * Fraction(3,4)\n15/24\n\\end{verbatim}\n\\afterverb\n%\nIt works, but we can do better!  We can extend the method to\nhandle multiplication by an integer.  We use the {\\tt isinstance} function\nto test if {\\tt other} is an integer and convert it to a fraction if\nit is.\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  def __mul__(self, other):\n    if isinstance(other, int):\n      other = Fraction(other)\n    return Fraction(self.numerator   * other.numerator,\n                    self.denominator * other.denominator)\n\\end{verbatim}\n\\afterverb\n%\nMultiplying fractions and integers now works, but only if the fraction\nis the left operand:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print Fraction(5,6) * 4\n20/6\n>>> print 4 * Fraction(5,6)\nTypeError: __mul__ nor __rmul__ defined for these operands\n\\end{verbatim}\n\\afterverb\n%\nTo evaluate a binary operator like multiplication, Python checks\nthe left operand first to see if it provides a {\\tt \\_\\_mul\\_\\_}\nthat supports the type of the second operand.  In this case,\nthe built-in integer operator doesn't support fractions.\n\nNext, Python checks the right operand to see if it provides\nan {\\tt \\_\\_rmul\\_\\_} method that supports the first type.  In\nthis case, we haven't provided {\\tt \\_\\_rmul\\_\\_}, so it fails.\n\nOn the other hand, there is a simple way to provide\n{\\tt \\_\\_rmul\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  __rmul__ = __mul__\n\\end{verbatim}\n\\afterverb\n%\nThis assignment says that the {\\tt \\_\\_rmul\\_\\_} is the same\nas {\\tt \\_\\_mul\\_\\_}.\nNow if we evaluate {\\tt 4 * Fraction(5,6)}, Python invokes\n{\\tt \\_\\_rmul\\_\\_} on the {\\tt Fraction} object and passes 4\nas a parameter:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print 4 * Fraction(5,6)\n20/6\n\\end{verbatim}\n\\afterverb\n%\nSince {\\tt \\_\\_rmul\\_\\_} is the same as {\\tt \\_\\_mul\\_\\_}, and\n{\\tt \\_\\_mul\\_\\_} can handle an integer parameter, we're all set.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6d7285c2-c06b-4c3e-9c04-eb4cb0482338": {"__data__": {"id_": "6d7285c2-c06b-4c3e-9c04-eb4cb0482338", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "2": {"node_id": "c381a8cb-0c74-4ec8-9dd4-326416f7bc32", "node_type": null, "metadata": {}, "hash": "974022a8cb3d401c102f7509746e9a85638d99d96d0fb354864e8f1bfd43b7c1"}, "3": {"node_id": "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9", "node_type": null, "metadata": {}, "hash": "97749fa349984a6a862128ee102d91a5710d06a1d28d59972d864c3f3e85ed5b"}}, "hash": "94407d163baa5a82d88ae62fd0a010477a747f1761636e2dc4784737c48637a6", "text": "\\section{Fraction addition}\n\\index{addition!fraction}\n\\index{fraction!addition}\n\nAddition is more complicated than multiplication, but still not too\nbad.  The sum of $a/b$ and $c/d$ is the fraction\n{\\tt (a*d+c*b)/(b*d)}.\n\nUsing the multiplication code as a model, we can write\n{\\tt \\_\\_add\\_\\_} and {\\tt \\_\\_radd\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  def __add__(self, other):\n    if isinstance(other, int):\n      other = Fraction(other)\n    return Fraction(self.numerator   * other.denominator +\n                    self.denominator * other.numerator,\n                    self.denominator * other.denominator)\n\n  __radd__ = __add__\n\\end{verbatim}\n\\afterverb\n%\nWe can test these methods with {\\tt Fraction}s and integers.\n\n\\beforeverb\n\\begin{verbatim}\n>>> print Fraction(5,6) + Fraction(5,6)\n60/36\n>>> print Fraction(5,6) + 3\n23/6\n>>> print 2 + Fraction(5,6)\n17/6\n\\end{verbatim}\n\\afterverb\n%\nThe first two examples invoke {\\tt \\_\\_add\\_\\_}; the last\ninvokes {\\tt \\_\\_radd\\_\\_}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9": {"__data__": {"id_": "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "2": {"node_id": "6d7285c2-c06b-4c3e-9c04-eb4cb0482338", "node_type": null, "metadata": {}, "hash": "94407d163baa5a82d88ae62fd0a010477a747f1761636e2dc4784737c48637a6"}, "3": {"node_id": "209fc505-f77b-42eb-a0ec-3c89bc7993dd", "node_type": null, "metadata": {}, "hash": "4ffdd0ede983743bbfdd1fd7cf20b9120c23de078fa46a2afe415f7a92c466fc"}}, "hash": "97749fa349984a6a862128ee102d91a5710d06a1d28d59972d864c3f3e85ed5b", "text": "\\section{Euclid's algorithm}\n\\index{greatest common divisor}\n\\index{Euclid}\n\\index{pseudocode}\n\\index{reduce}\n\nIn the previous example, we computed the sum $5/6 + 5/6$ and got\n$60/36$.  That is correct, but it's not the best way to represent the\nanswer.  To {\\bf reduce} the fraction to its simplest terms, we have\nto divide the numerator and denominator by their {\\bf greatest common\ndivisor (GCD)}, which is 12.  The result is $5/3$.\n\nIn general, whenever we create a new {\\tt Fraction} object, we should\nreduce it by dividing the numerator and denominator by their GCD.  If\nthe fraction is already reduced, the GCD is 1.\n\nEuclid of Alexandria (approx. 325--265 BCE) presented an algorithm\nto find the GCD for two integers $m$ and $n$:\n\n\\begin{quote}\nIf $n$ divides $m$ evenly, then $n$ is the GCD.  Otherwise\nthe GCD is the GCD of $n$ and the remainder of $m$ divided by $n$.\n\\end{quote}\n\nThis recursive definition can be expressed concisely as a function:\n\n\\beforeverb\n\\begin{verbatim}\ndef gcd (m, n):\n  if m % n == 0:\n    return n\n  else:\n    return gcd(n, m%n)\n\\end{verbatim}\n\\afterverb\n%\nIn the first line of the body, we use the modulus operator to\ncheck divisibility.  On the last line, we use it to compute\nthe remainder after division.\n\nSince all the operations we've written\ncreate new {\\tt Fraction}s for the result, we can reduce all results\nby modifying the initialization method.\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  def __init__(self, numerator, denominator=1):\n    g = gcd (numerator, denominator)\n    self.numerator   =   numerator / g\n    self.denominator = denominator / g\n\\end{verbatim}\n\\afterverb\n%\nNow whenever we create a {\\tt Fraction}, it is reduced to its simplest\nform:\n\n\\beforeverb\n\\begin{verbatim}\n>>> Fraction(100,-36)\n-25/9\n\\end{verbatim}\n\\afterverb\n%\nA nice feature of {\\tt gcd} is that if the fraction is\nnegative, the minus sign is always moved to the numerator.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "209fc505-f77b-42eb-a0ec-3c89bc7993dd": {"__data__": {"id_": "209fc505-f77b-42eb-a0ec-3c89bc7993dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "2": {"node_id": "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9", "node_type": null, "metadata": {}, "hash": "97749fa349984a6a862128ee102d91a5710d06a1d28d59972d864c3f3e85ed5b"}, "3": {"node_id": "38d0187e-fd3c-40fe-84c5-6038c6db529f", "node_type": null, "metadata": {}, "hash": "5938289984a317ba20f61ce85fcac21d37d7daebb763be62fe8079039cd28ed5"}}, "hash": "4ffdd0ede983743bbfdd1fd7cf20b9120c23de078fa46a2afe415f7a92c466fc", "text": "\\section{Comparing fractions}\n\\index{comparison!fraction}\n\\index{fraction!comparison}\n\nSuppose we have two {\\tt Fraction} objects, {\\tt a} and {\\tt b}, and we\nevaluate {\\tt a == b}.  The default implementation of {\\tt ==}\ntests for shallow equality, so it only returns true if {\\tt a}\nand {\\tt b} are the same object.\n\nMore likely, we want to return true if $a$ and $b$ have\nthe same value---that is, deep equality.\n\nWe have to teach fractions how to compare themselves.  As we saw in\nSection~\\ref{comparecard}, we can overload all the comparison\noperators at once by supplying a {\\tt \\_\\_cmp\\_\\_} method.\n\nBy convention, the {\\tt \\_\\_cmp\\_\\_} method returns a\nnegative number if {\\tt self} is less than {\\tt other}, zero\nif they are the same, and a positive number if {\\tt self} is greater\nthan {\\tt other}.\n\nThe simplest way to compare fractions is to cross-multiply.\nIf $a/b > c/d$, then $ad > bc$.\nWith that in mind, here is the code for {\\tt \\_\\_cmp\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  ...\n  def __cmp__(self, other):\n    diff = (self.numerator  * other.denominator -\n            other.numerator * self.denominator)\n    return diff\n\\end{verbatim}\n\\afterverb\n%\nIf {\\tt self} is greater than {\\tt other}, then {\\tt diff}\nwill be positive.  If {\\tt other} is greater, then {\\tt diff}\nwill be negative.  If they are the same, {\\tt diff} is zero.\n\n\n\\section {Taking it further}\n\nOf course, we are not done.  We still have to implement\nsubtraction by overriding {\\tt \\_\\_sub\\_\\_} and division\nby overriding {\\tt \\_\\_div\\_\\_}.\n\nOne way to handle those operations is to implement negation\nby overriding\n{\\tt \\_\\_neg\\_\\_} and inversion by overriding {\\tt \\_\\_invert\\_\\_}.\nThen we can subtract by negating the second operand and adding,\nand we can divide by inverting the second operand and\nmultiplying.\n\nNext, we have to provide {\\tt \\_\\_rsub\\_\\_} and {\\tt \\_\\_rdiv\\_\\_}.\nUnfortunately, we can't use the same trick we used for addition and\nmultiplication, because subtraction and division are not commutative.\nWe can't just set {\\tt \\_\\_rsub\\_\\_} and {\\tt \\_\\_rdiv\\_\\_} equal to\n{\\tt \\_\\_sub\\_\\_} and {\\tt \\_\\_div\\_\\_}.  In these operations, the\norder of the operands makes a difference.\n\nTo handle {\\bf unary negation}, which is the use of the minus\nsign with a single operand, we override {\\tt \\_\\_neg\\_\\_}.\n\n\\index{unary operator}\n\\index{negation}\n\nWe can compute powers by overriding {\\tt \\_\\_pow\\_\\_},\nbut the implementation is a little tricky.  If the exponent isn't\nan integer, then it may not be possible to represent the result\nas a {\\tt Fraction}.  For example, {\\tt Fraction(2) ** Fraction(1,2)}\nis the square root of 2, which is an irrational number (it can't\nbe represented as a fraction).\nSo it's not easy to write the most general version of {\\tt \\_\\_pow\\_\\_}.\n\n\\index{irrational}\n\nThere is one other extension to the {\\tt Fraction} class that you might\nwant to think about.  So far, we have assumed that the numerator\nand denominator are integers.\n\n\\begin{quote}\n{\\em As an exercise, finish the implementation of the {\\tt Fraction}\nclass so that it handles subtraction, division and exponentiation.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "38d0187e-fd3c-40fe-84c5-6038c6db529f": {"__data__": {"id_": "38d0187e-fd3c-40fe-84c5-6038c6db529f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65bb8589-485e-470d-b83a-68f40dd30598", "node_type": null, "metadata": {}, "hash": "367efa5bfa66d48b4934fcfbe5b0c0335479731607b30dac032649f476978ac6"}, "2": {"node_id": "209fc505-f77b-42eb-a0ec-3c89bc7993dd", "node_type": null, "metadata": {}, "hash": "4ffdd0ede983743bbfdd1fd7cf20b9120c23de078fa46a2afe415f7a92c466fc"}}, "hash": "5938289984a317ba20f61ce85fcac21d37d7daebb763be62fe8079039cd28ed5", "text": "\\section{Glossary}\n\n\\begin{description}\n\n\\item[greatest common divisor (GCD):] The largest positive integer\nthat divides without a remainder into both the numerator and denominator\nof a fraction.\n\n\\item[reduce:] To change a fraction into an equivalent form with a\nGCD of 1.\n\n\\item[unary negation:] The operation that computes an additive\ninverse, usually denoted with a leading minus sign.  Called \n``unary'' by contrast with the binary minus operation, which is\nsubtraction.\n\n\n\\index{greatest common divisor}\n\\index{reduce}\n\\index{unary negation}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e1ad94ee-b96e-43a4-8ce0-382b5ec83b21": {"__data__": {"id_": "e1ad94ee-b96e-43a4-8ce0-382b5ec83b21", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "3": {"node_id": "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5", "node_type": null, "metadata": {}, "hash": "39b7496d8f9ca5e24f724490f33246e875632ad1b3d240c2e08c68bda8ff3529"}}, "hash": "d84f8b9f58c60fe60a4ffb576b47443f48e038de630d0a65abcc579ed7d7ca94", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\\chapter{Complete Python Listings}\n\n\n\\section{Point class}\n\n\\beforeverb\n\\begin{verbatim}\nclass Point:\n  def __init__(self, x=0, y=0):\n    self.x = x\n    self.y = y\n\n  def __str__(self):\n    return '(' + str(self.x) + ', ' + str(self.y) + ')'\n\n  def __add__(self, other):\n    return Point(self.x + other.x, self.y + other.y)\n\n  def __sub__(self, other):\n    return Point(self.x - other.x, self.y - other.y)\n\n  def __mul__(self, other):\n    return self.x * other.x + self.y * other.y\n\n  def __rmul__(self, other):\n    return Point(other * self.x, other * self.y)\n\n  def reverse(self):\n    self.x, self.y = self.y, self.x\n\n  def frontAndBack(front):\n    from copy import copy\n    back = copy(front)\n    back.reverse()\n    print str(front) + str(back)\n\\end{verbatim}\n\\afterverb\n\n\n\\section{Time class}\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  def __init__(self, hours=0, minutes=0, seconds=0):\n    self.hours = hours\n    self.minutes = minutes\n    self.seconds = seconds\n\n  def __str__(self):\n    return str(self.hours) + \":\" + str(self.minutes) + \":\" + str(self.seconds)\n\n  def convertToSeconds(self):\n    minutes = self.hours * 60 + self.minutes\n    seconds = self.minutes * 60 + self.seconds\n    return seconds\n\n  def increment(self, secs):\n    secs = secs + self.seconds\n\n    self.hours = self.hours + secs/3600\n    secs = secs % 3600\n    self.minutes = self.minutes + secs/60\n    secs = secs % 60\n    self.seconds = secs\n\n  def makeTime(secs):\n    time = Time()\n    time.hours = secs/3600\n    secs = secs - time.hours * 3600\n    time.minutes = secs/60\n    secs = secs - time.minutes * 60\n    time.seconds = secs\n    return time\n\\end{verbatim}\n\\afterverb", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5": {"__data__": {"id_": "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "e1ad94ee-b96e-43a4-8ce0-382b5ec83b21", "node_type": null, "metadata": {}, "hash": "d84f8b9f58c60fe60a4ffb576b47443f48e038de630d0a65abcc579ed7d7ca94"}, "3": {"node_id": "d2c42aad-be12-4391-9d49-6f98b336a7aa", "node_type": null, "metadata": {}, "hash": "092b9c6a0a8a3c4e5dbc84d46610623d0ea06bb2176a27ca2ef416b3cf42521e"}}, "hash": "39b7496d8f9ca5e24f724490f33246e875632ad1b3d240c2e08c68bda8ff3529", "text": "\\section {Cards, decks and games}\n\n\\beforeverb\n\\begin{verbatim}\nimport random\n\nclass Card:\n  suitList = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n  rankList = [ \"narf\", \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\n                \"Jack\", \"Queen\", \"King\"]\n\n  def __init__(self, suit=0, rank=0):\n    self.suit = suit\n    self.rank = rank\n\n  def __str__(self):\n    return self.rankList[self.rank] + \" of \" + self.suitList[self.suit]\n\n  def __cmp__(self, other):\n    # check the suits\n    if self.suit > other.suit: return 1\n    if self.suit < other.suit: return -1\n    # suits are the same... check ranks\n    if self.rank > other.rank: return 1\n    if self.rank < other.rank: return -1\n    # ranks are the same... it's a tie\n    return 0\n\nclass Deck:\n  def __init__(self):\n    self.cards = []\n    for suit in range(4):\n      for rank in range(1, 14):\n        self.cards.append(Card(suit, rank))\n\n  def printDeck(self):\n    for card in self.cards:\n      print card\n\n  def __str__(self):\n    s = \"\"\n    for i in range(len(self.cards)):\n      s = s + \" \"*i + str(self.cards[i]) + \"\\n\"\n    return s\n\n  def shuffle(self):\n    import random\n    nCards = len(self.cards)\n    for i in range(nCards):\n      j = random.randrange(i, nCards)\n      [self.cards[i], self.cards[j]] = [self.cards[j], self.cards[i]]\n\n  def removeCard(self, card):\n    if card in self.cards:\n      self.cards.remove(card)\n      return 1\n    else: return 0\n\n  def popCard(self):\n    return self.cards.pop()\n\n  def isEmpty(self):\n    return (len(self.cards) == 0)\n\n  def deal(self, hands, nCards=999):\n    nHands = len(hands)\n    for i in range(nCards):\n      if self.isEmpty(): break    # break if out of cards\n      card = self.popCard()      # take the top card\n      hand = hands[i % nHands]    # whose turn is next?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d2c42aad-be12-4391-9d49-6f98b336a7aa": {"__data__": {"id_": "d2c42aad-be12-4391-9d49-6f98b336a7aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5", "node_type": null, "metadata": {}, "hash": "39b7496d8f9ca5e24f724490f33246e875632ad1b3d240c2e08c68bda8ff3529"}, "3": {"node_id": "9447d812-d668-42d7-860b-27936468ab3d", "node_type": null, "metadata": {}, "hash": "7ad434cd80cbdb3e8af1825252b1e1c5a1ca5ab88d2cea1cbad62dccf2dfa9cd"}}, "hash": "092b9c6a0a8a3c4e5dbc84d46610623d0ea06bb2176a27ca2ef416b3cf42521e", "text": "hand.addCard(card)         # add the card to the hand\n\nclass Hand(Deck):\n  def __init__(self, name=\"\"):\n    self.cards = []\n    self.name = name\n\n  def addCard(self,card) :\n    self.cards.append(card)\n\n  def __str__(self):\n    s = \"Hand \" + self.name\n    if self.isEmpty():\n      s = s + \" is empty\\n\"\n    else:\n      s = s + \" contains\\n\"\n    return s + Deck.__str__(self)\n\nclass CardGame:\n  def __init__(self):\n    self.deck = Deck()\n    self.deck.shuffle()\n\nclass OldMaidHand(Hand):\n  def removeMatches(self):\n    count = 0\n    originalCards = self.cards[:]\n    for card in originalCards:\n      match = Card(3 - card.suit, card.rank)\n      if match in self.cards:\n        self.cards.remove(card)\n        self.cards.remove(match)\n        print \"Hand %s: %s matches %s\" % (self.name,card,match)\n        count = count+1\n    return count\n\nclass OldMaidGame(CardGame):\n  def play(self, names):\n    # remove Queen of Clubs\n    self.deck.removeCard(Card(0,12))\n\n    # make hands base on names passed\n    self.hands = []\n    for name in names : self.hands.append(OldMaidHand(name))\n\n    # deal the cards\n    self.deck.deal(self.hands)\n    print \"---------- Cards have been dealt\"\n    self.printHands()\n\n    # Remove initial matches\n    matches = self.removeMatches()\n    print \"---------- Matches discarded, play begins\"\n    self.printHands()\n\n    # Play until all 50 cards matched\n    turn = 0\n    numHands = len(self.hands)\n    while matches < 25:\n      matches = matches + self.playOneTurn(turn)\n      turn = (turn + 1) % numHands\n\n    print \"---------- Game is Over\"\n    self.printHands ()\n\n  def removeMatches(self):\n    count = 0\n    for hand in self.hands:\n      count = count + hand.removeMatches()\n    return count\n\n  def playOneTurn(self, i):\n    if self.hands[i].isEmpty():\n      return 0\n    neighbor = self.findNeighbor(i)\n    pickedCard = self.hands[neighbor].popCard()\n    self.hands[i].addCard(pickedCard)\n    print \"Hand\", self.hands[i].name, \"picked\", pickedCard\n    count = self.hands[i].removeMatches()\n    self.hands[i].shuffle()\n    return count\n\n  def findNeighbor(self, i):\n    numHands = len(self.hands)\n    for next in range(1,numHands):\n      neighbor = (i + next) % numHands\n      if not self.hands[neighbor].isEmpty():\n        return neighbor\n\n  def printHands(self) :\n    for hand in self.hands :\n        print hand\n\n\\end{verbatim}\n\\afterverb\n\n\n\\section{Linked Lists}\n\n\\beforeverb\n\\begin{verbatim}\n  def printList(node) :\n    while node :\n      print node,\n      node = node.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9447d812-d668-42d7-860b-27936468ab3d": {"__data__": {"id_": "9447d812-d668-42d7-860b-27936468ab3d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "d2c42aad-be12-4391-9d49-6f98b336a7aa", "node_type": null, "metadata": {}, "hash": "092b9c6a0a8a3c4e5dbc84d46610623d0ea06bb2176a27ca2ef416b3cf42521e"}, "3": {"node_id": "b8d382cd-0334-429b-9834-99a34e818741", "node_type": null, "metadata": {}, "hash": "abddb556fe5a507c9f3357bc8e6efcf625649f60906693bdd6cbfc63e98d620c"}}, "hash": "7ad434cd80cbdb3e8af1825252b1e1c5a1ca5ab88d2cea1cbad62dccf2dfa9cd", "text": "node = node.next\n    print\n  \n  def printBackward(list) :\n    if list == None : return\n    head = list\n    tail = list.next\n    printBackward(tail)\n    print head,\n  \n  def printBackwardNicely(list) :\n    print \"(\",\n    if list != None :\n      head = list\n      tail = list.next\n      printBackward(tail)\n      print head,\n    print \")\",\n  \n  def removeSecond(list) :\n    if list == None : return\n    first  = list\n    second = list.next\n    first.next = second.next\n    second.next = None\n    return second\n\nclass Node :\n\n  def __init__(self, cargo=None) :\n    self.cargo = cargo\n    self.next  = None\n\n  def __str__(self) :\n    return str(self.cargo)\n\n  def printBackward(self) :\n    if self.next != None :\n      tail = self.next\n      tail.printBackward()\n    print self.cargo,\n\nclass LinkedList :\n  def __init__(self) :\n    self.length = 0\n    self.head   = None\n\n  def printBackward(self) :\n    print \"(\",\n    if self.head != None :\n      self.head.printBackward()\n    print \")\",\n\n  def addFirst(self, cargo) :\n    node = Node(cargo)\n    node.next = self.head\n    self.head = node\n    self.length = self.length + 1\n\\end{verbatim}\n\\afterverb\n\n\\section{Stack class}\n\n\\beforeverb\n\\begin{verbatim}\n\nclass Stack:              # Python list implementation\n  def __init__(self):\n    self.items = []\n\n  def push(self, item):\n    self.items.append(item)\n\n  def pop(self):\n    return self.items.pop()\n\n  def isEmpty(self):\n    return(self.items == [])\n\n  def evalPostfix(expr) :\n    import re\n    expr = re.split(\"([^0-9])\", expr)\n    stack = Stack()\n    for token in expr :\n      if  token == '' or token == ' ':\n        continue\n      if  token == '+' :\n        sum = stack.pop() + stack.pop()\n        stack.push(sum)\n      elif token == '*' :\n        product = stack.pop() * stack.pop()\n        stack.push(product)\n      else :\n        stack.push(int(token))\n    return stack.pop()\n\n\\end{verbatim}\n\\afterverb\n\n\\section {Queues and priority queues}\n\\beforeverb\n\\begin{verbatim}\n\nclass Queue :\n  def __init__(self) :\n    self.length = 0\n    self.head   = None\n\n  def empty(self) :\n    return (self.length == 0)\n\n  def insert(self, cargo) :\n    node = Node(cargo)\n    node.next = None\n    if self.head == None :\n        # If list is empty our new node is first\n        self.head = node\n    else :\n        # Find the last node in the list\n        last = self.head\n        while last.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b8d382cd-0334-429b-9834-99a34e818741": {"__data__": {"id_": "b8d382cd-0334-429b-9834-99a34e818741", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "9447d812-d668-42d7-860b-27936468ab3d", "node_type": null, "metadata": {}, "hash": "7ad434cd80cbdb3e8af1825252b1e1c5a1ca5ab88d2cea1cbad62dccf2dfa9cd"}, "3": {"node_id": "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e", "node_type": null, "metadata": {}, "hash": "70fc42c11782e3c18eb67a219b3930e1c6dfbf5c70fb3abf8ce4bd5a5fd1fb9c"}}, "hash": "abddb556fe5a507c9f3357bc8e6efcf625649f60906693bdd6cbfc63e98d620c", "text": "head\n        while last.next : last = last.next\n        # Append our new node\n        last.next = node\n    self.length = self.length + 1\n\n  def remove(self) :\n    cargo = self.head.cargo\n    self.head = self.head.next\n    self.length = self.length - 1\n    return cargo\n\nclass ImprovedQueue :\n  def __init__(self) :\n    self.length = 0\n    self.head   = None\n    self.last   = None\n\n  def empty(self) :\n    return (self.length == 0)\n\n  def insert(self, cargo) :\n    node = Node(cargo)\n    node.next = None\n    if self.length == 0 :\n        # If list is empty our new node is first\n        self.head = self.last = node\n    else :\n        # Find the last node in the list\n        last = self.last\n        # Append our new node\n        last.next = node\n        self.last = node\n    self.length = self.length + 1\n\n  def remove(self) :\n    cargo    = self.head.cargo\n    self.head = self.head.next\n    self.length = self.length - 1\n    if self.length == 0 : self.last = None\n    return cargo\n\nclass PriorityQueue :\n  def __init__(self) :\n    self.items = []\n\n  def empty(self) :\n    return self.items == []\n\n  def insert(self, item) :\n    self.items.append(item)\n\n  def remove(self) :\n    maxi = 0\n    for i in range(1,len(self.items)) :\n       if self.items[i] > self.items[maxi] :\n         maxi = i\n    item = self.items[maxi]\n    self.items[maxi:maxi+1] = []\n    return item\n\nclass Golfer :\n  def __init__(self, name, score) :\n    self.name = name\n    self.score= score\n\n  def __str__(self) :\n    return \"%-15s: %d\" % (self.name, self.score)\n\n  def __cmp__(self, other) :\n    if self.score < other.score : return  1   # less is more\n    if self.score > other.score : return -1\n    return 0\n\n\\end{verbatim}\n\\afterverb\n\n\\section{Trees}\n\\beforeverb\n\\begin{verbatim}\nclass Tree :\n  def __init__(self, cargo, left=None, right=None) :\n    self.cargo = cargo\n    self.left  = left\n    self.right = right\n\n  def __str__(self) :\n    return str(self.cargo)\n\n  def getCargo(self): return self.cargo\n  def getLeft (self): return self.left\n  def getRight(self): return self.right\n\n  def setCargo(self, cargo):  self.cargo = cargo\n  def setLeft (self,  left):  self.left = left\n  def setRight(self, right):  self.right = right\n\ndef total(tree) :\n  if tree == None : return 0\n  return total(tree.left) + total(tree.right) + tree.cargo\n\ndef printTree(tree) :\n  if tree == None : return\n  print tree.cargo,\n  printTree(tree.left)\n  printTree(tree.right)\n\ndef printTreePostorder(tree) :\n  if tree == None : return\n  printTreePostorder(tree.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e": {"__data__": {"id_": "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "b8d382cd-0334-429b-9834-99a34e818741", "node_type": null, "metadata": {}, "hash": "abddb556fe5a507c9f3357bc8e6efcf625649f60906693bdd6cbfc63e98d620c"}, "3": {"node_id": "fa24eeb0-41ac-4cd5-aa70-eadbea570e4f", "node_type": null, "metadata": {}, "hash": "6f4b6a69e05d7a06e46cd221598a962bdcf8a185dbf6fbeba0c56578a031ecc1"}}, "hash": "70fc42c11782e3c18eb67a219b3930e1c6dfbf5c70fb3abf8ce4bd5a5fd1fb9c", "text": "left)\n  printTreePostorder(tree.right)\n  print tree.cargo,\n\ndef printTreeInorder(tree) :\n  if tree == None : return\n  printTreeInorder(tree.left)\n  print tree.cargo,\n  printTreeInorder(tree.right)\n\ndef printTreeIndented(tree, level=0) :\n  if tree == None : return\n  printTreeIndented(tree.right, level+1)\n  print '  '*level + str(tree.cargo)\n  printTreeIndented(tree.left, level+1)\n\\end{verbatim}\n\n\\section{Expression trees}\n\n\\begin{verbatim}\ndef getToken(tokenList, expected) :\n  if tokenList[0] == expected :\n    tokenList[0:1] = []   # remove the token\n    return 1\n  else :\n    return 0\n\ndef getProduct(tokenList) :\n  a = getNumber(tokenList)\n  if getToken(tokenList, '*') :\n    b = getProduct(tokenList)\n    return Tree('*', a, b)\n  else :\n    return a\n\ndef getSum(tokenList) :\n  a = getProduct(tokenList)\n  if getToken(tokenList, '+') :\n    b = getSum(tokenList)\n    return Tree('+', a, b)\n  else :\n    return a\n\ndef getNumber(tokenList) :\n  if getToken(tokenList, '(') :\n    x = getSum(tokenList)      # get subexpression\n    getToken(tokenList, ')')    # eat the closing parenthesis\n    return x\n  else :\n    x = tokenList[0]\n    if not isinstance(x, int) : return None\n    tokenList[0:1] = []   # remove the token\n    return Tree(x, None, None)    # return a leaf with the number\n\\end{verbatim}\n\n\n\\section{Guess the animal}\n\n\\begin{verbatim}\ndef animal() :\n  # start with a singleton\n  root = Tree(\"bird\")\n\n  # loop until the user quits\n  while 1 :\n    print\n    if not yes(\"Are you thinking of an animal? \") : break\n\n    # walk the tree\n    tree = root\n    while tree.getLeft() != None :\n      prompt = tree.getCargo() + \"? \"\n      if yes(prompt):\n        tree = tree.getRight()\n      else:\n        tree = tree.getLeft()\n\n    # make a guess\n    guess = tree.getCargo()\n    prompt = \"Is it a \" + guess + \"? \"\n    if yes(prompt) :\n      print \"I rule!\"\n      continue\n\n    # get new information\n    prompt  = \"What is the animal\\'s name? \"\n    animal  = raw_input(prompt)\n    prompt  = \"What question would distinguish a %s from a %s? \"\n    question = raw_input(prompt % (animal,guess))\n\n    # add new information to the tree\n    tree.setCargo(question)\n    prompt = \"If the animal were %s the answer would be? \"\n    if yes(prompt % animal) :\n      tree.setLeft(Tree(guess))\n      tree.setRight(Tree(animal))\n    else :\n      tree.setLeft(Tree(animal))\n      tree.setRight(Tree(guess))", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fa24eeb0-41ac-4cd5-aa70-eadbea570e4f": {"__data__": {"id_": "fa24eeb0-41ac-4cd5-aa70-eadbea570e4f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3fd772a-d386-4522-bf40-858dcb47beef", "node_type": null, "metadata": {}, "hash": "39085c5c3400cadac8c780017750f7043664c1be634aab6649468947793a7131"}, "2": {"node_id": "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e", "node_type": null, "metadata": {}, "hash": "70fc42c11782e3c18eb67a219b3930e1c6dfbf5c70fb3abf8ce4bd5a5fd1fb9c"}}, "hash": "6f4b6a69e05d7a06e46cd221598a962bdcf8a185dbf6fbeba0c56578a031ecc1", "text": "def yes(ques) :\n  from string import lower\n  ans = lower(raw_input(ques))\n  return (ans[0:1] == 'y')\n\\end{verbatim}\n\n\\section{{\\tt Fraction} class}\n\n\\beforeverb\n\\begin{verbatim}\nclass Fraction:\n  def __init__(self, numerator, denominator=1):\n    g = gcd(numerator, denominator)\n    self.numerator   = numerator   / g\n    self.denominator = denominator / g\n\n  def __mul__(self, object):\n    if isinstance(object, int):\n      object = Fraction(object)\n    return Fraction(self.numerator*object.numerator,\n                 self.denominator*object.denominator)\n\n  __rmul__ = __mul__\n\n  def __add__(self, object):\n    if isinstance(object, int):\n      object = Fraction(object)\n\n    return Fraction(self.numerator*object.denominator +\n                    self.denominator*object.numerator,\n                 self.denominator * object.denominator)\n\n  __radd__ = __add__\n\n  def __cmp__(self, object):\n    if isinstance(object, int):\n      object = Fraction(object)\n\n    diff = (self.numerator*object.denominator -\n            object.numerator*self.denominator)\n    return diff\n\n  def __repr__(self):\n    return self.__str__()\n\n  def __str__(self):\n    return \"%d/%d\" % (self.numerator, self.denominator)\n\ndef gcd(m,n):\n  \"return the greatest common divisor of 2 integer arguments\"\n  if m % n == 0:\n    return n\n  else:\n    return gcd(n,m%n)\n\n\\end{verbatim}\n\\afterverb", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "28a02a3b-dde7-460a-9f99-bcb347d728bb": {"__data__": {"id_": "28a02a3b-dde7-460a-9f99-bcb347d728bb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788", "node_type": null, "metadata": {}, "hash": "13ddcd1cfae725738279879c65c8cc78d2cddb7e1bc4f5ac6d9cc212c04cf188"}, "3": {"node_id": "741aa787-463c-4189-b641-510278e53f0f", "node_type": null, "metadata": {}, "hash": "84fc49ee8070b2fde61902c7c9e12aec417f46d9cc5413878bdae44c468f7a15"}}, "hash": "b958722109282c2318f4bb211ca1add17ad4f93fcfa8cea4669e7d4f42f566c7", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\n\\chapter{Recommendations for further reading}\n\nSo where do you go from here?  There are many directions to pursue,\nextending your knowledge of Python specifically and\ncomputer science in general.\n\nThe examples in this book have been deliberately simple, but they\nmay not have shown off Python's most exciting capabilities.\nHere is a sampling of extensions to Python and suggestions for\nprojects that use them.\n\n\\begin{itemize}\n\n\\item GUI (graphical user interface) programming lets your\nprogram use a windowing environment to interact with the user and\ndisplay graphics.\n\nThe oldest graphics package for Python\nis Tkinter, which is based on Jon Ousterhout's Tcl and Tk scripting\nlanguages.  Tkinter comes bundled with the Python distribution.\n\nAnother\npopular platform is wxPython, which is essentially a Python veneer over\nwxWindows, a C++ package which in turn implements windows using native\ninterfaces on Windows and Unix (including Linux) platforms.  The\nwindows and controls under wxPython tend to have a more native look\nand feel than those of Tkinter and are somewhat simpler to\nprogram.\n\nAny type of GUI programming will lead you into event-driven\nprogramming, where the user and not the programmer determines the flow of\nexecution.  This style of programming takes some getting used to,\nsometimes forcing you to rethink the whole structure of a program.\n\n\\item Web programming integrates Python with the Internet.\nFor example, you can build web client programs that open and read\na remote web page (almost) as easily as you can open a file on\ndisk.  There are also Python modules that let you access remote files\nvia ftp, and modules to let you send and receive email.  Python is also\nwidely used for web server programs to handle input forms.\n\n\\item Databases are a bit like super files where data is stored in\npredefined schemas, and relationships between data items let you access\nthe data in various ways.  Python has several modules to enable\nusers to connect to various database engines, both Open Source and\ncommercial.\n\n\\item Thread programming lets you run several threads of execution \nwithin a single program.  If you have had the experience of using a\nweb browser to scroll the beginning of a page while the browser\ncontinues to load the rest of it, then you have a feel for what\nthreads can do.\n\n\\item When speed is paramount Python extensions may be written in a\ncompiled language like C or C++.  Such extensions\nform the base of many of the modules in the Python\nlibrary. The mechanics of linking functions and data is somewhat\ncomplex.  SWIG (Simplified Wrapper and Interface Generator) is a tool to\nmake the process much simpler.\n\n\\end{itemize}\n\n\n\\section{Python-related web sites and books}\n\nHere are the authors' recommendations for Python resources\non the web:\n\n\\begin{itemize}\n\n\\item The Python home page at {\\tt www.python.org} is the place to start \nyour search for any Python related material.  You will find\nhelp, documentation, links to other sites and SIG (Special Interest\nGroup) mailing lists that you can join.\n\n\\item The Open Book Project {\\tt www.ibiblio.com/obp} contains not\nonly this book online but also similar books for Java and C++ by Allen\nDowney.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "741aa787-463c-4189-b641-510278e53f0f": {"__data__": {"id_": "741aa787-463c-4189-b641-510278e53f0f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788", "node_type": null, "metadata": {}, "hash": "13ddcd1cfae725738279879c65c8cc78d2cddb7e1bc4f5ac6d9cc212c04cf188"}, "2": {"node_id": "28a02a3b-dde7-460a-9f99-bcb347d728bb", "node_type": null, "metadata": {}, "hash": "b958722109282c2318f4bb211ca1add17ad4f93fcfa8cea4669e7d4f42f566c7"}, "3": {"node_id": "3fa2421e-8b56-472f-bdf8-db7bd95d817d", "node_type": null, "metadata": {}, "hash": "d5754f01e316b06668db1612f2f689c26af446e6a2482936869789e90e925d3b"}}, "hash": "84fc49ee8070b2fde61902c7c9e12aec417f46d9cc5413878bdae44c468f7a15", "text": "In addition there are {\\em\nLessons in Electric Circuits} by Tony R.  Kuphaldt, \n{\\em Getting down\nwith ...}, a set of tutorials on a range of computer science topics,\nwritten and edited by high school students, {\\em Python for Fun},\na set of case studies in Python by Chris Meyers, and {\\em The Linux\nCookbook} by Michael Stultz, with 300 pages of tips and techniques.\n\n\\item Finally if you go to Google and use the search \nstring ``python -snake -monty'' you will get about 750,000 hits.\n\n\\end{itemize}\n\n\\adjustpage{-1}\n\\pagebreak\n\nAnd here are some books that contain more material on the\nPython language:\n\n\\begin{itemize}\n\n\\item {\\em Core Python Programming} by Wesley Chun is a large book \nat about 750 pages.  The first part of the book covers the basic Python\nlanguage features.  The second part provides an easy-paced introduction\nto more advanced topics including many of those mentioned above.\n\n\\item {\\em Python Essential Reference} by David M. Beazley is a small\nbook, but it is packed with information both on the\nlanguage itself and the modules in the standard library.  It is also\nvery well indexed.\n\n\\item {\\em Python Pocket Reference} by Mark Lutz really does fit in \nyour pocket.  Although not as extensive as {\\em Python Essential\nReference} it is a handy reference for the most commonly used functions\nand modules.  Mark Lutz is also the author of {\\em Programming Python},\none of the earliest (and largest) books on Python and not aimed at the\nbeginning programmer.  His later book {\\em Learning Python} is smaller\nand more accessible.\n\n\\item {\\em Python Programming on Win32} by Mark Hammond and Andy \nRobinson is a ``must have'' for anyone seriously using Python to develop\nWindows applications.  Among other things it covers the integration of\nPython and COM, builds a small application with wxPython, and even\nuses Python to script windows applications such as Word and Excel.\n\n\\end{itemize}\n\n\\section{Recommended general computer science books}\n\nThe following suggestions for further reading include many of the\nauthors' favorite books.  They deal with good programming practices\nand computer science in general.\n\n\\begin{itemize}\n\n\\item {\\em The Practice of Programming} by Kernighan and Pike covers not \nonly the design and coding of algorithms and data structures, but also\ndebugging, testing and improving the performance of programs. The\nexamples are mostly C++ and Java, with none in Python.\n\n\\item {\\em The Elements of Java Style} edited by Al Vermeulen is another\nsmall book that discusses some of the finer points of good\nprogramming, such as good use of naming conventions, comments, and\neven whitespace and indentation (somewhat of a nonissue in\nPython).  The book also covers programming by contract, using\nassertions to catch errors by testing preconditions and\npostconditions, and proper programming with threads and their\nsynchronization.\n\n\\item {\\em Programming Pearls} by Jon Bentley is a classic book.\nIt consists of case studies that originally appeared in the author's\ncolumn in the {\\em Communications of the ACM}.  The studies deal with\ntradeoffs in programming and why it is often an especially bad idea to\nrun with your first idea for a program.  The book is a bit older than\nthose above (1986), so the examples are in older\nlanguages.  There are lots of problems to solve, some with solutions\nand others with hints.  This book was very popular and was followed by\na second volume.\n\n\\item {\\em The New Turing Omnibus} by A.K Dewdney provides a gentle\nintroduction to 66 topics of computer science ranging from parallel\ncomputing to computer viruses, from cat scans to genetic\nalgorithms.  All of the topics are short and entertaining.  An earlier\nbook by Dewdney {\\em The Armchair Universe} is a collection from his\ncolumn {\\em Computer Recreations} in {\\em Scientific American}.  Both\nbooks are a rich source of ideas for projects.\n\n\\item {\\em Turtles, Termites and Traffic Jams} by Mitchel Resnick\nis about the power of decentralization and how complex behavior can\narise from coordinated simple activity of a multitude of agents.  It\nintroduces the language StarLogo, which allows the user to write\nprograms for the agents.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3fa2421e-8b56-472f-bdf8-db7bd95d817d": {"__data__": {"id_": "3fa2421e-8b56-472f-bdf8-db7bd95d817d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f9cbb80-96f4-46f0-ba04-876c6740f788", "node_type": null, "metadata": {}, "hash": "13ddcd1cfae725738279879c65c8cc78d2cddb7e1bc4f5ac6d9cc212c04cf188"}, "2": {"node_id": "741aa787-463c-4189-b641-510278e53f0f", "node_type": null, "metadata": {}, "hash": "84fc49ee8070b2fde61902c7c9e12aec417f46d9cc5413878bdae44c468f7a15"}}, "hash": "d5754f01e316b06668db1612f2f689c26af446e6a2482936869789e90e925d3b", "text": "Running the program\ndemonstrates complex aggregate behavior, which is often\ncounterintuitive.  Many of the programs in the book were developed by\nstudents in middle school and high school.  Similar programs could be\nwritten in Python using simple graphics and threads.\n\n\\item {\\em G\\\"{o}del, Escher and Bach} by Douglas Hofstadter.  Put simply,\nif you found magic in recursion you will also find it in this\nbestselling book.  One of Hofstadter's themes involves ``strange loops''\nwhere patterns evolve and ascend until they meet themselves again.  It\nis Hofstadter's contention that such ``strange loops'' are an essential\npart of what separates the animate from the inanimate.  He\ndemonstrates such patterns in the music of Bach, the pictures of\nEscher and G\\\"{o}del's incompleteness theorem.\n\n\\end{itemize}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c0b89d2e-7a53-4066-9bbd-2101bebb4f1c": {"__data__": {"id_": "c0b89d2e-7a53-4066-9bbd-2101bebb4f1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "3": {"node_id": "b7059d13-4bf1-4044-b228-2d2a847e89a2", "node_type": null, "metadata": {}, "hash": "86a12bb25274512e7ebae2038e6260fd902522c730de1c906114aedff7b45ba6"}}, "hash": "9a438ff50f67593f88a984e2af8204abca40e2001458f1aa8ea5e4757251246a", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{The way of the program}\n\nThe goal of this book is to teach you to think like a\ncomputer scientist. This way of thinking combines some of the best features\nof mathematics, engineering, and natural science.  Like mathematicians,\ncomputer scientists use formal languages to denote ideas (specifically\ncomputations).  Like engineers, they design things, assembling components\ninto systems and evaluating tradeoffs among alternatives.  Like scientists,\nthey observe the behavior of complex systems, form hypotheses, and test\npredictions.\n\nThe single most important skill for a computer scientist is {\\bf\nproblem solving}.  Problem solving means the ability to formulate\nproblems, think creatively about solutions, and express a solution clearly\nand accurately.  As it turns out, the process of learning to program is an\nexcellent opportunity to practice problem-solving skills.  That's why\nthis chapter is called, ``The way of the program.''\n\nOn one level, you will be learning to program, a useful\nskill by itself.  On another level, you will use programming as a means to\nan end.  As we go along, that end will become clearer.\n\n\\section{The Python programming language}\n\\index{programming language}\n\\index{language!programming}\n\nThe programming language you will be learning is Python. Python is\nan example of a {\\bf high-level language}; other high-level languages\nyou might have heard of are C, C++, Perl, and Java.\n\nAs you might infer from the name ``high-level language,'' there are\nalso {\\bf low-level languages}, sometimes referred to as ``machine\nlanguages'' or ``assembly languages.''  Loosely speaking, computers\ncan only execute programs written in low-level languages.  Thus,\nprograms written in a high-level language have to be processed before\nthey can run.  This extra processing takes some time, which is a small\ndisadvantage of high-level languages.\n\n\\index{portable}\n\\index{high-level language}\n\\index{low-level language}\n\\index{language!high-level}\n\\index{language!low-level}\n\nBut the advantages are enormous.  First, it is much easier to program\nin a high-level language. Programs written in a high-level language\ntake less time to write, they are shorter and easier to read, and they\nare more likely to be correct.  Second, high-level languages are {\\bf\nportable}, meaning that they can run on different kinds of computers\nwith few or no modifications.  Low-level programs can run on only one\nkind of computer and have to be rewritten to run on another.\n\nDue to these advantages, almost all programs are written in high-level\nlanguages.  Low-level languages are used only for a few specialized\napplications.\n\n\\index{compile}\n\\index{interpret}\n\nTwo kinds of programs process high-level languages\ninto low-level languages: {\\bf interpreters} and {\\bf compilers}.\nAn interpreter reads a high-level program and executes it, meaning that it\ndoes what the program says.  It processes the program a little at a time,\nalternately reading lines and performing computations.\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/interpret.eps,height=0.77in}}\n\\afterfig\n\nA compiler reads the program and translates it completely before the\nprogram starts running.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b7059d13-4bf1-4044-b228-2d2a847e89a2": {"__data__": {"id_": "b7059d13-4bf1-4044-b228-2d2a847e89a2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "2": {"node_id": "c0b89d2e-7a53-4066-9bbd-2101bebb4f1c", "node_type": null, "metadata": {}, "hash": "9a438ff50f67593f88a984e2af8204abca40e2001458f1aa8ea5e4757251246a"}, "3": {"node_id": "44d86782-fbbf-4972-bfa0-f05631ace2d2", "node_type": null, "metadata": {}, "hash": "558da0a43cd04931223993d4a1a08966112ce0390dff9a3f6afa7f17796bdd8e"}}, "hash": "86a12bb25274512e7ebae2038e6260fd902522c730de1c906114aedff7b45ba6", "text": "In this case, the high-level program is\ncalled the {\\bf source code}, and the translated program is called the\n{\\bf object code} or the {\\bf executable}.  Once a program is\ncompiled, you can execute it repeatedly without further translation.\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/compile.eps,height=0.77in}}\n\\afterfig\n\nPython is considered an interpreted language because Python\nprograms are executed by an interpreter.  There are two ways to\nuse the interpreter: command-line mode and script mode. In\ncommand-line mode, you type Python programs and the interpreter\nprints the result:\n\n\\adjustpage{-2}\n\\pagebreak\n\\beforeverb\n\\begin{verbatim}\n$ python\nPython 2.4.1 (#1, Apr 29 2005, 00:28:56)\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print 1 + 1\n2\n\\end{verbatim}\n\\afterverb\n%\nThe first line of this example is the command that starts the\nPython interpreter.  The next two lines are messages from the\ninterpreter.  The third line starts with {\\tt >>>}, which is the\nprompt the interpreter uses to indicate that it is ready.  We typed\n{\\tt print 1 + 1}, and the interpreter replied {\\tt 2}.\n\nAlternatively, you can write a program in a file and use the\ninterpreter to execute the contents of the file.  Such a file is\ncalled a {\\bf script}.  For example, we used a text editor to\ncreate a file named {\\tt latoya.py} with the following contents:\n\n\n\\beforeverb\n\\begin{verbatim}\nprint 1 + 1\n\\end{verbatim}\n\\afterverb\n%\nBy convention, files that contain Python programs have names that\nend with {\\tt .py}.\n\nTo execute the program, we have to tell the interpreter the name of\nthe script:\n\n\n\\beforeverb\n\\begin{verbatim}\n$ python latoya.py\n2\n\\end{verbatim}\n\\afterverb\n%\nIn other development environments, the details of executing programs\nmay differ.  Also, most programs are more interesting than this one.\n\nMost of the examples in this book are executed on the command line.\nWorking on the command line is convenient for program development and\ntesting, because you can type programs and execute them\nimmediately.  Once you have a working program, you should store\nit in a script so you can execute or modify it in the future.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "44d86782-fbbf-4972-bfa0-f05631ace2d2": {"__data__": {"id_": "44d86782-fbbf-4972-bfa0-f05631ace2d2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "2": {"node_id": "b7059d13-4bf1-4044-b228-2d2a847e89a2", "node_type": null, "metadata": {}, "hash": "86a12bb25274512e7ebae2038e6260fd902522c730de1c906114aedff7b45ba6"}, "3": {"node_id": "c127a5a8-e5bd-4e52-98f2-f01c12db95b3", "node_type": null, "metadata": {}, "hash": "38a54077c96472bd457c79487b8d0c6defbacf9c06da7a18d3e613ca6388cab3"}}, "hash": "558da0a43cd04931223993d4a1a08966112ce0390dff9a3f6afa7f17796bdd8e", "text": "\\section{What is a program?}\n\nA {\\bf program} is a sequence of instructions that specifies how to\nperform a computation.  The computation might be something\nmathematical, such as solving a system of equations or finding the\nroots of a polynomial, but it can also be a symbolic computation, such\nas searching and replacing text in a document or (strangely enough)\ncompiling a program.\n\nThe details look different in\ndifferent languages, but a few basic instructions\nappear in just about every language:\n\n\\begin{description}\n\n\\item[input:] Get data from the keyboard, a file, or some\nother device.\n\n\\item[output:] Display data on the screen or send data to a\nfile or other device.\n\n\\item[math:] Perform basic mathematical operations like addition and\nmultiplication.\n\n\\item[conditional execution:] Check for certain conditions and\nexecute the appropriate sequence of statements.\n\n\\item[repetition:] Perform some action repeatedly, usually with\nsome variation.\n\n\\end{description}\n\nBelieve it or not, that's pretty much all there is to it.  Every\nprogram you've ever used, no matter how complicated, is made up of\ninstructions that look more or less like these.  Thus, we can\ndescribe programming as the process of breaking a large, complex task\ninto smaller and smaller subtasks until the subtasks are\nsimple enough to be performed with one of these basic instructions.\n\nThat may be a little vague, but we will come back to this topic later\nwhen we talk about {\\bf algorithms}.\n\n\\section{What is debugging?}\n\\index{debugging}\n\\index{bug}\n\nProgramming is a complex process, and because it is done by human beings,\nit often leads to errors.  For whimsical reasons, programming errors are\ncalled {\\bf bugs} and the process of tracking them down and correcting them\nis called {\\bf debugging}.\n\nThree kinds of errors can occur in a program: syntax errors, runtime \nerrors, and semantic errors. It is useful\nto distinguish between them in order to track them down more quickly.\n\n\\subsection{Syntax errors}\n\\index{syntax error}\n\\index{error!syntax}\n\nPython can only execute a program if the program is syntactically\ncorrect; otherwise, the process fails and returns an error message.\n{\\bf Syntax} refers to the structure of a program and the rules about\nthat structure. \\index{syntax} For example, in English, a sentence must\nbegin with a capital letter and end with a period.  this sentence contains\na {\\bf syntax error}.  So does this one\n\nFor most readers, a few syntax errors are not a significant problem,\nwhich is why we can read the poetry of e. e. cummings without spewing error\nmessages.  Python is not so forgiving.  If there is a single syntax error\nanywhere in your program, Python will print an error message and quit,\nand you will not be able to run your program. During the first few weeks\nof your programming career, you will probably spend a lot of time tracking\ndown syntax errors.  As you gain experience, though, you will make fewer\nerrors and find them faster.\n\n\\subsection{Runtime errors}\n\\label{runtime}\n\\index{runtime error}\n\\index{error!runtime}\n\\index{exception}\n\\index{safe language}\n\\index{language!safe}\n\nThe second type of error is a runtime error, so called because the\nerror does not appear until you run the program.  These errors are also\ncalled {\\bf exceptions} because they usually indicate that something\nexceptional (and bad) has happened.\n\nRuntime errors are rare in the simple programs you will see in the\nfirst few chapters, so it might be a while before you encounter one.\n\n\n\\subsection{Semantic errors}\n\\index{semantics}\n\\index{semantic error}\n\\index{error!semantic}\n\nThe third type of error is the {\\bf semantic error}.  If there is a\nsemantic error in your program, it will run successfully, in the sense\nthat the computer will not generate any error messages, but it will\nnot do the right thing.  It will do something else.  Specifically, it\nwill do what you told it to do.\n\nThe problem is that the program you wrote is not the program you\nwanted to write.  The meaning of the program (its semantics) is wrong.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c127a5a8-e5bd-4e52-98f2-f01c12db95b3": {"__data__": {"id_": "c127a5a8-e5bd-4e52-98f2-f01c12db95b3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "2": {"node_id": "44d86782-fbbf-4972-bfa0-f05631ace2d2", "node_type": null, "metadata": {}, "hash": "558da0a43cd04931223993d4a1a08966112ce0390dff9a3f6afa7f17796bdd8e"}, "3": {"node_id": "ea53cead-3e5e-49cf-9c71-78029f117c0a", "node_type": null, "metadata": {}, "hash": "0353c8c63ffd3cf2c8bca45b1511d60671a512e574466f9d5f8a7fd74c60b670"}}, "hash": "38a54077c96472bd457c79487b8d0c6defbacf9c06da7a18d3e613ca6388cab3", "text": "The meaning of the program (its semantics) is wrong.\nIdentifying semantic errors can be tricky because it requires you to work\nbackward by looking at the output of the program and trying to figure\nout what it is doing.\n\n\\subsection{Experimental debugging}\n\nOne of the most important skills you will acquire is\ndebugging.  Although it can be frustrating, debugging is one of the\nmost intellectually rich, challenging, and interesting parts of programming.\n\nIn some ways, debugging is like detective work.  You are confronted\nwith clues, and you have to infer the processes and events that led\nto the results you see.\n\nDebugging is also like an experimental science.  Once you have an idea\nwhat is going wrong, you modify your program and try again.  If your\nhypothesis was correct, then you can predict the result of the\nmodification, and you take a step closer to a working program.  If\nyour hypothesis was wrong, you have to come up with a new one.  As\nSherlock Holmes pointed out, ``When you have eliminated the\nimpossible, whatever remains, however improbable, must be the truth.''\n(A. Conan Doyle, {\\em The Sign of Four})\n\n\\index{Holmes, Sherlock}\n\\index{Doyle, Arthur Conan}\n\nFor some people, programming and debugging are the\nsame thing.  That is, programming is the process of gradually\ndebugging a program until it does what you want.  The idea\nis that you should start with a program that\ndoes {\\em something} and make small modifications, debugging\nthem as you go, so that you always have a working program.\n\nFor example, Linux is an operating system that contains thousands of\nlines of code, but it started out as a simple program Linus Torvalds\nused to explore the Intel 80386 chip.  According to Larry Greenfield,\n``One of Linus's earlier projects was a program that would switch\nbetween printing AAAA and BBBB.  This later evolved to Linux.''\n({\\em The Linux Users' Guide} Beta Version 1)\n\n\\index{Linux}\n\nLater chapters will make more suggestions about debugging and other\nprogramming practices.\n\n\\section{Formal and natural languages}\n\\index{formal language}\n\\index{natural language}\n\\index{language!formal}\n\\index{language!natural}\n\n{\\bf Natural languages} are the languages that people speak,\nsuch as English, Spanish, and French.  They were not designed\nby people (although people try to impose some order on them);\nthey evolved naturally.\n\n{\\bf Formal languages} are languages that are designed by people for\nspecific applications.  For example, the notation that mathematicians\nuse is a formal language that is particularly good at denoting\nrelationships among numbers and symbols.  Chemists use a formal\nlanguage to represent the chemical structure of molecules.  And\nmost importantly:\n\n\\begin{quote}\n{\\bf Programming languages are formal languages that have been\ndesigned to express computations.}\n\\end{quote}\n\nFormal languages tend to have strict rules about syntax.  For example,\n$3+3=6$ is a syntactically correct mathematical statement, but\n{\\tt 3=+6\\$} is not.  $H_2O$ is a syntactically correct chemical name,\nbut $_2Zz$ is not.\n\nSyntax rules come in two flavors, pertaining to {\\bf tokens} and structure.\nTokens are the basic elements of the language, such as words, numbers,\nand chemical elements.  One of the problems with {\\tt 3=+6\\$} is that\n{\\tt \\$} is not a legal token in mathematics (at least as far as we\nknow).  Similarly, $_2Zz$ is not legal because there is no element with\nthe abbreviation $Zz$.\n\nThe second type of syntax error pertains to the structure of a\nstatement---that is, the way the tokens are arranged.  The statement\n{\\tt 3=+6\\$} is structurally illegal because you can't place a plus\nsign immediately after an equal sign.  Similarly, molecular formulas\nhave to have subscripts after the element name, not before.\n\n\\begin{quote}\n{\\em As an exercise, create what appears to be a well-structured English\nsentence with unrecognizable tokens in it.  Then write another sentence\nwith all valid tokens but with invalid structure.}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ea53cead-3e5e-49cf-9c71-78029f117c0a": {"__data__": {"id_": "ea53cead-3e5e-49cf-9c71-78029f117c0a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "2": {"node_id": "c127a5a8-e5bd-4e52-98f2-f01c12db95b3", "node_type": null, "metadata": {}, "hash": "38a54077c96472bd457c79487b8d0c6defbacf9c06da7a18d3e613ca6388cab3"}, "3": {"node_id": "447c0f42-0e4f-435d-97c3-e88d6657386c", "node_type": null, "metadata": {}, "hash": "4324122ab1082f88fd54da91482af49bb2a4ad71d574ee2559d2e57b7ce3361e"}}, "hash": "0353c8c63ffd3cf2c8bca45b1511d60671a512e574466f9d5f8a7fd74c60b670", "text": "Then write another sentence\nwith all valid tokens but with invalid structure.}\n\\end{quote}\n\nWhen you read a sentence in English or a statement in a formal\nlanguage, you have to figure out what the structure of the sentence is\n(although in a natural language you do this subconsciously).  This\nprocess is called {\\bf parsing}.\n\n\\index{parse}\n\nFor example, when you hear the sentence, ``The other shoe fell,'' you\nunderstand that ``the other shoe'' is the subject and ``fell'' is the\npredicate.  Once you have parsed a sentence, you can figure out what it\nmeans, or the semantics of the sentence.  Assuming that you know\nwhat a shoe is and what it means to fall, you will understand the\ngeneral implication of this sentence.\n\nAlthough formal and natural languages have many features in\ncommon---tokens, structure, syntax, and semantics---there are many\ndifferences:\n\n\\index{ambiguity}\n\\index{redundancy}\n\\index{literalness}\n\n\\begin{description}\n\n\\item[ambiguity:] Natural languages are full of ambiguity, which\npeople deal with by using contextual clues and other information.\nFormal languages are designed to be nearly or completely unambiguous,\nwhich means that any statement has exactly one meaning,\nregardless of context.\n\n\\item[redundancy:] In order to make up for ambiguity and reduce\nmisunderstandings, natural languages employ lots of\nredundancy.  As a result, they are often verbose.  Formal languages\nare less redundant and more concise.\n\n\\item[literalness:] Natural languages are full of idiom and\nmetaphor.  If I say, ``The other shoe fell,'' there is probably\nno shoe and nothing falling.  Formal languages mean\nexactly what they say.\n\n\\end{description}\n\nPeople who grow up speaking a natural language---everyone---often have a\nhard time adjusting to formal languages.  In some ways, the difference\nbetween formal and natural language is like the difference between\npoetry and prose, but more so:\n\n\\index{poetry}\n\\index{prose}\n\n\\begin{description}\n\n\\item[Poetry:] Words are used for their sounds as well as for\ntheir meaning, and the whole poem together creates an effect or\nemotional response.  Ambiguity is not only common but often\ndeliberate.\n\n\\item[Prose:] The literal meaning of words is more important,\nand the structure contributes more meaning.  Prose is more amenable to\nanalysis than poetry but still often ambiguous.\n\n\\item[Programs:] The meaning of a computer program is unambiguous\nand literal, and can be understood entirely by analysis of the\ntokens and structure.\n\n\\end{description}\n\nHere are some suggestions for reading programs (and other formal\nlanguages).  First, remember that formal languages are much more dense\nthan natural languages, so it takes longer to read them.  Also, the\nstructure is very important, so it is usually not a good idea to read\nfrom top to bottom, left to right.  Instead, learn to parse the\nprogram in your head, identifying the tokens and interpreting the\nstructure.  Finally, the details matter.  Little things\nlike spelling errors and bad punctuation, which you can get away\nwith in natural languages, can make a big difference in a formal\nlanguage.\n\n\\section{The first program}\n\\label{hello}\n\\index{hello world}\n\nTraditionally, the first program written in a new language\nis called ``Hello, World!'' because all it does is display the\nwords, ``Hello, World!''  In Python, it looks like this:\n\n\n\\beforeverb\n\\begin{verbatim}\nprint \"Hello, World!\"\n\\end{verbatim}\n\\afterverb\n%\nThis is an example of a {\\bf print statement}, which doesn't\nactually print anything on paper.  It displays a value on the\nscreen.  In this case, the result is the words", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "447c0f42-0e4f-435d-97c3-e88d6657386c": {"__data__": {"id_": "447c0f42-0e4f-435d-97c3-e88d6657386c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5586efe2-3b14-4421-84e8-ebd27a3acbe8", "node_type": null, "metadata": {}, "hash": "8865d7f7ff7fd59b0d00160f2635b29927198a3bf50874045051106000bcecf3"}, "2": {"node_id": "ea53cead-3e5e-49cf-9c71-78029f117c0a", "node_type": null, "metadata": {}, "hash": "0353c8c63ffd3cf2c8bca45b1511d60671a512e574466f9d5f8a7fd74c60b670"}}, "hash": "4324122ab1082f88fd54da91482af49bb2a4ad71d574ee2559d2e57b7ce3361e", "text": "\\beforeverb\n\\begin{verbatim}\nHello, World!\n\\end{verbatim}\n\\afterverb\n%\nThe quotation marks in the program mark the beginning and end\nof the value; they don't appear in the result.\n\n\\index{print statement}\n\\index{statement!print}\n\nSome people judge the quality of a programming language by the\nsimplicity of the ``Hello, World!'' program.  By this standard, Python\ndoes about as well as possible.\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[problem solving:]  The process of formulating a problem, finding\na solution, and expressing the solution.\n\n\\item[high-level language:]  A programming language like Python that\nis designed to be easy for humans to read and write.\n\n\\item[low-level language:]  A programming language that is designed\nto be easy for a computer to execute; also called ``machine language'' or\n``assembly language.''\n\n\\item[portability:]  A property of a program that can run on more\nthan one kind of computer.\n\n\\item[interpret:]  To execute a program in a high-level language\nby translating it one line at a time.\n\n\\item[compile:]  To translate a program written in a high-level language\ninto a low-level language all at once, in preparation for later\nexecution.\n\n\\item[source code:]  A program in a high-level language before\nbeing compiled.\n\n\\item[object code:]  The output of the compiler after it translates\nthe program.\n\n\\item[executable:]  Another name for object code that is ready\nto be executed.\n\n\\item[script:] A program stored in a file (usually one that will be\ninterpreted).\n\n\\item[program:] A set of instructions that specifies a computation.\n\n\\item[algorithm:]  A general process for solving a category of\nproblems.\n\n\\item[bug:]  An error in a program.\n\n\\item[debugging:]  The process of finding and removing any of the\nthree kinds of programming errors.\n\n\\item[syntax:]  The structure of a program.\n\n\\item[syntax error:]  An error in a program that makes it impossible\nto parse (and therefore impossible to interpret).\n\n\\item[runtime error:]  An error that does not occur until the program\nhas started to execute but that prevents the program from continuing.\n\n\\item[exception:]  Another name for a runtime error.\n\n\\item[semantic error:]   An error in a program that makes it do something\nother than what the programmer intended.\n\n\\item[semantics:]  The meaning of a program.\n\n\\item[natural language:]  Any one of the languages that people speak that\nevolved naturally.\n\n\\item[formal language:]  Any one of the languages that people have designed\nfor specific purposes, such as representing mathematical ideas or\ncomputer programs; all programming languages are formal languages.\n\n\\item[token:]  One of the basic elements of the syntactic structure of\na program, analogous to a word in a natural language.\n\n\\item[parse:]  To examine a program and analyze the syntactic structure.\n\n\\item[print statement:]  An instruction that causes the Python\ninterpreter to display a value on the screen.\n\n\\index{program}\n\\index{problem-solving}\n\\index{high-level language}\n\\index{low-level language}\n\\index{portability}\n\\index{interpret}\n\\index{compile}\n\\index{source code}\n\\index{object code}\n\\index{executable}\n\\index{algorithm}\n\\index{bug}\n\\index{debugging}\n\\index{syntax}\n\\index{semantics}\n\\index{syntax error}\n\\index{runtime error}\n\\index{exception}\n\\index{semantic error}\n\\index{formal language}\n\\index{natural language}\n\\index{parse}\n\\index{token}\n\\index{script}\n\\index{print statement}\n\\index{statement!print}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "26da9a8c-b014-4fbf-b7f5-47bf05613a9e": {"__data__": {"id_": "26da9a8c-b014-4fbf-b7f5-47bf05613a9e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "3": {"node_id": "62c45f91-a5d5-4db9-997b-7f2538092433", "node_type": null, "metadata": {}, "hash": "52819b4fcfd4c6c00a8ae1f0693e15a36aab4c87ec6779d16282b7aad14ec498"}}, "hash": "35ea34d7270a2e749579877a41946d4135bda2b305fc8d8362034a947cfae1bd", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{Variables, expressions and statements}\n\n\\section{Values and types}\n\\index{value}\n\\index{type}\n\\index{string}\n\nA {\\bf value} is one of the fundamental things---like a letter or a\nnumber---that a program manipulates.  The values we have seen so far\nare {\\tt 2} (the result when we added {\\tt 1 + 1}), and\n{\\tt 'Hello, World!'}.\n\nThese values belong to different {\\bf types}:\n{\\tt 2} is an integer, and {\\tt 'Hello, World!'} is a {\\bf string},\nso-called because it contains a ``string'' of letters.\nYou (and the interpreter) can identify\nstrings because they are enclosed in quotation marks.\n\nThe print statement also works for integers.\n\n\\beforeverb\n\\begin{verbatim}\n>>> print 4\n4\n\\end{verbatim}\n\\afterverb\n%\nIf you are not sure what type a value has,\nthe interpreter can tell you.\n\n\\beforeverb\n\\begin{verbatim}\n>>> type('Hello, World!')\n<type 'str'>\n>>> type(17)\n<type 'int'>\n\\end{verbatim}\n\\afterverb\n%\nNot surprisingly, strings belong to the type {\\tt str} and\nintegers belong to the type {\\tt int}.  Less obviously, numbers\nwith a decimal point belong to a type called {\\tt float},\nbecause these numbers are represented in a\nformat called {\\bf floating-point}.\n\n\\index{type}\n\\index{string}\n\\index{type!str}\n\\index{int}\n\\index{type!int}\n\\index{float}\n\\index{type!float}\n\n\\beforeverb\n\\begin{verbatim}\n>>> type(3.2)\n<type 'float'>\n\\end{verbatim}\n\\afterverb\n%\nWhat about values like {\\tt '17'} and {\\tt '3.2'}?\nThey look like numbers, but they are in quotation marks like\nstrings.\n\n\\beforeverb\n\\begin{verbatim}\n>>> type('17')\n<type 'str'>\n>>> type('3.2')\n<type 'str'>\n\\end{verbatim}\n\\afterverb\n%\nThey're strings.\n\nWhen you type a large integer, you might be tempted to use commas\nbetween groups of three digits, as in {\\tt 1,000,000}.  This is not a\nlegal integer in Python, but it is a legal expression:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print 1,000,000\n1 0 0\n\\end{verbatim}\n\\afterverb\n%\nWell, that's not what we expected at all!  Python interprets {\\tt\n1,000,000} as a comma-separated list of three integers, which it\nprints consecutively.  This is the first example we have seen of a\nsemantic error: the code runs without producing an error message, but\nit doesn't do the ``right'' thing.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "62c45f91-a5d5-4db9-997b-7f2538092433": {"__data__": {"id_": "62c45f91-a5d5-4db9-997b-7f2538092433", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "26da9a8c-b014-4fbf-b7f5-47bf05613a9e", "node_type": null, "metadata": {}, "hash": "35ea34d7270a2e749579877a41946d4135bda2b305fc8d8362034a947cfae1bd"}, "3": {"node_id": "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e", "node_type": null, "metadata": {}, "hash": "dde9b17d31a19665e7d931375e831222ca1a71ac2140bb25160590a276a6fc90"}}, "hash": "52819b4fcfd4c6c00a8ae1f0693e15a36aab4c87ec6779d16282b7aad14ec498", "text": "\\section{Variables}\n\\index{variable}\n\\index{assignment}\n\\index{statement!assignment}\n\nOne of the most powerful features of a programming language is the\nability to manipulate {\\bf variables}.  A variable is a name that\nrefers to a value.\n\nThe {\\bf assignment statement} creates new variables and gives\nthem values:\n\n\\beforeverb\n\\begin{verbatim}\n>>> message = \"What's up, Doc?\"\n>>> n = 17\n>>> pi = 3.14159\n\\end{verbatim}\n\\afterverb\n%\nThis example makes three assignments.  The first assigns the string\n{\\tt \"What's up, Doc?\"} to a new variable named {\\tt message}.\nThe second gives the integer {\\tt 17} to {\\tt n}, and the third\ngives the floating-point number {\\tt 3.14159} to {\\tt pi}.\n\nNotice that the first statement uses double quotes to enclose the\nstring.  In general, single and double quotes do the same thing, but\nif the string contains a single quote (or an apostrophe, which is\nthe same character), you have to use double quotes to enclose it.\n\n\\index{state diagram}\n\nA common way to represent variables on paper is to write the name with\nan arrow pointing to the variable's value.  This kind of figure is\ncalled a {\\bf state diagram} because it shows what state each of the\nvariables is in (think of it as the variable's state of mind).\nThis diagram shows the result of the assignment statements:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/state2.eps}}\n\\afterfig\n\nThe print statement also works with variables.\n\n\\beforeverb\n\\begin{verbatim}\n>>> print message\nWhat's up, Doc?\n>>> print n\n17\n>>> print pi\n3.14159\n\\end{verbatim}\n\\afterverb\n%\nIn each case the result is the value of the variable.\nVariables also have types; again, we can ask the\ninterpreter what they are.\n\n\\beforeverb\n\\begin{verbatim}\n>>> type(message)\n<type 'str'>\n>>> type(n)\n<type 'int'>\n>>> type(pi)\n<type 'float'>\n\\end{verbatim}\n\\afterverb\n%\nThe type of a variable is the type of the value it\nrefers to.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e": {"__data__": {"id_": "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "62c45f91-a5d5-4db9-997b-7f2538092433", "node_type": null, "metadata": {}, "hash": "52819b4fcfd4c6c00a8ae1f0693e15a36aab4c87ec6779d16282b7aad14ec498"}, "3": {"node_id": "95c352af-8078-4534-aad1-1124f88c56dd", "node_type": null, "metadata": {}, "hash": "c9f1f1a0a174191f8d06a10f4968ef9c52da3ea8117b9a6060c4af34de37533b"}}, "hash": "dde9b17d31a19665e7d931375e831222ca1a71ac2140bb25160590a276a6fc90", "text": "\\section{Variable names and keywords}\n\\index{keyword}\n\nProgrammers generally choose names for their variables that\nare meaningful---they document what the variable is used for.\n\nVariable names can be arbitrarily long.  They can contain\nboth letters and numbers, but they have to begin with a letter.\nAlthough it is legal to use uppercase letters, by convention\nwe don't.  If you do, remember that case matters.  {\\tt Bruce}\nand {\\tt bruce} are different variables.\n\nThe underscore character ({\\tt \\_}) can appear in a name.\nIt is often used in names with multiple words, such as\n{\\tt my\\_name} or {\\tt price\\_of\\_tea\\_in\\_china}.\n\n\\index{underscore character}\n\nIf you give a variable an illegal name, you get a syntax error:\n\n\\adjustpage{-2}\n\\pagebreak\n\\beforeverb\n\\begin{verbatim}\n>>> 76trombones = 'big parade'\nSyntaxError: invalid syntax\n>>> more$ = 1000000\nSyntaxError: invalid syntax\n>>> class = 'Computer Science 101'\nSyntaxError: invalid syntax\n\\end{verbatim}\n\\afterverb\n%\n{\\tt 76trombones} is illegal because it does not begin with a letter.\n{\\tt more\\$} is illegal because it contains an illegal character, the dollar\nsign.  But what's wrong with {\\tt class}?\n\nIt turns out that {\\tt class} is one of the Python {\\bf keywords}.\nKeywords define the language's rules and structure, and they cannot be\nused as variable names.\n\n\\index{keyword}\n\nPython has twenty-nine keywords:\n\n\\beforeverb\n\\begin{verbatim}\nand       def       exec      if        not       return\nassert    del       finally   import    or        try\nbreak     elif      for       in        pass      while\nclass     else      from      is        print     yield\ncontinue  except    global    lambda    raise\n\\end{verbatim}\n\\afterverb\n%\nYou might want to keep this list handy.  If the interpreter complains\nabout one of your variable names and you don't know why, see if it\nis on this list.\n\n\n\\section{Statements}\n\nA statement is an instruction that the Python interpreter can\nexecute.  We have seen two kinds of statements: print\nand assignment.\n\nWhen you type a statement on the command line, Python\nexecutes it and displays the result, if there is one.  The\nresult of a print statement is a value.  Assignment statements\ndon't produce a result.\n\nA script usually contains a sequence of statements.  If there\nis more than one statement, the results appear one at a time\nas the statements execute.\n\nFor example, the script\n\n\\beforeverb\n\\begin{verbatim}\nprint 1\nx = 2\nprint x\n\\end{verbatim}\n\\afterverb\n%\nproduces the output\n\n\\beforeverb\n\\begin{verbatim}\n1\n2\n\\end{verbatim}\n\\afterverb\n%\nAgain, the assignment statement produces no output.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "95c352af-8078-4534-aad1-1124f88c56dd": {"__data__": {"id_": "95c352af-8078-4534-aad1-1124f88c56dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e", "node_type": null, "metadata": {}, "hash": "dde9b17d31a19665e7d931375e831222ca1a71ac2140bb25160590a276a6fc90"}, "3": {"node_id": "2cad634c-c9c9-4205-9361-baa79a34008c", "node_type": null, "metadata": {}, "hash": "cc555f57c1239ca33f570436cefcee835b32b76cbcb33ccf32099df9a15fe819"}}, "hash": "c9f1f1a0a174191f8d06a10f4968ef9c52da3ea8117b9a6060c4af34de37533b", "text": "\\section{Evaluating expressions}\n\nAn expression is a combination of values, variables, and operators.\nIf you type an expression on the command line, the interpreter\n{\\bf evaluates} it and displays the result:\n\n\\beforeverb\n\\begin{verbatim}\n>>> 1 + 1\n2\n\\end{verbatim}\n\\afterverb\n%\nAlthough expressions contain values, variables, and operators,\nnot every expression contains all of these elements.\nA value all by itself is considered an expression, and so is\na variable.\n\n\\beforeverb\n\\begin{verbatim}\n>>> 17\n17\n>>> x\n2\n\\end{verbatim}\n\\afterverb\n%\nConfusingly, evaluating an expression is not quite the same\nthing as printing a value.\n\n\\beforeverb\n\\begin{verbatim}\n>>> message = 'Hello, World!'\n>>> message\n'Hello, World!'\n>>> print message\nHello, World!\n\\end{verbatim}\n\\afterverb\n%\nWhen the Python interpreter displays the value of an expression, it\nuses the same format you would use to enter a value.  In the case of\nstrings, that means that it includes the quotation marks.  But if\nyou use a print statement, Python displays the contents of the string\nwithout the quotation marks.\n\nIn a script, an expression all by itself is a legal statement, but it\ndoesn't do anything.  The script\n\n\\beforeverb\n\\begin{verbatim}\n17\n3.2\n'Hello, World!'\n1 + 1\n\\end{verbatim}\n\\afterverb\n%\nproduces no output at all.  How would you change the script to\ndisplay the values of these four expressions?\n\n\n\\section{Operators and operands}\n\\index{operator}\n\\index{operand}\n\\index{expression}\n\n{\\bf Operators} are special symbols that represent computations\nlike addition and multiplication.  The values the operator uses are\ncalled {\\bf operands}.\n\nThe following are all legal Python expressions whose meaning is more or\nless clear:\n\\adjustpage{2}\n\\beforeverb\n\\begin{verbatim}\n20+32   hour-1   hour*60+minute   minute/60   5**2   (5+9)*(15-7)\n\\end{verbatim}\n\\afterverb\n%\nThe symbols {\\tt +}, {\\tt -}, and {\\tt /}, and the use of parenthesis for\ngrouping, mean in Python what they mean in mathematics.  The asterisk\n({\\tt *}) is the symbol for multiplication, and {\\tt **} is the symbol\nfor exponentiation.\n\nWhen a variable name appears in the place of an operand, it\nis replaced with its value before the operation is\nperformed.\n\nAddition, subtraction, multiplication, and exponentiation all do what\nyou expect, but you might be surprised by division.  The following\noperation has an unexpected result:\n\n\\beforeverb\n\\begin{verbatim}\n>>> minute = 59\n>>> minute/60\n0\n\\end{verbatim}\n\\afterverb\n%\nThe value of {\\tt minute} is 59, and in conventional arithmetic 59\ndivided by 60 is 0.98333, not 0.  The reason for the discrepancy is\nthat Python is performing {\\bf integer division}.\n\n\\index{integer division}\n\nWhen both of the operands are integers, the result must also be an integer,\nand by convention, integer division always rounds {\\em down}, even in cases\nlike this where the next integer is very close.\n\nA possible solution to this problem is to calculate a percentage\nrather than a fraction:\n\n\\beforeverb\n\\begin{verbatim}\n>>> minute*100/60\n98\n\\end{verbatim}\n\\afterverb\n%\nAgain the result is rounded down, but at least now the answer is\napproximately correct.  Another alternative is to use floating-point\ndivision, which we get to in Chapter~\\ref{floatchap}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2cad634c-c9c9-4205-9361-baa79a34008c": {"__data__": {"id_": "2cad634c-c9c9-4205-9361-baa79a34008c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "95c352af-8078-4534-aad1-1124f88c56dd", "node_type": null, "metadata": {}, "hash": "c9f1f1a0a174191f8d06a10f4968ef9c52da3ea8117b9a6060c4af34de37533b"}, "3": {"node_id": "74429688-a399-4fd6-87c6-98bf364281ed", "node_type": null, "metadata": {}, "hash": "5f434e21025926ae56c723241a99c30b6f946215da3264d75e75267f5eff837e"}}, "hash": "cc555f57c1239ca33f570436cefcee835b32b76cbcb33ccf32099df9a15fe819", "text": "\\section{Order of operations}\n\\index{order of operations}\n\\index{rules of precedence}\n\nWhen more than one operator appears in an expression, the order of\nevaluation depends on the {\\bf rules of precedence}.  Python follows\nthe same precedence rules for its mathematical operators that\nmathematics does.  The acronym {\\bf PEMDAS} is a useful way to\nremember the order of operations:\n\n\\begin{itemize}\n\n\\item {\\bf P}arentheses have the highest precedence and can be used \nto force an expression to evaluate in the order you want. Since\nexpressions in parentheses are evaluated first, {\\tt 2 * (3-1)} is 4,\nand {\\tt (1+1)**(5-2)} is 8. You can also use parentheses to make an\nexpression easier to read, as in {\\tt (minute * 100) / 60}, even\nthough it doesn't change the result.\n\n\\item {\\bf E}xponentiation has the next highest precedence, so\n{\\tt 2**1+1} is 3 and not 4, and {\\tt 3*1**3} is 3 and not 27.\n\n\\item {\\bf M}ultiplication and {\\bf D}ivision have the same precedence,\nwhich is higher than {\\bf A}ddition and {\\bf S}ubtraction, which also\nhave the same precedence.  So {\\tt 2*3-1} yields 5 rather than 4, and\n{\\tt 2/3-1} is {\\tt -1}, not {\\tt 1} (remember that in integer\ndivision, {\\tt 2/3=0}).\n\n\\item Operators with the same precedence are evaluated from left to \nright.  So in the expression {\\tt minute*100/60}, the multiplication\nhappens first, yielding {\\tt 5900/60}, which in turn yields {\\tt 98}.\nIf the operations had been evaluated from right to left, the result\nwould have been {\\tt 59*1}, which is {\\tt 59}, which is wrong.\n\n\\end{itemize}\n\n\n\\section{Operations on strings}\n\\index{string operation}\n\nIn general, you cannot perform mathematical operations on strings, even\nif the strings look like numbers.  The following are illegal (assuming\nthat {\\tt message} has type {\\tt string}):\n\n\\beforeverb\n\\begin{verbatim}\n message-1   'Hello'/123   message*'Hello'   '15'+2\n\\end{verbatim}\n\\afterverb\n%\nInterestingly, the {\\tt +} operator does work with strings, although it\ndoes not do exactly what you might expect.  For strings, the {\\tt +} operator\nrepresents {\\bf concatenation}, which means joining the two operands by\nlinking them end-to-end.  For example:\n\n\\index{concatenation}\n\n\\beforeverb\n\\begin{verbatim}\nfruit = 'banana'\nbakedGood = ' nut bread'\nprint fruit + bakedGood\n\\end{verbatim}\n\\afterverb\n%\nThe output of this program is {\\tt banana nut bread}.  The space\nbefore the word {\\tt nut} is part of the string, and is necessary\nto produce the space between the concatenated strings.\n\nThe {\\tt *} operator also works on strings; it performs repetition.\nFor example, {\\tt 'Fun'*3} is {\\tt 'FunFunFun'}.  One of the operands\nhas to be a string; the other has to be an integer.\n\nOn one hand, this interpretation of {\\tt +} and {\\tt *} makes sense by\nanalogy with addition and multiplication.  Just as {\\tt 4*3} is\nequivalent to {\\tt 4+4+4}, we expect {\\tt 'Fun'*3} to be the same as\n{\\tt 'Fun'+'Fun'+'Fun'}, and it is.  On the other hand, there is a\nsignificant way in which string concatenation and repetition are\ndifferent from integer addition and multiplication.\nCan you think of a property that addition and multiplication have\nthat string concatenation and repetition do not?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "74429688-a399-4fd6-87c6-98bf364281ed": {"__data__": {"id_": "74429688-a399-4fd6-87c6-98bf364281ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "2cad634c-c9c9-4205-9361-baa79a34008c", "node_type": null, "metadata": {}, "hash": "cc555f57c1239ca33f570436cefcee835b32b76cbcb33ccf32099df9a15fe819"}, "3": {"node_id": "5051091c-194f-49a1-8289-f686858300ec", "node_type": null, "metadata": {}, "hash": "785ae50a1841e82e384cdf5ff50bd2ac979b4beb5096840084d61bed2c617ed7"}}, "hash": "5f434e21025926ae56c723241a99c30b6f946215da3264d75e75267f5eff837e", "text": "\\section{Composition}\n\\index{composition}\n\nSo far, we have looked at the elements of a program---variables,\nexpressions, and statements---in isolation, without talking about how to\ncombine them.\n\nOne of the most useful features of programming languages is their\nability to take small building blocks and {\\bf compose} them.  For\nexample, we know how to add numbers and we know how to print; it turns\nout we can do both at the same time:\n\n\\beforeverb\n\\begin{verbatim}\n>>>  print 17 + 3\n20\n\\end{verbatim}\n\\afterverb\n%\nIn reality, the\naddition has to happen before the printing, so the actions aren't \nactually happening at the same time. The point is that any\nexpression involving numbers, strings, and variables can be used inside a\nprint statement.  You've already seen an example of this:\n\n\\beforeverb\n\\begin{verbatim}\nprint 'Number of minutes since midnight: ', hour*60+minute\n\\end{verbatim}\n\\afterverb\n%\nYou can also put arbitrary expressions on the right-hand side of an\nassignment statement:\n\n\\beforeverb\n\\begin{verbatim}\npercentage = (minute * 100) / 60\n\\end{verbatim}\n\\afterverb\n%\nThis ability may not seem impressive now, but you will see other examples\nwhere composition makes it possible to express complex computations neatly and\nconcisely.\n\nWarning: There are limits on where you can use certain expressions.  For\nexample, the left-hand side of an assignment statement has to be a\n{\\em variable} name, not an expression.  So, the following is illegal:\n{\\tt minute+1 = hour}.\n\n\n\\section{Comments}\n\\index{comment}\n\nAs programs get bigger and more complicated, they get more difficult to\nread.  Formal languages are dense, and it is often difficult to look\nat a piece of\ncode and figure out what it is doing, or why.\n\nFor this reason, it is a good idea to add notes to your programs to explain\nin natural language what the program is doing.  These notes are called\n{\\bf comments}, and they are marked with the {\\tt \\#} symbol:\n\n\\beforeverb\n\\begin{verbatim}\n# compute the percentage of the hour that has elapsed\npercentage = (minute * 100) / 60\n\\end{verbatim}\n\\afterverb\n%\nIn this case, the comment appears on a line by itself.  You can also put\ncomments at the end of a line:\n\n\\beforeverb\n\\begin{verbatim}\npercentage = (minute * 100) / 60     # caution: integer division\n\\end{verbatim}\n\\afterverb\n%\nEverything from the {\\tt \\#} to the end of the line is ignored---it\nhas no effect on the program.  The message is intended for the programmer or\nfor future programmers who might use this code.  In this case, it\nreminds the reader about the ever-surprising behavior of integer division.\n\n\\index{integer division}\n\nThis sort of comment is less necessary if you use the integer division\noperation, \\verb+//+.  It has the same effect as the division\noperator\\footnote{For now.  The behavior of the division operator may\nchange in future versions of Python.}, but it signals that the effect\nis deliberate.\n\n\\beforeverb\n\\begin{verbatim}\npercentage = (minute * 100) // 60 \n\\end{verbatim}\n\\afterverb\n%\nThe integer division operator is like a comment that says, ``I know\nthis is integer division, and I like it that way!''\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[value:]  A number or string (or other thing to be named later)\nthat can be stored in a variable or computed in an expression.\n\n\\item[type:]  A set of values.  The type of a value determines how\nit can be used in expressions.  So far, the types you have seen are integers\n(type {\\tt int}), floating-point numbers (type {\\tt float}),\nand strings (type {\\tt string}).\n\n\\item[floating-point:] A format for representing numbers with fractional\nparts.\n\n\\item[variable:]  A name that refers to a value.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5051091c-194f-49a1-8289-f686858300ec": {"__data__": {"id_": "5051091c-194f-49a1-8289-f686858300ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6798d972-db6f-4157-b244-43106ac2bb95", "node_type": null, "metadata": {}, "hash": "00ce622136b720ff22bae61454be83e79e07a7def80162ac87c02e6d4379cb2c"}, "2": {"node_id": "74429688-a399-4fd6-87c6-98bf364281ed", "node_type": null, "metadata": {}, "hash": "5f434e21025926ae56c723241a99c30b6f946215da3264d75e75267f5eff837e"}}, "hash": "785ae50a1841e82e384cdf5ff50bd2ac979b4beb5096840084d61bed2c617ed7", "text": "\\item[variable:]  A name that refers to a value.\n\n\\item[statement:]  A section of code that represents a command or action.  So\nfar, the statements you have seen are assignments and print statements.\n\n\\item[assignment:]  A statement that assigns a value to a variable.\n\n\\item[state diagram:]  A graphical representation of a set of variables and the\nvalues to which they refer.\n\n\\item[keyword:]  A reserved word that is used by the compiler to parse a\nprogram; you cannot use keywords like {\\tt if}, {\\tt  def}, and {\\tt while} as\nvariable names.\n\n\\item[operator:]  A special symbol that represents a simple computation like\naddition, multiplication, or string concatenation.\n\n\\item[operand:]  One of the values on which an operator operates.\n\n\\item[expression:]  A combination of variables, operators, and values that\nrepresents a single result value.\n\n\\item[evaluate:]  To simplify an expression by performing the operations\nin order to yield a single value.\n\n\\item[integer division:]  An operation that divides one integer by\nanother and yields an integer.  Integer division yields only the\nwhole number of times that the numerator is divisible by the\ndenominator and discards any remainder.\n\n\\item[rules of precedence:]  The set of rules governing the order in which\nexpressions involving multiple operators and operands are evaluated.\n\n\\item[concatenate:]  To join two operands end-to-end.\n\n\\item[composition:]  The ability to combine simple expressions and statements\ninto compound statements and expressions in order to represent complex\ncomputations concisely.\n\n\\item[comment:]  Information in a program that is meant for other\nprogrammers (or anyone reading the source code) and has no effect on the\nexecution of the program.\n\n\\index{value}\n\\index{floating-point}\n\\index{variable}\n\\index{type}\n\\index{keyword}\n\\index{statement}\n\\index{assignment}\n\\index{comment}\n\\index{state diagram}\n\\index{expression}\n\\index{operator}\n\\index{operand}\n\\index{integer division}\n\\index{rules of precedence}\n\\index{precedence}\n\\index{concatenation}\n\\index{composition}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4f932ede-8209-44e0-9202-0d644d756afc": {"__data__": {"id_": "4f932ede-8209-44e0-9202-0d644d756afc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "3": {"node_id": "5379d4a0-b2cd-45ea-b795-818ae80fb090", "node_type": null, "metadata": {}, "hash": "db3ab9f794c6bc32994357788ef9b09bd45c1845b4e3b1f2cea1d2d6a867fb96"}}, "hash": "0e84ddac98747c405e502006642d6d3e7470ef7dfbd2b4cd913b71149fa1ce02", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Functions}\n\\label{floatchap}\n\n\\section{Function calls}\n\\label{functionchap}\n\\index{function call}\n\\index{call!function}\n\nYou have already seen one example of a {\\bf function call}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> type(\"32\")\n<type 'str'>\n\\end{verbatim}\n\\afterverb\n%\nThe name of the function is {\\tt type}, and it displays the type of\na value or variable.  The value or variable, which is called the\n{\\bf argument} of the function, has to be enclosed in parentheses.\nIt is common to say that a function ``takes'' an argument and ``returns''\na result.  The result is called the {\\bf return value}.\n\n\\index{argument}\n\\index{return value}\n\nInstead of printing the return value, we could assign it to a variable:\n\n\\beforeverb\n\\begin{verbatim}\n>>> betty = type(\"32\")\n>>> print betty\n<type 'str'>\n\\end{verbatim}\n\\afterverb\n%\nAs another example, the {\\tt id} function takes a value or a variable and\nreturns an integer that acts as a unique identifier for the value:\n\n\\beforeverb\n\\begin{verbatim}\n>>> id(3)\n134882108\n>>> betty = 3\n>>> id(betty)\n134882108\n\\end{verbatim}\n\\afterverb\n%\nEvery value has an {\\tt id}, which is a unique number related to where\nit is stored in the memory of the computer.  The {\\tt id} of a\nvariable is the {\\tt id} of the value to which it refers.\n\n\n\n\\section{Type conversion}\n\\index{conversion!type}\n\\index{type conversion}\n\nPython provides a collection of built-in functions that convert values\nfrom one type to another.  The {\\tt int} function takes any value and\nconverts it to an integer, if possible, or complains otherwise:\n\n\\beforeverb\n\\begin{verbatim}\n>>> int(\"32\")\n32\n>>> int(\"Hello\")\nValueError: invalid literal for int(): Hello\n\\end{verbatim}\n\\afterverb\n%\n{\\tt int} can also convert floating-point values to integers, but\nremember that it truncates the fractional part:\n\n\\beforeverb\n\\begin{verbatim}\n>>> int(3.99999)\n3\n>>> int(-2.3)\n-2\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt float} function converts integers and strings to floating-point\nnumbers:\n\n\\beforeverb\n\\begin{verbatim}\n>>> float(32)\n32.0\n>>> float(\"3.14159\")\n3.14159\n\\end{verbatim}\n\\afterverb\n%\nFinally, the {\\tt str} function converts to\ntype {\\tt string}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> str(32)\n'32'\n>>> str(3.14149)\n'3.14149'\n\\end{verbatim}\n\\afterverb\n%\nIt may seem odd that Python distinguishes the integer value {\\tt 1}\nfrom the floating-point value {\\tt 1.0}.  They may represent the same\nnumber, but they belong to different types.  The reason is that they\nare represented differently inside the computer.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5379d4a0-b2cd-45ea-b795-818ae80fb090": {"__data__": {"id_": "5379d4a0-b2cd-45ea-b795-818ae80fb090", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "4f932ede-8209-44e0-9202-0d644d756afc", "node_type": null, "metadata": {}, "hash": "0e84ddac98747c405e502006642d6d3e7470ef7dfbd2b4cd913b71149fa1ce02"}, "3": {"node_id": "34ed9af4-83b2-4f32-b700-fc003541f5a6", "node_type": null, "metadata": {}, "hash": "b39d55b3e1e1c72a63dc1ac5c690425d5ccc64a50f51a30cbc999f46633ef5f9"}}, "hash": "db3ab9f794c6bc32994357788ef9b09bd45c1845b4e3b1f2cea1d2d6a867fb96", "text": "\\section{Type coercion}\n\\index{type coercion}\n\\index{coercion!type}\n\\index{integer division}\n\\index{division!integer}\n\nNow that we can convert between types, we have another way to deal\nwith integer division.  Returning to the example from the previous\nchapter, suppose we want to calculate the fraction of an hour that has\nelapsed.  The most obvious expression, {\\tt minute / 60}, does integer\narithmetic, so the result is always 0, even at 59 minutes\npast the hour.\n\nOne solution is to convert {\\tt minute} to floating-point\nand do floating-point division:\n\n\\beforeverb\n\\begin{verbatim}\n>>> minute = 59\n>>> float(minute) / 60\n0.983333333333\n\\end{verbatim}\n\\afterverb\n%\nAlternatively, we can take advantage of the rules for\nautomatic type conversion, which is called {\\bf type coercion}.\nFor the mathematical operators, if either operand is a {\\tt float},\nthe other is automatically converted to a {\\tt float}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> minute = 59\n>>> minute / 60.0\n0.983333333333\n\\end{verbatim}\n\\afterverb\n%\nBy making the denominator a {\\tt float}, we force Python to do\nfloating-point division.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "34ed9af4-83b2-4f32-b700-fc003541f5a6": {"__data__": {"id_": "34ed9af4-83b2-4f32-b700-fc003541f5a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "5379d4a0-b2cd-45ea-b795-818ae80fb090", "node_type": null, "metadata": {}, "hash": "db3ab9f794c6bc32994357788ef9b09bd45c1845b4e3b1f2cea1d2d6a867fb96"}, "3": {"node_id": "5f510fb4-a8c9-4360-a742-ec2f3b45bab6", "node_type": null, "metadata": {}, "hash": "c3ee9ecaa1533590c5ad83c14b30e730a8fd23632dc0a079b6ed80d05d431764"}}, "hash": "b39d55b3e1e1c72a63dc1ac5c690425d5ccc64a50f51a30cbc999f46633ef5f9", "text": "\\section{Math functions}\n\\index{math function}\n\\index{function!math}\n\nIn mathematics, you have probably seen functions like {\\tt sin} and\n{\\tt log}, and you have learned to evaluate expressions like {\\tt\nsin(pi/2)} and {\\tt log(1/x)}.  First, you evaluate the expression in\nparentheses (the argument).  For example, {\\tt pi/2} is approximately\n1.571, and {\\tt 1/x} is 0.1 (if {\\tt x} happens to be 10.0).\n\nThen, you evaluate the function itself, either by looking it up in a\ntable or by performing various computations.  The {\\tt sin} of 1.571\nis 1, and the {\\tt log} of 0.1 is -1 (assuming that {\\tt log}\nindicates the logarithm base 10).\n\nThis process can be applied repeatedly to evaluate more complicated\nexpressions like {\\tt log(1/sin(pi/2))}.  First, you evaluate the\nargument of the innermost function, then evaluate the function, and so\non.\n\nPython has a math module that provides most of the familiar\nmathematical functions.  A {\\bf module} is a file that contains a\ncollection of related functions grouped together.\n\n\\index{module}\n\nBefore we can use the functions from a module, we have to import them:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import math\n\\end{verbatim}\n\\afterverb\n%\nTo call one of the functions, we have to specify the name of the\nmodule and the name of the function, separated by a dot, also\nknown as a period.  This format is called {\\bf dot notation}.\n\n\\index{dot notation}\n\n\\beforeverb\n\\begin{verbatim}\n>>> decibel = math.log10 (17.0)\n>>> angle = 1.5\n>>> height = math.sin(angle)\n\\end{verbatim}\n\\afterverb\n%\nThe first statement sets {\\tt decibel} to the logarithm of 17, base\n{\\tt 10}.  There is also a function called {\\tt log} that takes logarithm\nbase {\\tt e}.\n\nThe third statement finds the sine of the value of the variable {\\tt\nangle}.  {\\tt sin} and the other trigonometric functions ({\\tt cos},\n{\\tt tan}, etc.)  take arguments in radians. To convert from degrees\nto radians, divide by 360 and multiply by {\\tt 2*pi}.  For example, to\nfind the sine of 45 degrees, first calculate the angle in radians and\nthen take the sine:\n\n\\beforeverb\n\\begin{verbatim}\n>>> degrees = 45\n>>> angle = degrees * 2 * math.pi / 360.0\n>>> math.sin(angle)\n0.707106781187\n\\end{verbatim}\n\\afterverb\n%\nThe constant {\\tt pi} is also part of the math module.  If you know\nyour geometry, you can check the previous result by comparing it to\nthe square root of two divided by two:\n\n\\beforeverb\n\\begin{verbatim}\n>>> math.sqrt(2) / 2.0\n0.707106781187\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{Composition}\n\\index{composition}\n\\index{function!composition}\n\nJust as with mathematical functions, Python functions can be composed,\nmeaning that you use one expression as part of another. For example, you can\nuse any expression as an argument to a function:\n\n\\beforeverb\n\\begin{verbatim}\n>>> x = math.cos(angle + math.pi/2)\n\\end{verbatim}\n\\afterverb\n%\nThis statement takes the value of {\\tt pi}, divides it by 2, and adds\nthe result to the value of {\\tt angle}.  The sum is then passed as an\nargument to the {\\tt cos} function.\n\nYou can also take the result of one function and pass it as an argument to\nanother:\n\n\\beforeverb\n\\begin{verbatim}\n>>> x = math.exp(math.log(10.0))\n\\end{verbatim}\n\\afterverb\n%\nThis statement finds the log base {\\tt e} of 10 and then raises {\\tt e} to\nthat power. The result gets assigned to {\\tt x}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5f510fb4-a8c9-4360-a742-ec2f3b45bab6": {"__data__": {"id_": "5f510fb4-a8c9-4360-a742-ec2f3b45bab6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "34ed9af4-83b2-4f32-b700-fc003541f5a6", "node_type": null, "metadata": {}, "hash": "b39d55b3e1e1c72a63dc1ac5c690425d5ccc64a50f51a30cbc999f46633ef5f9"}, "3": {"node_id": "d5bc4479-681b-42f3-914e-09acf2d7ed74", "node_type": null, "metadata": {}, "hash": "e2ef8a897f8ff911a14e783cfe44e22ce0b141fa07618b0c8efe0c48e5350a6d"}}, "hash": "c3ee9ecaa1533590c5ad83c14b30e730a8fd23632dc0a079b6ed80d05d431764", "text": "\\section{Adding new functions}\n\nSo far, we have only been using the functions that come with Python,\nbut it is also possible to add new functions.  Creating new functions\nto solve your particular problems is one of the most useful things\nabout a general-purpose programming language.\n\nIn the context of programming, a {\\bf function} is a named sequence of\nstatements that performs a desired operation.  This operation is specified\nin a {\\bf function definition}.  The functions we have been using so far have\nbeen defined for us, and these definitions have been hidden.  This is a good\nthing, because it allows us to use the functions without worrying about the\ndetails of their definitions.\n\n\\index{function}\n\\index{function definition}\n\\index{definition!function}\n\nThe syntax for a function definition is:\n\n\\beforeverb\n\\begin{verbatim}\ndef NAME( LIST OF PARAMETERS ):\n  STATEMENTS\n\\end{verbatim}\n\\afterverb\n%\nYou can make up any names you want for the functions you create, except that\nyou can't use a name that is a Python keyword.  The list of parameters\nspecifies what information, if any, you have to provide in order to\nuse the new function.\n\nThere can be any number of statements inside the function, but they\nhave to be indented from the left margin.  In the examples in this\nbook, we will use an indentation of two spaces.\n\nThe first couple of functions we are going to write have no parameters,\nso the syntax looks like this:\n\n\\beforeverb\n\\begin{verbatim}\ndef newLine():\n  print\n\\end{verbatim}\n\\afterverb\n%\nThis function is named {\\tt newLine}.  The empty parentheses indicate\nthat it has no parameters.  It contains only a single statement, which\noutputs a newline character. (That's what happens when you use a {\\tt print}\ncommand without any arguments.)\n\nThe syntax for calling the new function is the same as the syntax\nfor built-in functions:\n\n\\beforeverb\n\\begin{verbatim}\nprint \"First Line.\"\nnewLine()\nprint \"Second Line.\"\n\\end{verbatim}\n\\afterverb\n%\nThe output of this program is:\n\n\\beforeverb\n\\begin{verbatim}\nFirst line.\n\nSecond line.\n\\end{verbatim}\n\\afterverb\n%\nNotice the extra space between the two lines.  What if we wanted\nmore space between the lines?  We could call the same function\nrepeatedly:\n\n\\beforeverb\n\\begin{verbatim}\nprint \"First Line.\"\nnewLine()\nnewLine()\nnewLine()\nprint \"Second Line.\"\n\\end{verbatim}\n\\afterverb\n%\nOr we could write a new function named {\\tt threeLines} that prints\nthree new lines:\n\n\\beforeverb\n\\begin{verbatim}\ndef threeLines():\n  newLine()\n  newLine()\n  newLine()\n\nprint \"First Line.\"\nthreeLines()\nprint \"Second Line.\"\n\\end{verbatim}\n\\afterverb\n%\nThis function contains three statements, all of which are indented by two\nspaces.  Since the next statement is not indented, Python knows that it is\nnot part of the function.\n\nYou should notice a few things about this program:\n\n\\begin{enumerate}\n\n\\item You can call the same procedure repeatedly.  In fact, it is quite common\nand useful to do so.\n\n\\item You can have one function call another function; in this case\n{\\tt threeLines} calls {\\tt newLine}.\n\n\\end{enumerate}\n\nSo far, it may not be clear why it is worth the trouble to create all of these\nnew functions.  Actually, there are a lot of reasons, but this example\ndemonstrates two:\n\n\\begin{itemize}\n\n\\item Creating a new function gives you an opportunity to name a\ngroup of statements.  Functions can simplify a program by hiding a complex\ncomputation behind a single command and by using English words in place of\narcane code.\n\n\\item Creating a new function can make a program smaller by eliminating\nrepetitive code.  For example, a short way to print nine consecutive new\nlines is to call {\\tt threeLines} three times.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d5bc4479-681b-42f3-914e-09acf2d7ed74": {"__data__": {"id_": "d5bc4479-681b-42f3-914e-09acf2d7ed74", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "5f510fb4-a8c9-4360-a742-ec2f3b45bab6", "node_type": null, "metadata": {}, "hash": "c3ee9ecaa1533590c5ad83c14b30e730a8fd23632dc0a079b6ed80d05d431764"}, "3": {"node_id": "3a459cfa-8984-45f1-a5d4-819cc5044aa9", "node_type": null, "metadata": {}, "hash": "fc59565496f8526cd269311cfc7d970dd966982686e0fef17d9086159b1bcd1e"}}, "hash": "e2ef8a897f8ff911a14e783cfe44e22ce0b141fa07618b0c8efe0c48e5350a6d", "text": "\\end{itemize}\n\n\\begin{quote}\n{\\em As an exercise, write a function called {\\tt nineLines} that uses\n{\\tt threeLines} to print nine blank lines. How would you print \ntwenty-seven new lines?}\n\\end{quote}\n\n\n\\section{Definitions and use}\n\nPulling together the code fragments from Section 3.6, the\nwhole program looks like this:\n\n\\beforeverb\n\\begin{verbatim}\ndef newLine():\n  print\n\ndef threeLines():\n  newLine()\n  newLine()\n  newLine()\n\nprint \"First Line.\"\nthreeLines()\nprint \"Second Line.\"\n\\end{verbatim}\n\\afterverb\n%\nThis program contains two function definitions: {\\tt newLine} and\n{\\tt threeLines}.  Function definitions get executed just like other\nstatements, but the effect is to create the new function.  The statements\ninside the function do not get executed until the function is called, and\nthe function definition generates no output.\n\nAs you might expect, you have to create a function before you can\nexecute it.  In other words, the function definition has to be\nexecuted before the first time it is called.\n\n\\begin{quote}\n{\\em As an exercise, move the last three lines of this program\nto the top, so the function calls appear before the definitions. Run \nthe program and see what error\nmessage you get.}\n\\end{quote}\n\n\\begin{quote}\n{\\em As another exercise, start with the working version of the program\nand move the definition of {\\tt newLine} after the definition of\n{\\tt threeLines}.  What happens when you run this program?}\n\\end{quote}\n\n\\section{Flow of execution}\n\\index{flow of execution}\n\nIn order to ensure that a function is defined before its first use,\nyou have to know the order in which statements are executed, which is\ncalled the {\\bf flow of execution}.\n\nExecution always begins at the first statement of the program.  Statements are\nexecuted one at a time, in order from top to bottom.\n\nFunction definitions do not alter the flow of execution of the program, but\nremember that statements inside the function are not executed until the\nfunction is called.  Although it is not common, you can define one function\ninside another.  In this case, the inner definition isn't executed until the\nouter function is called.\n\nFunction calls are like a detour in the flow of execution. Instead of going to\nthe next statement, the flow jumps to the first line of the called function,\nexecutes all the statements there, and then comes back to pick up where it left\noff.\n\nThat sounds simple enough, until you remember that one function can call\nanother.  While in the middle of one function, the program might have to\nexecute the statements in another function. But while executing that\nnew function, the program might have to execute yet another function!\n\nFortunately, Python is adept at keeping track of where it is, so each time a\nfunction completes, the program picks up where it left off in the function that\ncalled it.  When it gets to the end of the program, it terminates.\n\nWhat's the moral of this sordid tale?  When you read a program, don't read from\ntop to bottom.  Instead, follow the flow of execution.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3a459cfa-8984-45f1-a5d4-819cc5044aa9": {"__data__": {"id_": "3a459cfa-8984-45f1-a5d4-819cc5044aa9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "d5bc4479-681b-42f3-914e-09acf2d7ed74", "node_type": null, "metadata": {}, "hash": "e2ef8a897f8ff911a14e783cfe44e22ce0b141fa07618b0c8efe0c48e5350a6d"}, "3": {"node_id": "660b852a-0985-4490-aad3-e7b3ccfb829c", "node_type": null, "metadata": {}, "hash": "ed839f334ebae923b5e66572139359ae41f05eafeb6973bd5e5e6a5eb7104d75"}}, "hash": "fc59565496f8526cd269311cfc7d970dd966982686e0fef17d9086159b1bcd1e", "text": "\\section{Parameters and arguments}\n\\label{parameters}\n\\index{parameter}\n\\index{function!parameter}\n\\index{argument}\n\\index{function!argument}\n\nSome of the built-in functions you have used require arguments, the\nvalues that control how the function does its job.  For example, if\nyou want to find the sine of a number, you have to indicate what the\nnumber is.  Thus, {\\tt sin} takes a numeric value as an argument.\n\nSome functions take more than one argument. For example, {\\tt pow}\ntakes two arguments, the base and the exponent.  Inside the function,\nthe values that are passed get assigned to variables called {\\bf parameters}.\n\nHere is an example of a user-defined function that has a parameter:\n\n\\beforeverb\n\\begin{verbatim}\ndef printTwice(bruce):\n  print bruce, bruce\n\\end{verbatim}\n\\afterverb\n%\nThis function takes a single argument and assigns it to a parameter\nnamed {\\tt bruce}.  The value of the parameter (at this point we\nhave no idea what it will be) is printed twice, followed by a newline.\nThe name {\\tt bruce} was chosen to suggest that the name you give a\nparameter is up to you, but in general, you want to choose something\nmore illustrative than {\\tt bruce}.\n\nThe function {\\tt printTwice} works for any type that can be printed:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printTwice('Spam')\nSpam Spam\n>>> printTwice(5)\n5 5\n>>> printTwice(3.14159)\n3.14159 3.14159\n\\end{verbatim}\n\\afterverb\n%\nIn the first function call, the argument is a string. In the second,\nit's an integer. In the third, it's a {\\tt float}.\n\nThe same rules of composition that apply to built-in functions also\napply to user-defined functions, so we can use any kind of expression\nas an argument for {\\tt printTwice}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printTwice('Spam'*4)\nSpamSpamSpamSpam SpamSpamSpamSpam\n>>> printTwice(math.cos(math.pi))\n-1.0 -1.0\n\\end{verbatim}\n\\afterverb\n%\nAs usual, the expression is evaluated before the function is run, so\n{\\tt printTwice} prints {\\tt SpamSpamSpamSpam SpamSpamSpamSpam} instead of\n{\\tt 'Spam'*4 'Spam'*4}.\n\n\\begin{quote}\n{\\em As an exercise, write a call to {\\tt printTwice} that does print\n{\\tt 'Spam'*4 'Spam'*4}.  Hint: strings can be enclosed in either single or \ndouble quotes, and the type of quote not used to enclose the string can be used\ninside it as part of the string.}\n\\end{quote}\n\nWe can also use a variable as an argument:\n\n\\beforeverb\n\\begin{verbatim}\n>>> michael = 'Eric, the half a bee.'\n>>> printTwice(michael)\nEric, the half a bee. Eric, the half a bee.\n\\end{verbatim}\n\\afterverb\n%\nNotice something very important here. The name of the variable we pass\nas an argument ({\\tt michael}) has nothing to do with the name of the\nparameter ({\\tt bruce}).  It doesn't matter what the value was\ncalled back home (in the caller); here in {\\tt printTwice}, we call\neverybody {\\tt bruce}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "660b852a-0985-4490-aad3-e7b3ccfb829c": {"__data__": {"id_": "660b852a-0985-4490-aad3-e7b3ccfb829c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "3a459cfa-8984-45f1-a5d4-819cc5044aa9", "node_type": null, "metadata": {}, "hash": "fc59565496f8526cd269311cfc7d970dd966982686e0fef17d9086159b1bcd1e"}, "3": {"node_id": "464a4c61-76db-4671-84b1-48da946f5f78", "node_type": null, "metadata": {}, "hash": "0e6e8529bb52b92222ed5065f984191aa6a9cffccdf0b7318ce8fb5f8e43a780"}}, "hash": "ed839f334ebae923b5e66572139359ae41f05eafeb6973bd5e5e6a5eb7104d75", "text": "\\section{Variables and parameters are local}\n\\index{local variable}\n\\index{variable!local}\n\nWhen you create a {\\bf local variable} inside a function, it only exists inside\nthe function, and you cannot use it outside.  For example:\n\n\\beforeverb\n\\begin{verbatim}\ndef catTwice(part1, part2):\n  cat = part1 + part2\n  printTwice(cat)\n\\end{verbatim}\n\\afterverb\n%\nThis function takes two arguments, concatenates them, and then prints\nthe result twice.\nWe can call the function with two strings:\n\n\\beforeverb\n\\begin{verbatim}\n>>> chant1 = \"Pie Jesu domine, \"\n>>> chant2 = \"Dona eis requiem.\"\n>>> catTwice(chant1, chant2)\nPie Jesu domine, Dona eis requiem. Pie Jesu domine, Dona eis requiem.\n\\end{verbatim}\n\\afterverb\n%\nWhen {\\tt catTwice} terminates, the variable {\\tt cat} is destroyed.\nIf we try to print it, we get an error:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print cat\nNameError: cat\n\\end{verbatim}\n\\afterverb\n%\nParameters are also local.\nFor example, outside the function {\\tt printTwice}, there is no\nsuch thing as {\\tt bruce}.  If you try to use it, Python will\ncomplain.\n\n\n\\section{Stack diagrams}\n\\label{stackdiagram}\n\\index{stack diagram}\n\\index{function frame}\n\\index{frame}\n\nTo keep track of which variables can be used where, it is sometimes\nuseful to draw a {\\bf stack diagram}.  Like state diagrams, stack\ndiagrams show the value of each variable, but they also show the\nfunction to which each variable belongs.\n\nEach function is represented by a {\\bf frame}.  A frame is a box\nwith the name of a function\nbeside it and the parameters and variables of the function inside it.\nThe stack diagram for the\nprevious example looks like this:\n\n\\adjustpage{-4}\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/stack.eps}}\n\\afterfig\n\nThe order of the stack shows the flow of execution.  {\\tt printTwice}\nwas called by {\\tt catTwice}, and {\\tt catTwice} was called by {\\tt\n\\_\\_main\\_\\_}, which is a special name for the topmost function.  When\nyou create a variable outside of any function, it belongs to {\\tt\n\\_\\_main\\_\\_}.\n\nEach parameter refers to the same value as its corresponding\nargument.  So, {\\tt part1} has the same value as\n{\\tt chant1}, {\\tt part2} has the same value as {\\tt chant2},\nand {\\tt bruce} has the same value as {\\tt cat}.\n\nIf an error occurs during a function call, Python prints the\nname of the function, and the name of the function that called\nit, and the name of the function that called {\\em that}, all the\nway back to {\\tt \\_\\_main\\_\\_}.\n\nFor example, if we try to access {\\tt cat} from within {\\tt\nprintTwice}, we get a {\\tt NameError}:\n\n\\beforeverb\n\\begin{verbatim}\nTraceback (innermost last):\n  File \"test.py\", line 13, in __main__\n    catTwice(chant1, chant2)\n  File \"test.py\", line 5, in catTwice\n    printTwice(cat)\n  File \"test.py\", line 9, in printTwice\n    print cat\nNameError: cat\n\\end{verbatim}\n\\afterverb\n%\nThis list of functions is called a {\\bf traceback}.  It tells you what\nprogram file the error occurred in, and what line, and what functions\nwere executing at the time.  It also shows the line of code that\ncaused the error.\n\n\\index{traceback}\n\nNotice the similarity between the traceback and the\nstack diagram.  It's not a coincidence.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "464a4c61-76db-4671-84b1-48da946f5f78": {"__data__": {"id_": "464a4c61-76db-4671-84b1-48da946f5f78", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbfcaa25-9f49-4920-a7a3-aa56fe190ede", "node_type": null, "metadata": {}, "hash": "8f5deb0fe18b288f313f962a4fc9228caf56ba428268b8c17d3e2694310cbb4b"}, "2": {"node_id": "660b852a-0985-4490-aad3-e7b3ccfb829c", "node_type": null, "metadata": {}, "hash": "ed839f334ebae923b5e66572139359ae41f05eafeb6973bd5e5e6a5eb7104d75"}}, "hash": "0e6e8529bb52b92222ed5065f984191aa6a9cffccdf0b7318ce8fb5f8e43a780", "text": "\\section{Functions with results}\n\nYou might have noticed by now that some of the functions we are using,\nsuch as the math functions, yield results.  Other functions, like\n{\\tt newLine}, perform an action but don't return a value.  That raises\nsome questions:\n\n\\begin{enumerate}\n\n\\item What happens if you call a function and you don't do anything\nwith the result (i.e., you don't assign it to a variable or use it as\npart of a larger expression)?\n\n\\item What happens if you use a function without a result as part of\nan expression, such as {\\tt newLine() + 7}?\n\n\\item Can you write functions that yield results, or are you stuck with\nsimple function like {\\tt newLine} and {\\tt printTwice}?\n\n\\end{enumerate}\n\nThe answer to the last question is that you can write functions that\nyield results, and we'll do it in Chapter 5.\n\n\\begin{quote}\n{\\em As an exercise, answer the other two questions by trying them\nout.  When you have a question about what is legal or illegal in\nPython, a good way to find out is to ask the interpreter.}\n\\end{quote}\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[function call:]  A statement that executes a function. It consists of\nthe name of the function followed by a list of arguments enclosed in\nparentheses.\n\n\\item[argument:]  A value provided to a function when the function is called.\nThis value is assigned to the corresponding parameter in the function.\n\n\\item[return value:]  The result of a function.  If a function call\nis used as an expression, the return value is the value of\nthe expression.\n\n\\item[type conversion:] An explicit statement that takes a value\nof one type and computes a corresponding value of another type.\n\n\\item[type coercion:]  A type conversion that happens automatically\naccording to Python's coercion rules.\n\n\\item[module:]  A file that contains a collection of related functions and\nclasses.\n\n\\item[dot notation:]  The syntax for calling a function in another\nmodule, specifying the module name followed by a dot (period) and\nthe function name.\n\n\\item[function:]  A named sequence of statements that performs some useful\noperation.  Functions may or may not take arguments and may or may not\nproduce a result.\n\n\\item[function definition:]  A statement that creates a new function,\nspecifying its name, parameters, and the statements it executes.\n\n\\item[flow of execution:]  The order in which statements are executed during\na program run.\n\n\\item[parameter:]  A name used inside a function to refer to the value passed\nas an argument.\n\n\\item[local variable:]  A variable defined inside a function.  A local\nvariable can only be used inside its function.\n\n\\item[stack diagram:]  A graphical representation of a stack of functions,\ntheir variables, and the values to which they refer.\n\n\\item[frame:]  A box in a stack diagram that represents a function call.\nIt contains the local variables and parameters of the function.\n\n\\item[traceback:]  A list of the functions that are executing,\nprinted when a runtime error occurs.\n\n\\index{function call}\n\\index{return value}\n\\index{argument}\n\\index{coercion}\n\\index{module}\n\\index{dot notation}\n\\index{function}\n\\index{function definition}\n\\index{flow of execution}\n\\index{parameter}\n\\index{local variable}\n\\index{stack diagram}\n\\index{function frame}\n\\index{frame}\n\\index{traceback}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5948f425-654c-4cee-98e0-b64a0fb4bbe5": {"__data__": {"id_": "5948f425-654c-4cee-98e0-b64a0fb4bbe5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "3": {"node_id": "3f9412e4-a749-4bff-8739-4606b31ea8f1", "node_type": null, "metadata": {}, "hash": "b75825908cb534ddf54717ef19fffceaa87b581b68363c796e5e39ca22a7ad9b"}}, "hash": "c0747f39cb321155994aa1a7f0dceeb7d36f62c3e05bb8ba40f4a13d51f3b935", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{Conditionals and recursion}\n\n\\section{The modulus operator}\n\\index{modulus operator}\n\\index{operator!modulus}\n\nThe {\\bf modulus operator} works on integers (and integer expressions)\nand yields the remainder when the first operand is divided by the\nsecond.  In Python, the modulus operator is a percent sign ({\\tt\n\\%}).  The syntax is the same as for other operators:\n\n\\beforeverb\n\\begin{verbatim}\n>>> quotient = 7 / 3\n>>> print quotient\n2\n>>> remainder = 7 % 3\n>>> print remainder\n1\n\\end{verbatim}\n\\afterverb\n%\nSo 7 divided by 3 is 2 with 1 left over.\n\nThe modulus operator turns out to be surprisingly useful.  For\nexample, you can check whether one number is divisible by another---if\n{\\tt x \\% y} is zero, then {\\tt x} is divisible by {\\tt y}.\n\nAlso, you can extract the right-most digit\nor digits from a number.  For example, {\\tt x \\% 10} yields the\nright-most digit of {\\tt x} (in base 10).  Similarly {\\tt x \\% 100}\nyields the last two digits.\n\n\\adjustpage{1}\n\n\\section{Boolean expressions}\n\\index{boolean expression}\n\\index{expression!boolean}\n\\index{logical operator}\n\\index{operator!logical}\n\nA {\\bf boolean expression} is an expression that is either true\nor false.  One way to write a boolean expression is to use the\noperator {\\tt ==}, which compares two values and produces a boolean\nvalue:\n\n\\beforeverb\n\\begin{verbatim}\n>>> 5 == 5\nTrue\n>>> 5 == 6\nFalse\n\\end{verbatim}\n\\afterverb\n%\nIn the first statement, the two operands are equal, so the value of\nthe expression is {\\tt True}; in the second statement, 5 is not equal\nto 6, so we get {\\tt False}.  {\\tt True} and {\\tt False} are special\nvalues that are built into Python.\n\nThe {\\tt ==} operator is one of the {\\bf comparison operators}; the\nothers are:\n\n\\beforeverb\n\\begin{verbatim}\n      x != y               # x is not equal to y\n      x > y                # x is greater than y\n      x < y                # x is less than y\n      x >= y               # x is greater than or equal to y\n      x <= y               # x is less than or equal to y\n\\end{verbatim}\n\\afterverb\n%\nAlthough these operations are probably familiar to you, the Python\nsymbols are different from the mathematical symbols.  A common error\nis to use a single equal sign ({\\tt =}) instead of a double equal sign\n({\\tt ==}).  Remember that {\\tt =} is an assignment operator and\n{\\tt ==} is a comparison operator.   Also, there is no such thing as\n{\\tt =<} or {\\tt =>}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3f9412e4-a749-4bff-8739-4606b31ea8f1": {"__data__": {"id_": "3f9412e4-a749-4bff-8739-4606b31ea8f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "5948f425-654c-4cee-98e0-b64a0fb4bbe5", "node_type": null, "metadata": {}, "hash": "c0747f39cb321155994aa1a7f0dceeb7d36f62c3e05bb8ba40f4a13d51f3b935"}, "3": {"node_id": "be0a3801-aaf8-41f3-9996-6218b1366d18", "node_type": null, "metadata": {}, "hash": "e0bc4a8fc5709dddb9cd2778b9ee7aba1d015e8097c5ad3d89bb88d531cdaa13"}}, "hash": "b75825908cb534ddf54717ef19fffceaa87b581b68363c796e5e39ca22a7ad9b", "text": "\\section {Logical operators}\n\\index{logical operator}\n\\index{operator!logical}\n\nThere are three {\\bf logical operators}: {\\tt and}, {\\tt\nor}, and {\\tt not}.  The semantics (meaning) of these operators is\nsimilar to their meaning in English.  For example,\n{\\tt x > 0 and x < 10} is true only if {\\tt x} is greater than 0\n{\\em and} less than 10.\n\n{\\tt n\\%2 == 0 or n\\%3 == 0} is true if {\\em either} of the conditions\nis true, that is, if the number is divisible by 2 {\\em or} 3.\n\nFinally, the {\\tt not} operator negates a boolean\nexpression, so {\\tt not(x > y)} is true if {\\tt (x > y)} is false,\nthat is, if {\\tt x} is less than or equal to {\\tt y}.\n\nStrictly speaking, the operands of the logical operators should be\nboolean expressions, but Python is not very strict.\nAny nonzero number is interpreted as ``true.''\n\n\\beforeverb\n\\begin{verbatim}\n>>>  x = 5\n>>>  x and 1\n1\n>>>  y = 0\n>>>  y and 1\n0\n\\end{verbatim}\n\\afterverb\n%\nIn general, this sort of thing is not considered good style.  If you\nwant to compare a value to zero, you should do it explicitly.\n\n\n\\section{Conditional execution}\n\\label{conditional execution}\n\\index{conditional branching}\n\\index{conditional execution}\n\nIn order to write useful programs, we almost always need the ability\nto check conditions and change the behavior of the program\naccordingly.  {\\bf Conditional statements} give us this ability.  The\nsimplest form is the {\\tt if} statement:\n\n\\beforeverb\n\\begin{verbatim}\nif x > 0:\n  print \"x is positive\"\n\\end{verbatim}\n\\afterverb\n%\nThe boolean expression after the {\\tt if} statement is\ncalled the {\\bf condition}.  If it is true, then the indented\nstatement gets executed.  If not, nothing happens.\n\n\\index{compound statement}\n\\index{compound statement!header}\n\\index{compound statement!body}\n\\index{compound statement!statement block}\n\\index{statement!compound}\n\nLike other compound statements, the\n{\\tt if} statement is made up of a header and a block\nof statements:\n\n\\beforeverb\n\\begin{verbatim}\nHEADER:\n  FIRST STATEMENT\n  ...\n  LAST STATEMENT\n\\end{verbatim}\n\\afterverb\n%\nThe header begins on a new line and ends with a colon (:).  The\nindented statements that follow are called a {\\bf block}.\nThe first unindented statement marks the end of the block.\nA statement block inside a compound statement is called the {\\bf body}\nof the statement.\n\n\\index{block}\n\\index{statement!block}\n\\index{body}\n\nThere is no limit on the number of statements that can appear in\nthe body of an if statement, but there has to be at least one.\nOccasionally, it is useful to have a body with no statements (usually\nas a place keeper for code you haven't written yet).  In that\ncase, you can use the {\\tt pass} statement, which does nothing.\n\n\\index{pass statement}\n\\index{statement!pass}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "be0a3801-aaf8-41f3-9996-6218b1366d18": {"__data__": {"id_": "be0a3801-aaf8-41f3-9996-6218b1366d18", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "3f9412e4-a749-4bff-8739-4606b31ea8f1", "node_type": null, "metadata": {}, "hash": "b75825908cb534ddf54717ef19fffceaa87b581b68363c796e5e39ca22a7ad9b"}, "3": {"node_id": "248058b8-0d54-48db-9a21-55b77aa1eb04", "node_type": null, "metadata": {}, "hash": "165dc46c35331e1ab3885ef62876246e1d8aed29feda1cec34a76d92d5d388ef"}}, "hash": "e0bc4a8fc5709dddb9cd2778b9ee7aba1d015e8097c5ad3d89bb88d531cdaa13", "text": "\\section{Alternative execution}\n\\label{alternative execution}\n\nA second form of the {\\tt if} statement is alternative execution,\nin which there are two possibilities and the condition determines\nwhich one gets executed.  The syntax looks like this:\n\n\\beforeverb\n\\begin{verbatim}\nif x%2 == 0:\n  print x, \"is even\"\nelse:\n  print x, \"is odd\"\n\\end{verbatim}\n\\afterverb\n%\nIf the remainder when {\\tt x} is divided by 2 is 0, then we\nknow that {\\tt x} is even, and the program displays a message to that\neffect.  If the condition is false, the second set of statements is\nexecuted.  Since the condition must be true or false, exactly one of\nthe alternatives will be executed.  The alternatives are called\n{\\bf branches}, because they are branches in the flow of execution.\n\n\\index{branch}\n\nAs an aside, if you need to check the parity (evenness or\noddness) of numbers often, you might ``wrap'' this code in a\nfunction:\n\n\\beforeverb\n\\begin{verbatim}\ndef printParity(x):\n  if x%2 == 0:\n    print x, \"is even\"\n  else:\n    print x, \"is odd\"\n\\end{verbatim}\n\\afterverb\n%\nFor any value of {\\tt x}, {\\tt printParity} displays an\nappropriate message.\nWhen you call it, you can provide any integer expression\nas an argument.\n\n\\beforeverb\n\\begin{verbatim}\n>>> printParity(17)\n17 is odd\n>>> y = 17\n>>> printParity(y+1)\n18 is even\n\\end{verbatim}\n\\afterverb\n%\n\n\n\\section{Chained conditionals}\n\\index{chained conditional}\n\\index{conditional!chained}\n\nSometimes there are more than two possibilities and we need more than\ntwo branches.  One way to express a computation like that is a {\\bf\nchained conditional}:\n\n\\beforeverb\n\\begin{verbatim}\nif x < y:\n  print x, \"is less than\", y\nelif x > y:\n  print x, \"is greater than\", y\nelse:\n  print x, \"and\", y, \"are equal\"\n\\end{verbatim}\n\\afterverb\n%\n{\\tt elif} is an abbreviation of ``else if.''  Again, exactly one\nbranch will be executed.  There is no limit of the number of {\\tt\nelif} statements, but the last branch has to be an {\\tt else}\nstatement:\n\n\\adjustpage{3}\n\\beforeverb\n\\begin{verbatim}\nif choice == 'A':\n  functionA()\nelif choice == 'B':\n  functionB()\nelif choice == 'C':\n  functionC()\nelse:\n  print \"Invalid choice.\"\n\\end{verbatim}\n\\afterverb\n%\nEach condition is checked in order.  If the first is false,\nthe next is checked, and so on.  If one of them is\ntrue, the corresponding branch executes, and the statement\nends.  Even if more than one condition is true, only the\nfirst true branch executes.  \n\n\\begin{quote}\n\\begin{quote}\n{\\em As an exercise, wrap these examples in functions\ncalled {\\tt compare(x, y)} and {\\tt dispatch(choice)}.}\n\\end{quote}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "248058b8-0d54-48db-9a21-55b77aa1eb04": {"__data__": {"id_": "248058b8-0d54-48db-9a21-55b77aa1eb04", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "be0a3801-aaf8-41f3-9996-6218b1366d18", "node_type": null, "metadata": {}, "hash": "e0bc4a8fc5709dddb9cd2778b9ee7aba1d015e8097c5ad3d89bb88d531cdaa13"}, "3": {"node_id": "59c02e3e-4304-4e19-bab8-b92039c0a2e8", "node_type": null, "metadata": {}, "hash": "f4daefb30b3ef3501567388026a9b208e8ac0d24814e9788300368e21a601a3b"}}, "hash": "165dc46c35331e1ab3885ef62876246e1d8aed29feda1cec34a76d92d5d388ef", "text": "\\section{Nested conditionals}\n\nOne conditional can also be nested within another.  We could have\nwritten the trichotomy example as follows:\n\n\\beforeverb\n\\begin{verbatim}\nif x == y:\n  print x, \"and\", y, \"are equal\"\nelse:\n  if x < y:\n    print x, \"is less than\", y\n  else:\n    print x, \"is greater than\", y\n\\end{verbatim}\n\\afterverb\n%\nThe outer conditional contains two branches.  The\nfirst branch contains a simple output statement.  The second branch\ncontains another {\\tt if} statement, which has two branches of its\nown.  Those two branches are both output statements,\nalthough they could have been conditional statements as well.\n\nAlthough the indentation of the statements makes the structure\napparent, nested conditionals become difficult to read very\nquickly. In general, it is a good idea to avoid them when you can.\n\nLogical operators often provide a way to simplify nested conditional\nstatements.  For example, we can rewrite the following code using a\nsingle conditional:\n\n\\beforeverb\n\\begin{verbatim}\nif 0 < x:\n  if x < 10:\n    print \"x is a positive single digit.\"\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt print} statement is executed only if we make it past both the\nconditionals, so we can use the {\\tt and} operator:\n\n\\beforeverb\n\\begin{verbatim}\nif 0 < x and x < 10:\n  print \"x is a positive single digit.\"\n\\end{verbatim}\n\\afterverb\n%\nThese kinds of conditions are common, so Python provides an\nalternative syntax that is similar to mathematical notation:\n\n\\beforeverb\n\\begin{verbatim}\nif 0 < x < 10:\n  print \"x is a positive single digit.\"\n\\end{verbatim}\n\\afterverb\n%\nThis condition is semantically the same as\nthe compound boolean expression and the nested conditional.\n\n\n\\section{The {\\tt return} statement}\n\\index{return statement}\n\\index{statement!return}\n\nThe {\\tt return} statement allows you to terminate the execution of a\nfunction before you reach the end.  One reason to use it is if you\ndetect an error condition:\n\n\\beforeverb\n\\begin{verbatim}\nimport math\n\ndef printLogarithm(x):\n  if x <= 0:\n    print \"Positive numbers only, please.\"\n    return\n\n  result = math.log(x)\n  print \"The log of x is\", result\n\\end{verbatim}\n\\afterverb\n%\nThe function {\\tt printLogarithm} has a\nparameter named {\\tt x}.  The first thing it does is check whether\n{\\tt x} is less than or equal to 0, in which case it displays an\nerror message and then uses {\\tt return} to exit the function. The\nflow of execution immediately returns to the caller, and the remaining\nlines of the function are not executed.\n\nRemember that to use a function from the math\nmodule, you have to import it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "59c02e3e-4304-4e19-bab8-b92039c0a2e8": {"__data__": {"id_": "59c02e3e-4304-4e19-bab8-b92039c0a2e8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "248058b8-0d54-48db-9a21-55b77aa1eb04", "node_type": null, "metadata": {}, "hash": "165dc46c35331e1ab3885ef62876246e1d8aed29feda1cec34a76d92d5d388ef"}, "3": {"node_id": "a45af541-a681-431f-8e18-14c46748011c", "node_type": null, "metadata": {}, "hash": "15fe45391510db384bc0b8663a112201d8d26a2232ac89211e69571dce6e7b20"}}, "hash": "f4daefb30b3ef3501567388026a9b208e8ac0d24814e9788300368e21a601a3b", "text": "\\section{Recursion}\n\\label{recursion}\n\\index{recursion}\n\nWe mentioned that it is legal for one function to call another, and\nyou have seen several examples of that.  We neglected to mention that\nit is also legal for a function to call itself.  It may not be obvious\nwhy that is a good thing, but it turns out to be one of the most\nmagical and interesting things a program can do.\nFor example, look at the following function:\n\n\\beforeverb\n\\begin{verbatim}\ndef countdown(n):\n  if n == 0:\n    print \"Blastoff!\"\n  else:\n    print n\n    countdown(n-1)\n\\end{verbatim}\n\\afterverb\n%\n{\\tt countdown} expects the parameter, {\\tt n}, to be a positive\ninteger.  If {\\tt n} is 0, it outputs the word, ``Blastoff!''\nOtherwise, it outputs {\\tt n} and then calls a function named\n{\\tt countdown}---itself---passing {\\tt n-1} as an argument.\n\nWhat happens if we call this function like this:\n\n\\beforeverb\n\\begin{verbatim}\n>>> countdown(3)\n\\end{verbatim}\n\\afterverb\n%\nThe execution of {\\tt countdown} begins with {\\tt n=3}, and since\n{\\tt n} is not 0, it outputs the value 3, and then calls itself...\n\n\\begin{quote}\nThe execution of {\\tt countdown} begins with {\\tt n=2}, and since\n{\\tt n} is not 0, it outputs the value 2, and then calls itself...\n\n\\begin{quote}\nThe execution of {\\tt countdown} begins with {\\tt n=1}, and since\n{\\tt n} is not 0, it outputs the value 1, and then calls itself...\n\n\\begin{quote}\nThe execution of {\\tt countdown} begins with {\\tt n=0}, and since\n{\\tt n} is 0, it outputs the word, ``Blastoff!'' and then returns.\n\\end{quote}\n\nThe {\\tt countdown} that got {\\tt n=1} returns.\n\\end{quote}\n\nThe {\\tt countdown} that got {\\tt n=2} returns.\n\\end{quote}\n\nThe {\\tt countdown} that got {\\tt n=3} returns.\n\nAnd then you're back in {\\tt \\_\\_main\\_\\_} (what a trip).  So, the\ntotal output looks like this:\n\n\\beforeverb\n\\begin{verbatim}\n3\n2\n1\nBlastoff!\n\\end{verbatim}\n\\afterverb\n%\nAs a second example, look again at the functions {\\tt newLine} and\n{\\tt threeLines}:\n\n\\beforeverb\n\\begin{verbatim}\ndef newline():\n  print\n\ndef threeLines():\n  newLine()\n  newLine()\n  newLine()\n\\end{verbatim}\n\\afterverb\n%\nAlthough these work, they would not be much help if we wanted to output 2\nnewlines, or 106.  A better alternative would be this:\n\n\\beforeverb\n\\begin{verbatim}\ndef nLines(n):\n  if n > 0:\n    print\n    nLines(n-1)\n\\end{verbatim}\n\\afterverb\n%\nThis program is similar to {\\tt countdown}; as long as {\\tt n} is\ngreater than 0, it outputs one newline and then calls itself to\noutput {\\tt n-1} additional newlines.  Thus, the total number of\nnewlines is {\\tt 1 + (n - 1)} which, if you do your algebra right, comes\nout to {\\tt n}.\n\nThe process of a function calling itself is {\\bf recursion}, and\nsuch functions are said to be recursive.\n\n\\index{recursion}\n\\index{function!recursive}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a45af541-a681-431f-8e18-14c46748011c": {"__data__": {"id_": "a45af541-a681-431f-8e18-14c46748011c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "59c02e3e-4304-4e19-bab8-b92039c0a2e8", "node_type": null, "metadata": {}, "hash": "f4daefb30b3ef3501567388026a9b208e8ac0d24814e9788300368e21a601a3b"}, "3": {"node_id": "9800400e-4b08-40de-8eab-a8030438fdea", "node_type": null, "metadata": {}, "hash": "21bb590a14b2eb024b6b7b0118e63e810aad91067577b812808bb7f34ec95840"}}, "hash": "15fe45391510db384bc0b8663a112201d8d26a2232ac89211e69571dce6e7b20", "text": "\\section{Stack diagrams for recursive functions}\n\\index{stack diagram}\n\\index{function frame}\n\\index{frame}\n\nIn Section~\\ref{stackdiagram}, we used a stack diagram to represent\nthe state of a program during a function call.  The same kind of\ndiagram can help interpret a recursive function.\n\nEvery time a function gets called, Python creates a new function\nframe, which contains the function's local variables and parameters.\nFor a recursive function, there might be more than one frame on the\nstack at the same time.\n\nThis figure shows a stack diagram for {\\tt countdown} called with\n{\\tt n = 3}:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/stack2.eps}}\n\\afterfig\n\nAs usual, the top of the stack is the frame for {\\tt \\_\\_main\\_\\_}.\nIt is empty because we did not create any variables in {\\tt\n\\_\\_main\\_\\_} or pass any arguments to it.\n\nThe four {\\tt countdown} frames have different values for the\nparameter {\\tt n}.  The bottom of the stack, where {\\tt n=0}, is\ncalled the {\\bf base case}.  It does not make a recursive call, so\nthere are no more frames.\n\n\\adjustpage{2}\n\\begin{quote}\n{\\em As an exercise, draw a stack diagram for {\\tt nLines} called with\n{\\tt n=4}.}\n\\end{quote}\n\n\\index{base case}\n\\index{recursion!base case}\n\n\n\\section{Infinite recursion}\n\\index{infinite recursion}\n\\index{recursion!infinite}\n\\index{runtime error}\n\\index{error!runtime}\n\\index{traceback}\n\nIf a recursion never reaches a base case, it goes on making\nrecursive calls forever, and the program never terminates.  This is\nknown as {\\bf infinite recursion}, and it is generally not considered\na good idea.  Here is a minimal program with an infinite recursion:\n\n\\beforeverb\n\\begin{verbatim}\ndef recurse():\n  recurse()\n\\end{verbatim}\n\\afterverb\n%\nIn most programming environments, a program with infinite recursion\ndoes not really run forever.  Python reports an error\nmessage when the maximum recursion depth is reached:\n\n\\beforeverb\n\\begin{verbatim}\n  File \"<stdin>\", line 2, in recurse\n  (98 repetitions omitted)\n  File \"<stdin>\", line 2, in recurse\nRuntimeError: Maximum recursion depth exceeded\n\\end{verbatim}\n\\afterverb\n%\nThis traceback is a little bigger than the one we saw in the\nprevious chapter.  When the error occurs, there are 100\n{\\tt recurse} frames on the stack!\n\n\\begin{quote}\n{\\em As an exercise, write a function with infinite recursion and run\nit in the Python interpreter.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9800400e-4b08-40de-8eab-a8030438fdea": {"__data__": {"id_": "9800400e-4b08-40de-8eab-a8030438fdea", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "a45af541-a681-431f-8e18-14c46748011c", "node_type": null, "metadata": {}, "hash": "15fe45391510db384bc0b8663a112201d8d26a2232ac89211e69571dce6e7b20"}, "3": {"node_id": "8d110233-ce34-468f-904d-59986c253e79", "node_type": null, "metadata": {}, "hash": "db88dc1bf19b9df3b887bdfe88b7abc75d6397237b8ac9c7f9377520c34aaa05"}}, "hash": "21bb590a14b2eb024b6b7b0118e63e810aad91067577b812808bb7f34ec95840", "text": "\\section{Keyboard input}\n\nThe programs we have written so far are a bit rude in the sense that\nthey accept no input from the user.  They just do the same thing every\ntime.\n\nPython provides built-in functions that get input from the keyboard.\nThe simplest is called {\\tt raw\\_input}.  When this function is\ncalled, the program stops and waits for the user to type something.\nWhen the user presses Return or the Enter key, the program resumes and\n{\\tt raw\\_input} returns what the user typed as a {\\bf string}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> input = raw_input ()\nWhat are you waiting for?\n>>> print input\nWhat are you waiting for?\n\\end{verbatim}\n\\afterverb\n%\nBefore calling {\\tt raw\\_input}, it is a good idea to print a message\ntelling the user what to input.  This message is called a {\\bf\nprompt}.  We can supply a prompt as an argument to {\\tt raw\\_input}:\n\n\\index{prompt}\n\n\\beforeverb\n\\begin{verbatim}\n>>> name = raw_input (\"What...is your name? \")\nWhat...is your name? Arthur, King of the Britons!\n>>> print name\nArthur, King of the Britons!\n\\end{verbatim}\n\\afterverb\n%\nIf we expect the response to be an integer, we can use the\n{\\tt input} function:\n\n\\beforeverb\n\\begin{verbatim}\nprompt = \"What...is the airspeed velocity of an unladen swallow?\\n\"\nspeed = input(prompt)\n\\end{verbatim}\n\\afterverb\n%\nThe sequence \\verb+\\n+ at the end of the string represents a newline,\nso the user's input appears below the prompt.\n\nIf the user types a string of digits, it is converted to an\ninteger and assigned to {\\tt speed}.  Unfortunately, if the user\ntypes a character that is not a digit, the program crashes:\n\n\\beforeverb\n\\begin{verbatim}\n>>> speed = input (prompt)\nWhat...is the airspeed velocity of an unladen swallow?\nWhat do you mean, an African or a European swallow?\nSyntaxError: invalid syntax\n\\end{verbatim}\n\\afterverb\n%\nTo avoid this kind of error, it is generally a good idea to\nuse {\\tt raw\\_input} to get a string and then use conversion\nfunctions to convert to other types.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8d110233-ce34-468f-904d-59986c253e79": {"__data__": {"id_": "8d110233-ce34-468f-904d-59986c253e79", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55e9377f-cd20-4e8f-b312-4037fb435a8a", "node_type": null, "metadata": {}, "hash": "5cb10e83ade97fa491aad7e4d3d207a636c1aae25805dfe62605108ec0994afb"}, "2": {"node_id": "9800400e-4b08-40de-8eab-a8030438fdea", "node_type": null, "metadata": {}, "hash": "21bb590a14b2eb024b6b7b0118e63e810aad91067577b812808bb7f34ec95840"}}, "hash": "db88dc1bf19b9df3b887bdfe88b7abc75d6397237b8ac9c7f9377520c34aaa05", "text": "\\section{Glossary}\n\n\\begin{description}\n\n\\item[modulus operator:]  An operator, denoted with a percent sign\n({\\tt \\%}), that works on integers and yields the remainder when one\nnumber is divided by another.\n\n\\item[boolean expression:]  An expression that is either true or false.\n\n\\item[comparison operator:] One of the operators that compares two\nvalues: {\\tt ==}, {\\tt !=}, {\\tt >}, {\\tt <}, {\\tt >=}, and {\\tt <=}.\n\n\\item[logical operator:] One of the operators that combines boolean\nexpressions: {\\tt and}, {\\tt or}, and {\\tt not}.\n\n\\item[conditional statement:]  A statement that controls the flow of\nexecution depending on some condition.\n\n\\item[condition:] The boolean expression in a conditional statement\nthat determines which branch is executed.\n\n\\item[compound statement:]  A statement that consists of a header\nand a body.  The header ends with a colon (:).  The body is indented\nrelative to the header.\n\n\\item[block:] A group of consecutive statements with the same\nindentation.\n\n\\item[body:] The block in a compound statement that follows the\nheader.\n\n\\item[nesting:]  One program structure within another, such as a\nconditional statement inside a branch of another conditional\nstatement.\n\n\\item[recursion:]  The process of calling the function that is\ncurrently executing.\n\n\\item[base case:]  A branch of the conditional statement in a\nrecursive function that does not result in a recursive call.\n\n\\item[infinite recursion:]  A function that calls itself recursively\nwithout ever reaching the base case.  Eventually, an infinite recursion\ncauses a runtime error.\n\n\\item[prompt:]  A visual cue that tells the user to input data.\n\n\\index{modulus operator}\n\\index{boolean expression}\n\\index{expression!boolean}\n\\index{conditional statement}\n\\index{statement!conditional}\n\\index{condition}\n\\index{compound statement}\n\\index{branch}\n\\index{body}\n\\index{block}\n\\index{nesting}\n\\index{recursion}\n\\index{base case}\n\\index{infinite recursion}\n\\index{prompt}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3654c353-73a0-4429-8b80-706b16bf79e3": {"__data__": {"id_": "3654c353-73a0-4429-8b80-706b16bf79e3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "3": {"node_id": "8c681b3e-fbde-4214-adaf-f9d1300c9aee", "node_type": null, "metadata": {}, "hash": "c1eaf39f9c960a77077b3a27b5b68a284c2adaa8d60e1b31e60b79e875061ea6"}}, "hash": "59e3869dbaf0d118e518f88c79ca7246fd59964b2bb979e4dc39c7858013d221", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{Fruitful functions}\n\n\\section{Return values}\n\\index{return value}\n\nSome of the built-in functions we have used, such as the math\nfunctions, have produced results.  Calling the function generates a\nnew value, which we usually assign to a variable or use as part of an\nexpression.\n\n\\beforeverb\n\\begin{verbatim}\ne = math.exp(1.0)\nheight = radius * math.sin(angle)\n\\end{verbatim}\n\\afterverb\n%\nBut so far, none of the functions we have written has returned a\nvalue.\n\nIn this chapter, we are going to write functions that return values,\nwhich we will call {\\bf fruitful functions}, for want of a better\nname.  The first example is {\\tt area}, which returns the area of a\ncircle with the given radius:\n\n\\beforeverb\n\\begin{verbatim}\nimport math\n\ndef area(radius):\n  temp = math.pi * radius**2\n  return temp\n\\end{verbatim}\n\\afterverb\n%\nWe have seen the {\\tt return} statement before, but in a fruitful\nfunction the {\\tt return} statement includes\na {\\bf return value}.  This statement means: ``Return immediately from\nthis function and use the following expression as a return value.''\nThe expression provided can be arbitrarily complicated, so we could\nhave written this function more concisely:\n\n\\beforeverb\n\\begin{verbatim}\ndef area(radius):\n  return math.pi * radius**2\n\\end{verbatim}\n\\afterverb\n%\nOn the other hand, {\\bf temporary variables} like {\\tt temp} often make\ndebugging easier.\n\n\\index{temporary variable}\n\\index{variable!temporary}\n\nSometimes it is useful to have multiple return statements, one in each\nbranch of a conditional:\n\n\\beforeverb\n\\begin{verbatim}\ndef absoluteValue(x):\n  if x < 0:\n    return -x\n  else:\n    return x\n\\end{verbatim}\n\\afterverb\n%\nSince these {\\tt return} statements are in an alternative conditional,\nonly one will be executed.  As soon as one is executed, the function\nterminates without executing any subsequent statements.\n\nCode that appears after a {\\tt return} statement, or any other place\nthe flow of execution can never reach, is called {\\bf dead code}.\n\n\\index{dead code}\n\nIn a fruitful function, it is a good idea to ensure\nthat every possible path through the program hits a\n{\\tt return} statement.  For example:\n\n\\beforeverb\n\\begin{verbatim}\ndef absoluteValue(x):\n  if x < 0:\n    return -x\n  elif x > 0:\n    return x\n\\end{verbatim}\n\\afterverb\n%\nThis program is not correct because if {\\tt x} happens to be 0,\nneither condition is true, and the function ends without hitting a\n{\\tt return} statement.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8c681b3e-fbde-4214-adaf-f9d1300c9aee": {"__data__": {"id_": "8c681b3e-fbde-4214-adaf-f9d1300c9aee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "3654c353-73a0-4429-8b80-706b16bf79e3", "node_type": null, "metadata": {}, "hash": "59e3869dbaf0d118e518f88c79ca7246fd59964b2bb979e4dc39c7858013d221"}, "3": {"node_id": "8defb448-9071-4fc8-85d7-1c8c7994b068", "node_type": null, "metadata": {}, "hash": "48805f2dac73bcc5930214ba32b30b3508ec0f39735dcbfe2475ce425e649c70"}}, "hash": "c1eaf39f9c960a77077b3a27b5b68a284c2adaa8d60e1b31e60b79e875061ea6", "text": "In this case, the return value is a special value called\n{\\tt None}:\n\n\\index{None}\n\n\\beforeverb\n\\begin{verbatim}\n>>> print absoluteValue(0)\nNone\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n\\begin{quote}\n{\\em As an exercise, write a {\\tt compare} function\nthat returns {\\tt 1} if {\\tt x > y},\n{\\tt 0} if {\\tt x == y}, and {\\tt -1} if {\\tt x < y}.}\n\\end{quote}\n\\end{quote}\n\n\n\\section{Program development}\n\\label{program development}\n\\index{scaffolding}\n\nAt this point, you should be able to look at complete functions\nand tell what they do.  Also, if you have been doing the exercises,\nyou have written some small functions.  As you write\nlarger functions, you might start to have more difficulty,\nespecially with runtime and semantic errors.\n\nTo deal with increasingly complex programs,\nwe are going to suggest a technique called\n{\\bf incremental development}.  The goal of incremental development\nis to avoid long debugging sessions by adding and testing only\na small amount of code at a time.\n\n\\index{incremental development}\n\\index{development!incremental}\n\nAs an example, suppose you want to find the distance between two\npoints, given by the coordinates $(x_1, y_1)$ and $(x_2, y_2)$.\nBy the Pythagorean theorem, the distance is:\n\n\\begin{displaymath}\n\\mathrm{distance} = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n\\end{displaymath}\n%\nThe first step is to consider what a {\\tt distance} function should\nlook like in Python. In other words, what are the inputs (parameters)\nand what is the output (return value)?\n\nIn this case, the two points are the inputs, which we can represent\nusing four parameters.  The return value is the distance, which is\na floating-point value.\n\nAlready we can write an outline of the function:\n\n\\beforeverb\n\\begin{verbatim}\ndef distance(x1, y1, x2, y2):\n  return 0.0\n\\end{verbatim}\n\\afterverb\n%\nObviously, this version of the function doesn't compute distances; it\nalways returns zero.  But it is syntactically correct, and it will\nrun, which means that we can test it before we make it more\ncomplicated.\n\nTo test the new function, we call it with sample values:\n\n\\beforeverb\n\\begin{verbatim}\n>>> distance(1, 2, 4, 6)\n0.0\n\\end{verbatim}\n\\afterverb\n%\nWe chose these values so that the horizontal distance equals 3 and the\nvertical distance equals 4; that way, the result is 5\n(the hypotenuse of a 3-4-5 triangle). When testing a function, it is\nuseful to know the right answer.\n\nAt this point we have confirmed that the function is syntactically\ncorrect, and we can start adding lines of code.  After each\nincremental change, we test the function again.  If an error occurs at\nany point, we know where it must be---in the last line\nwe added.\n\nA logical first step in the computation is to find the differences\n$x_2 - x_1$ and $y_2 - y_1$.  We will store those values in\ntemporary variables named {\\tt dx} and {\\tt dy} and print them.\n\n\\beforeverb\n\\begin{verbatim}\ndef distance(x1, y1, x2, y2):\n  dx = x2 - x1\n  dy = y2 - y1\n  print \"dx is\", dx\n  print \"dy is\", dy\n  return 0.0\n\\end{verbatim}\n\\afterverb\n%\nIf the function is working, the outputs should be 3 and 4.  If so,\nwe know that the function is getting the right arguments and performing\nthe first computation correctly.  If not, there are only a few lines\nto check.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8defb448-9071-4fc8-85d7-1c8c7994b068": {"__data__": {"id_": "8defb448-9071-4fc8-85d7-1c8c7994b068", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "8c681b3e-fbde-4214-adaf-f9d1300c9aee", "node_type": null, "metadata": {}, "hash": "c1eaf39f9c960a77077b3a27b5b68a284c2adaa8d60e1b31e60b79e875061ea6"}, "3": {"node_id": "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a", "node_type": null, "metadata": {}, "hash": "c498aa9aee283b9c50a4ff756d8ab370718d65f6ee25a861b1c4848addf9dc00"}}, "hash": "48805f2dac73bcc5930214ba32b30b3508ec0f39735dcbfe2475ce425e649c70", "text": "If not, there are only a few lines\nto check.\n\nNext we compute the sum of squares of {\\tt dx} and {\\tt dy}:\n\n\\beforeverb\n\\begin{verbatim}\ndef distance(x1, y1, x2, y2):\n  dx = x2 - x1\n  dy = y2 - y1\n  dsquared = dx**2 + dy**2\n  print \"dsquared is: \", dsquared\n  return 0.0\n\\end{verbatim}\n\\afterverb\n%\nNotice that we removed the {\\tt print} statements we wrote in the previous\nstep.  Code like that is called {\\bf scaffolding} because it is\nhelpful for building the program but is not part of the final product.\n\nAgain, we would run the program at this stage and check the output\n(which should be 25).\n\nFinally, if we have imported the math module, we can use the\n{\\tt sqrt} function to compute and return the result:\n\n\\beforeverb\n\\begin{verbatim}\ndef distance(x1, y1, x2, y2):\n  dx = x2 - x1\n  dy = y2 - y1\n  dsquared = dx**2 + dy**2\n  result = math.sqrt(dsquared)\n  return result\n\\end{verbatim}\n\\afterverb\n%\nIf that works correctly, you are done.  Otherwise, you might\nwant to print the value of {\\tt result} before the return\nstatement.\n\nWhen you start out, you should add only a line or two of code\nat a time.\nAs you gain more experience, you might find yourself\nwriting and debugging bigger chunks.  Either way,\nthe incremental development process can save you a lot of debugging\ntime.\n\nThe key aspects of the process are:\n\n\\begin{enumerate}\n\n\\item Start with a working program and make small incremental changes. \nAt any point, if there is an error, you will know exactly where it is.\n\n\\item Use temporary variables to hold intermediate values so you can\noutput and check them.\n\n\\item Once the program is working, you might want to remove some of\nthe scaffolding or consolidate multiple statements into compound\nexpressions, but only if it does not make the program difficult to\nread.\n\n\\end{enumerate}\n\n\\begin{quote}\n{\\em As an exercise, use incremental development to write a function\ncalled {\\tt hypotenuse} that returns the length of the hypotenuse of a\nright triangle given the lengths of the two legs as arguments.\nRecord each stage of the incremental development process as you go.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a": {"__data__": {"id_": "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "8defb448-9071-4fc8-85d7-1c8c7994b068", "node_type": null, "metadata": {}, "hash": "48805f2dac73bcc5930214ba32b30b3508ec0f39735dcbfe2475ce425e649c70"}, "3": {"node_id": "8a42847e-d34b-4214-83fd-6613a4b84086", "node_type": null, "metadata": {}, "hash": "68e08f377e5d902f0c5b4cac2f3bf3bf1872124dad8a3d0140d11992a1de1429"}}, "hash": "c498aa9aee283b9c50a4ff756d8ab370718d65f6ee25a861b1c4848addf9dc00", "text": "Record each stage of the incremental development process as you go.}\n\\end{quote}\n\n\n\\section{Composition}\n\\index{composition}\n\\index{function!composition}\n\nAs you should expect by now, you can call one function from\nwithin another.  This ability is called {\\bf composition}.\n\nAs an example, we'll write a function that takes two points,\nthe center of the circle and a point on the perimeter, and computes\nthe area of the circle.\n\nAssume that the center point is stored in the variables {\\tt xc} and\n{\\tt yc}, and the perimeter point is in {\\tt xp} and {\\tt yp}. The\nfirst step is to find the radius of the circle, which is the distance\nbetween the two points.  Fortunately, there is a function, {\\tt\ndistance}, that does that:\n\n\\beforeverb\n\\begin{verbatim}\nradius = distance(xc, yc, xp, yp)\n\\end{verbatim}\n\\afterverb\n%\nThe second step is to find the area of a circle with that radius and return\nit:\n\n\\beforeverb\n\\begin{verbatim}\nresult = area(radius)\nreturn result\n\\end{verbatim}\n\\afterverb\n%\nWrapping that up in a function, we get:\n\n\\beforeverb\n\\begin{verbatim}\ndef area2(xc, yc, xp, yp):\n  radius = distance(xc, yc, xp, yp)\n  result = area(radius)\n  return result\n\\end{verbatim}\n\\afterverb\n%\nWe called this function {\\tt area2} to distinguish it from the {\\tt\narea} function defined earlier.  There can only be one function with a\ngiven name within a given module.\n\nThe temporary variables {\\tt radius} and {\\tt result} are useful for\ndevelopment and debugging, but once the program is working, we can\nmake it more concise by composing the function calls:\n\n\\beforeverb\n\\begin{verbatim}\ndef area2(xc, yc, xp, yp):\n  return area(distance(xc, yc, xp, yp))\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, write a function {\\tt slope(x1, y1, x2, y2)}\nthat returns the slope of the line through the points $(x1, y1)$ and\n$(x2, y2)$.  Then use this function in a function called\n{\\tt intercept(x1, y1, x2, y2)} that returns the y-intercept of the\nline through the points {\\tt (x1, y1)} and {\\tt (x2, y2)}.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8a42847e-d34b-4214-83fd-6613a4b84086": {"__data__": {"id_": "8a42847e-d34b-4214-83fd-6613a4b84086", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a", "node_type": null, "metadata": {}, "hash": "c498aa9aee283b9c50a4ff756d8ab370718d65f6ee25a861b1c4848addf9dc00"}, "3": {"node_id": "46465398-05f7-49ec-bc8c-c6f1d9696bcc", "node_type": null, "metadata": {}, "hash": "f799bc7d4024b191bda25186b0e879b121bf3405fddc6c6bcd5b0652e296d1aa"}}, "hash": "68e08f377e5d902f0c5b4cac2f3bf3bf1872124dad8a3d0140d11992a1de1429", "text": "\\section{Boolean functions}\n\\label{boolean}\n\\index{boolean function}\n\\index{function!boolean}\n\nFunctions can return boolean values, which is often convenient for hiding\ncomplicated tests inside functions.  For example:\n\n\\beforeverb\n\\begin{verbatim}\ndef isDivisible(x, y):\n  if x % y == 0:\n    return True\n  else:\n    return False\n\\end{verbatim}\n\\afterverb\n%\nThe name of this function is {\\tt isDivisible}.  It is common to give\nboolean functions names that sound like yes/no questions.  {\\tt\nisDivisible} returns either {\\tt True} or {\\tt False} to indicate whether the\n{\\tt x} is or is not divisible by {\\tt y}.\n\nWe can make the function more concise by taking advantage of the fact\nthat the condition of the {\\tt if} statement is itself a boolean\nexpression.  We can return it directly, avoiding the {\\tt if}\nstatement altogether:\n\n\\beforeverb\n\\begin{verbatim}\ndef isDivisible(x, y):\n  return x % y == 0\n\\end{verbatim}\n\\afterverb\n%\nThis session shows the new function in action:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   isDivisible(6, 4)\nFalse\n>>>   isDivisible(6, 3)\nTrue\n\\end{verbatim}\n\\afterverb\n%\nBoolean functions are often used in conditional statements:\n\n\\beforeverb\n\\begin{verbatim}\nif isDivisible(x, y):\n  print \"x is divisible by y\"\nelse:\n  print \"x is not divisible by y\"\n\\end{verbatim}\n\\afterverb\n%\nIt might be tempting to write something like:\n\n\\beforeverb\n\\begin{verbatim}\nif isDivisible(x, y) == True:\n\\end{verbatim}\n\\afterverb\n%\nBut the extra comparison is unnecessary.\n\n\\begin{quote}\n{\\em As an exercise, write a function {\\tt isBetween(x, y, z)} that\nreturns {\\tt True} if $y \\le x \\le z$ or {\\tt False} otherwise.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "46465398-05f7-49ec-bc8c-c6f1d9696bcc": {"__data__": {"id_": "46465398-05f7-49ec-bc8c-c6f1d9696bcc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "8a42847e-d34b-4214-83fd-6613a4b84086", "node_type": null, "metadata": {}, "hash": "68e08f377e5d902f0c5b4cac2f3bf3bf1872124dad8a3d0140d11992a1de1429"}, "3": {"node_id": "66035af3-6ef1-495b-a24c-4e6642d277f4", "node_type": null, "metadata": {}, "hash": "e4f6e4c329b81bee01e2f9f5963590a686af8de1925d89241a622bf30a26a71c"}}, "hash": "f799bc7d4024b191bda25186b0e879b121bf3405fddc6c6bcd5b0652e296d1aa", "text": "\\section{More recursion}\n\\index{recursion}\n\\index{complete language}\n\\index{language!complete}\n\\index{Turing, Alan}\n\\index{Turing Thesis}\n\nSo far, you have only learned a small subset of Python, but you might\nbe interested to know that this subset is a {\\em complete}\nprogramming language, which means that anything that can be\ncomputed can be expressed in this language.  Any program ever written\ncould be rewritten using only the language features you have learned\nso far (actually, you would need a few commands to control devices\nlike the keyboard, mouse, disks, etc., but that's all).\n\nProving that claim is a nontrivial exercise first accomplished by Alan\nTuring, one of the first computer scientists (some would argue that he\nwas a mathematician, but a lot of early computer scientists started as\nmathematicians).  Accordingly, it is known as the Turing Thesis.  If\nyou take a course on the Theory of Computation, you will have a chance\nto see the proof.\n\n\\adjustpage{2}\n\nTo give you an idea of what you can do with the tools you have learned\nso far, we'll evaluate a few recursively defined mathematical\nfunctions.  A recursive definition is similar to a circular\ndefinition, in the sense that the definition contains a reference to\nthe thing being defined.  A truly circular definition is not very\nuseful:\n\n\\begin{description}\n\n\\item[frabjuous:] An adjective used to describe something that is frabjuous.\n\n\\end{description}\n\n\\index{frabjuous}\n\\index{circular definition}\n\\index{definition!circular}\n\nIf you saw that definition in the dictionary, you might be annoyed. On\nthe other hand, if you looked up the definition of the mathematical\nfunction factorial, you might get something like this:\n\n\\vspace{-0.35in}\n\\begin{eqnarray*}\n&&  0! = 1 \\\\\n&&  n! = n (n-1)!\n\\end{eqnarray*}\n\\vspace{-0.25in}\n\nThis definition says that the factorial of 0 is 1, and the factorial\nof any other value, $n$, is $n$ multiplied by the factorial of $n-1$.\n\nSo $3!$ is 3 times $2!$, which is 2 times $1!$, which is 1 times\n$0!$. Putting it all together, $3!$ equals 3 times 2 times 1 times 1,\nwhich is 6.\n\n\\index{factorial function}\n\\index{function!factorial}\n\nIf you can write a recursive definition of something, you can usually\nwrite a Python program to evaluate it. The first step is to decide\nwhat the parameters are for this function.  With little effort, you\nshould conclude that {\\tt factorial} has a single parameter:\n\n\\beforeverb\n\\begin{verbatim}\ndef factorial(n):\n\\end{verbatim}\n\\afterverb\n%\nIf the argument happens to be 0, all we have to do is return 1:\n\n\\beforeverb\n\\begin{verbatim}\ndef factorial(n):\n  if n == 0:\n    return 1\n\\end{verbatim}\n\\afterverb\n%\nOtherwise, and this is the interesting part, we have to make a\nrecursive call to find the factorial of $n-1$ and then multiply it by\n$n$:\n\n\\beforeverb\n\\begin{verbatim}\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    recurse = factorial(n-1)\n    result = n * recurse\n    return result\n\\end{verbatim}\n\\afterverb\n%\nThe flow of execution for this program is similar to the flow of {\\tt\ncountdown} in Section~\\ref{recursion}.  If we call {\\tt factorial} with the\nvalue 3:\n\n\\adjustpage{1}\n\nSince 3 is not 0, we take the second branch and calculate the factorial\nof {\\tt n-1}...\n\n\\begin{quote}\nSince 2 is not 0, we take the second branch and calculate the factorial of\n{\\tt n-1}...", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "66035af3-6ef1-495b-a24c-4e6642d277f4": {"__data__": {"id_": "66035af3-6ef1-495b-a24c-4e6642d277f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "46465398-05f7-49ec-bc8c-c6f1d9696bcc", "node_type": null, "metadata": {}, "hash": "f799bc7d4024b191bda25186b0e879b121bf3405fddc6c6bcd5b0652e296d1aa"}, "3": {"node_id": "c3def67b-d763-4f94-9a2b-53b81a1be41b", "node_type": null, "metadata": {}, "hash": "e0de621c8f5dc66ffd4526067a206cdd6240c7b4d39bb1aed59e7073e65d8052"}}, "hash": "e4f6e4c329b81bee01e2f9f5963590a686af8de1925d89241a622bf30a26a71c", "text": "\\begin{quote}\n  Since 1 is not 0, we take the second branch and calculate the factorial\n  of {\\tt n-1}...\n\n\n    \\begin{quote}\n    Since 0 {\\em is} 0, we take the first branch and return 1\n    without making any more recursive calls.\n    \\end{quote}\n\n\n  The return value (1) is multiplied by $n$, which is 1, and the\n  result is returned.\n  \\end{quote}\n\n\nThe return value (1) is multiplied by $n$, which is 2, and the\nresult is returned.\n\\end{quote}\n\n\nThe return value (2) is multiplied by $n$, which is 3, and the result, 6,\nbecomes the return value of the function call that started the whole\nprocess.\n\nHere is what the stack diagram looks like for this sequence of function\ncalls:\n\n\\vspace{0.1in}\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/stack3.eps}}\n\\afterfig\n\\vspace{0.1in}\n\nThe return values are shown being passed back up the stack.\nIn each frame, the return value is\nthe value of {\\tt result}, which is the product of {\\tt n}\nand {\\tt recurse}.\n\nNotice that in the last frame, the local\nvariables {\\tt recurse} and {\\tt result} do not exist, because\nthe branch that creates them did not execute.\n\n\n\n\\section{Leap of faith}\n\\index{recursion}\n\\index{leap of faith}\n\nFollowing the flow of execution is one way to read programs, but\nit can quickly become labyrinthine.  An\nalternative is what we call the ``leap of faith.'' When you come to a\nfunction call, instead of following the flow of execution, you {\\em\nassume} that the function works correctly and returns the appropriate\nvalue.\n\nIn fact, you are already practicing this leap of faith when you use\nbuilt-in functions.  When you call {\\tt math.cos} or {\\tt math.exp},\nyou don't examine the implementations of those functions.  You just\nassume that they work because the people who wrote the built-in\nfunctions were good programmers.\n\nThe same is true when you call one of your own functions.  For example,\nin Section~\\ref{boolean}, we wrote a function called {\\tt isDivisible}\nthat determines whether one number is divisible by another.  Once we\nhave convinced ourselves that this function is correct---by testing\nand examining the code---we can use the function without looking\nat the code again.\n\n\\adjustpage{-1}\n\nThe same is true of recursive programs.  When you get to the recursive\ncall, instead of following the flow of execution, you should assume\nthat the recursive call works (yields the correct result) and then ask\nyourself, ``Assuming that I can find the factorial of $n-1$, can I\ncompute the factorial of $n$?''  In this case, it is clear that you\ncan, by multiplying by $n$.\n\nOf course, it's a bit strange to assume that the function works\ncorrectly when you haven't finished writing it, but that's why\nit's called a leap of faith!\n\n\n\\section{One more example}\n\\label{one more example}\n\nIn the previous example, we used temporary variables to spell out\nthe steps and to make the code easier to debug, but we could have\nsaved a few lines:\n\n\\beforeverb\n\\begin{verbatim}\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\\end{verbatim}\n\\afterverb\n%\nFrom now on, we will tend to use the more concise form, but we\nrecommend that you use the more explicit version while you are developing\ncode.  When you have it working, you can tighten it up if you are\nfeeling inspired.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c3def67b-d763-4f94-9a2b-53b81a1be41b": {"__data__": {"id_": "c3def67b-d763-4f94-9a2b-53b81a1be41b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "66035af3-6ef1-495b-a24c-4e6642d277f4", "node_type": null, "metadata": {}, "hash": "e4f6e4c329b81bee01e2f9f5963590a686af8de1925d89241a622bf30a26a71c"}, "3": {"node_id": "36bb8e59-f2dd-4374-897e-a97830ae042b", "node_type": null, "metadata": {}, "hash": "bb97a49fc2fcba8fa0e78a36e3028bcd54d6cb9688b608cc60d45d3b82152840"}}, "hash": "e0de621c8f5dc66ffd4526067a206cdd6240c7b4d39bb1aed59e7073e65d8052", "text": "When you have it working, you can tighten it up if you are\nfeeling inspired.\n\n\\index{Fibonacci function}\n\nAfter {\\tt factorial}, the most common example of a recursively defined\nmathematical function is {\\tt fibonacci}, which has the following definition:\n\n\\vspace{-0.25in}\n\\begin{eqnarray*}\n&& \\mathrm{fibonacci}(0) = 1 \\\\\n&& \\mathrm{fibonacci}(1) = 1 \\\\\n&& \\mathrm{fibonacci}(n) = \\mathrm{fibonacci}(n-1) + \\mathrm{fibonacci}(n-2);\n\\end{eqnarray*}\n%\nTranslated into Python, it looks like this:\n\n\\beforeverb\n\\begin{verbatim}\ndef fibonacci (n):\n  if n == 0 or n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\\end{verbatim}\n\\afterverb\n%\nIf you try to follow the flow of execution here, even for fairly\nsmall values of $n$, your head explodes.  But according to the\nleap of faith, if you assume that the two recursive calls\nwork correctly, then it is clear that you get\nthe right result by adding them together.\n\n\\adjustpage{-1}\n\n\\section{Checking types}\n\\index{type checking}\n\\index{error checking}\n\\index{factorial function}\n\nWhat happens if we call {\\tt factorial} and give it 1.5 as an argument?\n\n\\beforeverb\n\\begin{verbatim}\n>>> factorial (1.5)\nRuntimeError: Maximum recursion depth exceeded\n\\end{verbatim}\n\\afterverb\n%\nIt looks like an infinite recursion.  But how can that be?  There is a\nbase case---when {\\tt n == 0}.  The problem is that the values\nof {\\tt n} {\\em miss} the base case.\n\n\\index{infinite recursion}\n\\index{recursion!infinite}\n\nIn the first recursive call, the value of {\\tt n} is 0.5.\nIn the next, it is -0.5.  From there, it gets smaller and\nsmaller, but it will never be 0.\n\nWe have two choices.  We can try to generalize the {\\tt factorial}\nfunction to work with floating-point numbers, or we can make\n{\\tt factorial} check the type of its argument.  The first option\nis called the gamma function and it's a little beyond the\nscope of this book.  So we'll go for the\nsecond.\n\n\\index{gamma function}\n\nWe can use the built-in function {\\tt isinstance} to verify the type of the\nargument.  While we're\nat it, we also make sure the argument is positive:\n\n\\beforeverb\n\\begin{verbatim}\ndef factorial (n):\n  if not isinstance(n, int):\n    print \"Factorial is only defined for integers.\"\n    return -1\n  elif n < 0:\n    print \"Factorial is only defined for positive integers.\"\n    return -1\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\\end{verbatim}\n\\afterverb\n%\nNow we have three base cases.  The first catches\nnonintegers.  The second catches negative integers.  In both cases,\nthe program prints an error message and returns a special value, -1, to\nindicate that something went wrong:\n\n\\beforeverb\n\\begin{verbatim}\n>>> factorial (\"fred\")\nFactorial is only defined for integers.\n-1\n>>> factorial (-2)\nFactorial is only defined for positive integers.\n-1\n\\end{verbatim}\n\\afterverb\n%\nIf we get past both checks, then we know that $n$ is a positive\ninteger, and we can prove that the recursion terminates.\n\nThis program demonstrates a pattern sometimes called a {\\bf guardian}.\nThe first two conditionals act as guardians, protecting the\ncode that follows from values that might cause an error.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "36bb8e59-f2dd-4374-897e-a97830ae042b": {"__data__": {"id_": "36bb8e59-f2dd-4374-897e-a97830ae042b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bf09652-9a97-4f30-bc07-da12c2260de4", "node_type": null, "metadata": {}, "hash": "b85c9178f1934aede99b2982b6a7d7abb31a7200f117b628b18e69577d292072"}, "2": {"node_id": "c3def67b-d763-4f94-9a2b-53b81a1be41b", "node_type": null, "metadata": {}, "hash": "e0de621c8f5dc66ffd4526067a206cdd6240c7b4d39bb1aed59e7073e65d8052"}}, "hash": "bb97a49fc2fcba8fa0e78a36e3028bcd54d6cb9688b608cc60d45d3b82152840", "text": "The guardians\nmake it possible to prove the correctness of the code.\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[fruitful function:] A function that yields a return value.\n\n\\item[return value:]  The value provided as the result of a function call.\n\n\\item[temporary variable:]  A variable used to store an intermediate value in\na complex calculation.\n\n\\item[dead code:]  Part of a program that can never be executed, often because\nit appears after a {\\tt return} statement.\n\n\\item[{\\tt None}:]  A special Python value returned by functions that\nhave no return statement, or a return statement without an argument.\n\n\\item[incremental development:]  A program development plan intended to\navoid debugging by adding and testing only\na small amount of code at a time.\n\n\\item[scaffolding:]  Code that is used during program development but is\nnot part of the final version.\n\n\\item[guardian:]  A condition that checks for and handles circumstances that\nmight cause an error.\n\n\\index{temporary variable}\n\\index{variable!temporary}\n\\index{return value}\n\\index{dead code}\n\\index{None}\n\\index{incremental development}\n\\index{scaffolding}\n\\index{guardian}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c1505c31-0d44-4e42-964c-1889324dc33b": {"__data__": {"id_": "c1505c31-0d44-4e42-964c-1889324dc33b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "3": {"node_id": "bc137aa3-66e7-417d-951c-5d12b6ca21e9", "node_type": null, "metadata": {}, "hash": "78704f05722c95e6173a791658398749b63ca2e032a997e562bbd45654cb6bc4"}}, "hash": "3b29f95d26e4bc8cf9efb6b7e6c20614ba0ebdb05f1ea4ddf221381fc1d8323a", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{Iteration}\n\\index{iteration}\n\n\n\\section{Multiple assignment}\n\\index{assignment}\n\\index{statement!assignment}\n\\index{multiple assignment}\n\nAs you may have discovered, it is legal to\nmake more than one assignment to the same variable.  A\nnew assignment makes an existing variable refer to a new\nvalue (and stop referring to the old value).\n\n\\beforeverb\n\\begin{verbatim}\nbruce = 5\nprint bruce,\nbruce = 7\nprint bruce\n\\end{verbatim}\n\\afterverb\n%\nThe output of this program is {\\tt 5 7}, because the first time\n{\\tt bruce} is printed, his value is 5, and the second time, his\nvalue is 7.  The\ncomma at the end of the first {\\tt print} statement suppresses\nthe newline after the output, which is why both outputs\nappear on the same line.\n\nHere is what {\\bf multiple assignment} looks like in a state diagram:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/assign2.eps}}\n\\afterfig\n\nWith multiple assignment it is especially important to distinguish\nbetween an assignment operation and a statement of equality.  Because\nPython uses the equal sign ({\\tt =}) for assignment, it is tempting to\ninterpret a statement like {\\tt a = b} as a statement of equality. It\nis not!\n\nFirst, equality is commutative and assignment is not.  For\nexample, in mathematics, if $a = 7$ then $7 = a$.  But in Python, the\nstatement {\\tt a = 7} is legal and {\\tt 7 = a} is not.\n\nFurthermore, in mathematics, a statement of equality is always true.\nIf $a = b$ now, then $a$ will always equal $b$.  In Python, an\nassignment statement can make two variables equal, but they don't have\nto stay that way:\n\n\\beforeverb\n\\begin{verbatim}\na = 5\nb = a    # a and b are now equal\na = 3    # a and b are no longer equal\n\\end{verbatim}\n\\afterverb\n%\nThe third line changes the value of {\\tt a} but does not change the\nvalue of {\\tt b}, so they are no longer equal. (In some\nprogramming languages, a different symbol is used for assignment,\nsuch as {\\tt <-} or {\\tt :=}, to avoid confusion.)\n\nAlthough multiple assignment is frequently helpful, you should use it\nwith caution.  If the values of variables change frequently, it can\nmake the code difficult to read and debug.\n\n\n\\section{The {\\tt while} statement}\n\\index{while statement}\n\\index{statement!while}\n\\index{loop!while}\n\\index{iteration}\n\nComputers are often used to automate repetitive tasks.  Repeating\nidentical or similar tasks without making errors is something that\ncomputers do well and people do poorly.\n\nWe have seen two programs, {\\tt nLines} and {\\tt countdown}, that use\nrecursion to perform repetition, which is also called {\\bf iteration}.\nBecause iteration is so common, Python provides several language\nfeatures to make it easier.  The first feature we are going to look\nat is the {\\tt while} statement.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bc137aa3-66e7-417d-951c-5d12b6ca21e9": {"__data__": {"id_": "bc137aa3-66e7-417d-951c-5d12b6ca21e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "c1505c31-0d44-4e42-964c-1889324dc33b", "node_type": null, "metadata": {}, "hash": "3b29f95d26e4bc8cf9efb6b7e6c20614ba0ebdb05f1ea4ddf221381fc1d8323a"}, "3": {"node_id": "b5804993-458b-4b01-b13c-ad4cb9ea1c30", "node_type": null, "metadata": {}, "hash": "91f5a8a93bc4930ee0fed4741ede2f265ddef8d3e179b24a4027f639d08c956e"}}, "hash": "78704f05722c95e6173a791658398749b63ca2e032a997e562bbd45654cb6bc4", "text": "The first feature we are going to look\nat is the {\\tt while} statement.\n\nHere is what {\\tt countdown} looks like with a \n{\\tt while} statement:\n\n\\beforeverb\n\\begin{verbatim}\ndef countdown(n):\n  while n > 0:\n    print n\n    n = n-1\n  print \"Blastoff!\"\n\\end{verbatim}\n\\afterverb\n%\nSince we removed the recursive call, this function is not\nrecursive.\n\nYou can almost read the {\\tt while} statement as if it were English.\nIt means, ``While {\\tt n} is greater than 0, continue\ndisplaying the value of {\\tt n} and then reducing the value of\n{\\tt n} by 1.  When you get to 0, display the word {\\tt Blastoff!}''\n\nMore formally, here is the flow of execution for a {\\tt while} statement:\n\n\\begin{enumerate}\n\n\\item Evaluate the condition, yielding {\\tt 0} or {\\tt 1}.\n\n\\item If the condition is false (0), exit the {\\tt while} statement\nand continue execution at the next statement.\n\n\\item If the condition is true (1), execute each of the statements in the\nbody and then go back to step 1.\n\n\\end{enumerate}\n\nThe body consists of all of the statements below the header\nwith the same indentation.\n\nThis type of flow is called a {\\bf loop} because the third step\nloops back around to the top.  Notice that if the condition is false\nthe first time through the loop, the statements inside the loop are\nnever executed.\n\n\\index{condition}\n\\index{loop}\n\\index{loop!body}\n\\index{body!loop}\n\\index{infinite loop}\n\\index{loop!infinite}\n\nThe body of the loop should change the value of one or more variables\nso that eventually the condition becomes false and the loop\nterminates.  Otherwise the loop will repeat forever, which is called\nan {\\bf infinite loop}.  An endless source of amusement for computer\nscientists is the observation that the directions on shampoo,\n``Lather, rinse, repeat,'' are an infinite loop.\n\nIn the case of {\\tt countdown}, we can prove that the loop\nterminates because we know that the value of {\\tt n} is finite, and we\ncan see that the value of {\\tt n} gets smaller each time through the\nloop, so eventually we have to get to 0.  In other\ncases, it is not so easy to tell:\n\n\\beforeverb\n\\begin{verbatim}\ndef sequence(n):\n  while n != 1:\n    print n,\n    if n%2 == 0:        # n is even\n      n = n/2\n    else:               # n is odd\n      n = n*3+1\n\\end{verbatim}\n\\afterverb\n%\nThe condition for this loop is {\\tt n != 1}, so the loop will continue until\n{\\tt n} is {\\tt 1}, which will make the condition false.\n\nEach time through the loop, the program outputs the value of {\\tt n}\nand then checks whether it is even or odd.  If it is even, the value\nof {\\tt n} is divided by 2.  If it is odd, the value is replaced by\n{\\tt n*3+1}. For example, if the starting value (the argument passed\nto {\\tt sequence}) is 3, the resulting sequence is 3, 10, 5, 16, 8, 4, 2, 1.\n\nSince {\\tt n} sometimes increases and sometimes decreases, there is no\nobvious proof that {\\tt n} will ever reach 1, or that the program\nterminates.  For some particular values of {\\tt n}, we can prove\ntermination.  For example, if the starting value is a power of two,\nthen the value of {\\tt n} will be even each time through the loop\nuntil it reaches 1. The previous example ends with such a sequence,\nstarting with 16.\n\nParticular values aside, the interesting question is whether we can\nprove that this program terminates for {\\em all positive values} of {\\tt n}.\nSo far, no one has been able to prove it {\\em or} disprove it!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b5804993-458b-4b01-b13c-ad4cb9ea1c30": {"__data__": {"id_": "b5804993-458b-4b01-b13c-ad4cb9ea1c30", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "bc137aa3-66e7-417d-951c-5d12b6ca21e9", "node_type": null, "metadata": {}, "hash": "78704f05722c95e6173a791658398749b63ca2e032a997e562bbd45654cb6bc4"}, "3": {"node_id": "b7cf44ff-494b-4b14-90d2-f358a2dbea32", "node_type": null, "metadata": {}, "hash": "3fb09aa26d0f69f30389e5277d8946c6202b8bd44e3c29b0b228f9b5f057b18a"}}, "hash": "91f5a8a93bc4930ee0fed4741ede2f265ddef8d3e179b24a4027f639d08c956e", "text": "So far, no one has been able to prove it {\\em or} disprove it!\n\n\\begin{quote}\n{\\em As an exercise, rewrite the function {\\tt nLines} from\nSection~\\ref{recursion} using iteration instead of recursion.}\n\\end{quote}\n\n\n\\section{Tables}\n\\label{tables}\n\\index{table}\n\\index{logarithm}\n\nOne of the things loops are good for is generating tabular data.\nBefore computers were readily available, people had to calculate\nlogarithms, sines and cosines, and other mathematical functions\nby hand.  To make that easier, mathematics books contained long tables\nlisting the values of these functions.  Creating the tables was\nslow and boring, and they tended to be full of errors.\n\nWhen computers appeared on the scene, one of the initial reactions\nwas, ``This is great!  We can use the computers to generate the tables,\nso there will be no errors.'' That turned out to be true (mostly) but\nshortsighted.  Soon thereafter, computers and calculators were so\npervasive that the tables became obsolete.\n\nWell, almost.  For some operations, computers use\ntables of values to get an approximate answer and then perform\ncomputations to improve the approximation.  In some cases, there have\nbeen errors in the underlying tables, most famously in the table the\nIntel Pentium used to perform floating-point division.\n\n\\index{Intel}\n\\index{Pentium}\n\nAlthough a log table is not as useful as it once was, it still makes\na good example of iteration.  The following program outputs a sequence\nof values in the left column and their logarithms in the right column:\n\n\\beforeverb\n\\begin{verbatim}\nx = 1.0\nwhile x < 10.0:\n  print x, '\\t', math.log(x)\n  x = x + 1.0\n\\end{verbatim}\n\\afterverb\n%\nThe string \n\\verb+'\\t'+ represents a {\\bf tab}\ncharacter.\n\nAs characters and strings are displayed on the screen,\nan invisible marker called the {\\bf cursor} keeps track of\nwhere the next character will go.  After a {\\tt print} statement, the\ncursor normally goes to the beginning of the next line.\n\nThe tab character shifts the cursor to the right until it\nreaches one of the tab stops.  Tabs are useful for making columns of\ntext line up, as in the output of the previous program:\n\n\\beforeverb\n\\begin{verbatim}\n1.0     0.0\n2.0     0.69314718056\n3.0     1.09861228867\n4.0     1.38629436112\n5.0     1.60943791243\n6.0     1.79175946923\n7.0     1.94591014906\n8.0     2.07944154168\n9.0     2.19722457734\n\\end{verbatim}\n\\afterverb\n%\nIf these values seem odd, remember that the {\\tt log} function uses\nbase {\\tt e}. Since powers of two are so important in computer\nscience, we often want to find logarithms with respect to base 2.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b7cf44ff-494b-4b14-90d2-f358a2dbea32": {"__data__": {"id_": "b7cf44ff-494b-4b14-90d2-f358a2dbea32", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "b5804993-458b-4b01-b13c-ad4cb9ea1c30", "node_type": null, "metadata": {}, "hash": "91f5a8a93bc4930ee0fed4741ede2f265ddef8d3e179b24a4027f639d08c956e"}, "3": {"node_id": "3a60dc4d-a8c5-4b8a-8389-dc972fdab765", "node_type": null, "metadata": {}, "hash": "527392256c90d1aea5202f9244de0e50e3b03fb499c7abe2297d51e53f0e96d3"}}, "hash": "3fb09aa26d0f69f30389e5277d8946c6202b8bd44e3c29b0b228f9b5f057b18a", "text": "To\ndo that, we can use the following formula:\n\n\\begin{displaymath}\n\\log_2 x = \\frac {\\log_e x}{\\log_e 2}\n\\end{displaymath}\n\nChanging the output statement to:\n\n\\beforeverb\n\\begin{verbatim}\n   print x, '\\t',  math.log(x)/math.log(2.0)\n\\end{verbatim}\n\\afterverb\n%\nyields:\n\n\\beforeverb\n\\begin{verbatim}\n1.0     0.0\n2.0     1.0\n3.0     1.58496250072\n4.0     2.0\n5.0     2.32192809489\n6.0     2.58496250072\n7.0     2.80735492206\n8.0     3.0\n9.0     3.16992500144\n\\end{verbatim}\n\\afterverb\n%\nWe can see that 1, 2, 4, and 8 are powers of two because their\nlogarithms base 2 are round numbers.  If we wanted to find the\nlogarithms of other powers of two, we could modify the program like\nthis:\n\n\\beforeverb\n\\begin{verbatim}\nx = 1.0\nwhile x < 100.0:\n  print x, '\\t', math.log(x)/math.log(2.0)\n  x = x * 2.0\n\\end{verbatim}\n\\afterverb\n%\nNow instead of adding something to {\\tt x} each time through the loop, which\nyields an arithmetic sequence, we multiply {\\tt x} by something, yielding a\ngeometric sequence.  The result is:\n\n\\index{arithmetic sequence}\n\\index{geometric sequence}\n\n\\beforeverb\n\\begin{verbatim}\n1.0     0.0\n2.0     1.0\n4.0     2.0\n8.0     3.0\n16.0    4.0\n32.0    5.0\n64.0    6.0\n\\end{verbatim}\n\\afterverb\n%\nBecause of the tab characters between the columns, the position of the\nsecond column does not depend on the number of digits in the first\ncolumn.\n\nLogarithm tables may not be useful any more, but for computer\nscientists, knowing the powers of two is!\n\n\\begin{quote}\n{\\em As an exercise, modify this program so that it outputs the powers\nof two up to 65,536 (that's $2^{16}$).  Print it out and memorize it.}\n\\end{quote}\n\n\\index{escape sequence}\n\nThe backslash character in \\verb+'\\t'+ indicates the\nbeginning of an {\\bf escape sequence}.  Escape sequences\nare used to represent invisible characters like\ntabs and newlines.  The sequence \\verb+\\n+ represents a newline.\n\nAn escape sequence can appear\nanywhere in a string; in the example, the tab escape\nsequence is the only thing in the string.\n\nHow do you think you represent a backslash in a string?\n\n\\begin{quote}\n{\\em As an exercise, write a single string that\n\n\\beforeverb\n\\begin{verbatim}\nproduces\n        this\n                output.\n\\end{verbatim}\n\\afterverb\n\n}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3a60dc4d-a8c5-4b8a-8389-dc972fdab765": {"__data__": {"id_": "3a60dc4d-a8c5-4b8a-8389-dc972fdab765", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "b7cf44ff-494b-4b14-90d2-f358a2dbea32", "node_type": null, "metadata": {}, "hash": "3fb09aa26d0f69f30389e5277d8946c6202b8bd44e3c29b0b228f9b5f057b18a"}, "3": {"node_id": "655b870a-ed3a-476f-a19f-b05285203802", "node_type": null, "metadata": {}, "hash": "39973f7aafae1fff0fdbc03b503091613c88da708c667eae48d682f384283f64"}}, "hash": "527392256c90d1aea5202f9244de0e50e3b03fb499c7abe2297d51e53f0e96d3", "text": "\\end{verbatim}\n\\afterverb\n\n}\n\\end{quote}\n\n\n\\section{Two-dimensional tables}\n\\index{table!two-dimensional}\n\nA two-dimensional table is a table where you\nread the value at the intersection of a row and a column.  A\nmultiplication table is a good example.\nLet's say you want to print a multiplication table for the values\nfrom 1 to 6.\n\nA good way to start is to write a loop that prints the multiples of\n2, all on one line:\n\n\\beforeverb\n\\begin{verbatim}\ni = 1\nwhile i <= 6:\n  print 2*i, '   ',\n  i = i + 1\nprint\n\\end{verbatim}\n\\afterverb\n%\nThe first line initializes a variable named {\\tt i}, which acts as a\ncounter or {\\bf loop variable}.  As the loop executes, the value of\n{\\tt i} increases from 1 to 6.  When {\\tt i} is 7, the loop\nterminates.  Each time through the loop, it displays the value of {\\tt\n2*i}, followed by three spaces.  \n\nAgain, the comma in the {\\tt print} statement suppresses the newline.\nAfter the loop completes, the second {\\tt print} statement starts a\nnew line.\n\nThe output of the program is:\n\n\\beforeverb\n\\begin{verbatim}\n2      4      6      8      10     12\n\\end{verbatim}\n\\afterverb\n%\nSo far, so good. The next step is to {\\bf encapsulate} and {\\bf generalize}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "655b870a-ed3a-476f-a19f-b05285203802": {"__data__": {"id_": "655b870a-ed3a-476f-a19f-b05285203802", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "3a60dc4d-a8c5-4b8a-8389-dc972fdab765", "node_type": null, "metadata": {}, "hash": "527392256c90d1aea5202f9244de0e50e3b03fb499c7abe2297d51e53f0e96d3"}, "3": {"node_id": "6e24f274-bc98-41ba-bba6-1275248af13c", "node_type": null, "metadata": {}, "hash": "70b574ba8f109cf968e93f0cdbf9af4c97ea13b67350193080cc1b86be104d66"}}, "hash": "39973f7aafae1fff0fdbc03b503091613c88da708c667eae48d682f384283f64", "text": "\\section{Encapsulation and generalization}\n\\label{encapsulation}\n\\index{encapsulation}\n\\index{generalization}\n\\index{program development!encapsulation}\n\\index{program development!generalization}\n\nEncapsulation is the process of wrapping a piece of code in a\nfunction, allowing you to take advantage of all the things functions\nare good for.  You have seen two examples of encapsulation:\n{\\tt printParity} in Section~\\ref{alternative execution}; and\n{\\tt isDivisible} in Section~\\ref{boolean}.\n\nGeneralization means taking something specific, such as printing the\nmultiples of 2, and making it more general, such as printing the\nmultiples of any integer.\n\nThis function encapsulates the previous loop and\ngeneralizes it to print multiples of {\\tt n}:\n\n\\beforeverb\n\\begin{verbatim}\ndef printMultiples(n):\n  i = 1\n  while i <= 6:\n    print n*i, '\\t',\n    i = i + 1\n  print\n\\end{verbatim}\n\\afterverb\n%\nTo encapsulate, all we had to do was add the first line, which\ndeclares the name of the function and the parameter list.  To\ngeneralize, all we had to do was replace the value 2 with the\nparameter {\\tt n}.\n\nIf we call this function with the argument 2, we get the same output as\nbefore.  With the argument 3, the output is:\n\n\\beforeverb\n\\begin{verbatim}\n3      6      9      12     15     18\n\\end{verbatim}\n\\afterverb\n%\nWith the argument 4, the output is:\n\n\\beforeverb\n\\begin{verbatim}\n4      8      12     16     20     24\n\\end{verbatim}\n\\afterverb\n%\nBy now you can probably guess how to print a multiplication table---by\ncalling {\\tt printMultiples} repeatedly with different arguments.  In\nfact, we can use another loop:\n\n\\beforeverb\n\\begin{verbatim}\ni = 1\nwhile i <= 6:\n  printMultiples(i)\n  i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nNotice how similar this loop is to the one inside\n{\\tt printMultiples}.  All we did was replace the {\\tt print} statement with\na function call.\n\nThe output of this program is a multiplication table:\n\n\\beforeverb\n\\begin{verbatim}\n1      2      3      4      5      6\n2      4      6      8      10     12\n3      6      9      12     15     18\n4      8      12     16     20     24\n5      10     15     20     25     30\n6      12     18     24     30     36\n\\end{verbatim}\n\\afterverb\n%", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6e24f274-bc98-41ba-bba6-1275248af13c": {"__data__": {"id_": "6e24f274-bc98-41ba-bba6-1275248af13c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "655b870a-ed3a-476f-a19f-b05285203802", "node_type": null, "metadata": {}, "hash": "39973f7aafae1fff0fdbc03b503091613c88da708c667eae48d682f384283f64"}, "3": {"node_id": "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70", "node_type": null, "metadata": {}, "hash": "e0d88610c6309454c22e59eee75277fdd3d3bd750de908681b32efb7997ae38d"}}, "hash": "70b574ba8f109cf968e93f0cdbf9af4c97ea13b67350193080cc1b86be104d66", "text": "\\section{More encapsulation}\n\nTo demonstrate encapsulation again, let's take the code from the end of\nSection~\\ref{encapsulation} and wrap it up in a function:\n\n\\beforeverb\n\\begin{verbatim}\ndef printMultTable():\n  i = 1\n  while i <= 6:\n    printMultiples(i)\n    i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nThis process is a common {\\bf development plan}.  We develop code by\nwriting lines of code outside any function, or typing them in to the\ninterpreter.  When we get the code working, we extract it and wrap it\nup in a function.\n\nThis development plan is particularly useful if you don't know, when\nyou start writing, how to divide the program into functions.  This\napproach lets you design as you go along.\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\section{Local variables}\n\\index{variable!local}\n\\index{local variable}\n\nYou might be wondering how we can use the same variable, {\\tt i}, in\nboth {\\tt printMultiples} and {\\tt printMultTable}.  Doesn't it cause\nproblems when one of the functions changes the value of the variable?\n\nThe answer is no, because the {\\tt i} in {\\tt printMultiples} and the\n{\\tt i} in {\\tt printMultTable} are {\\em not} the same variable.\n\nVariables created inside a function definition are local; you can't\naccess a local variable from outside its ``home'' function.  That\nmeans you are free to have multiple variables with the same name as\nlong as they are not in the same function.\n\nThe stack diagram for this program shows that the two\nvariables named {\\tt i} are not the same variable.  They can refer to\ndifferent values, and changing one does not affect the other.\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/stack4.eps}}\n\\afterfig\n\nThe value of {\\tt i} in {\\tt printMultTable} goes from 1 to 6.  In the\ndiagram it happens to be 3.  The next time through the loop it will\nbe 4.  Each time through the loop, {\\tt printMultTable} calls\n{\\tt printMultiples} with the current value of {\\tt i} as an\nargument.  That value gets assigned to the parameter {\\tt n}.\n\nInside {\\tt printMultiples}, the value of {\\tt i} goes from\n1 to 6.  In the diagram, it happens to be 2.  Changing this variable\nhas no effect on the value of {\\tt i} in {\\tt printMultTable}.\n\nIt is common and perfectly legal to have different local variables\nwith the same name.  In particular, names like {\\tt i} and {\\tt j} are\nused frequently as loop variables.  If you avoid\nusing them in one function just because you used them somewhere else,\nyou will probably make the program harder to read.\n\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\section{More generalization}\n\nAs another example of generalization, imagine you wanted a program\nthat would print a multiplication table of any size, not just the\nsix-by-six table. You could add a parameter to {\\tt printMultTable}:\n\n\\beforeverb\n\\begin{verbatim}\ndef printMultTable(high):\n  i = 1\n  while i <= high:\n    printMultiples(i)\n    i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nWe replaced the value 6 with the parameter {\\tt high}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70": {"__data__": {"id_": "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "6e24f274-bc98-41ba-bba6-1275248af13c", "node_type": null, "metadata": {}, "hash": "70b574ba8f109cf968e93f0cdbf9af4c97ea13b67350193080cc1b86be104d66"}, "3": {"node_id": "45053040-3fa3-4bb5-aa00-7a11811e4098", "node_type": null, "metadata": {}, "hash": "c998bd41bd90fb5669f9772e811d2b9f396d3813d744700ccc020a925464a3ff"}}, "hash": "e0d88610c6309454c22e59eee75277fdd3d3bd750de908681b32efb7997ae38d", "text": "If we call\n{\\tt printMultTable} with the argument 7, it displays:\n\n\\beforeverb\n\\begin{verbatim}\n1      2      3      4      5      6\n2      4      6      8      10     12\n3      6      9      12     15     18\n4      8      12     16     20     24\n5      10     15     20     25     30\n6      12     18     24     30     36\n7      14     21     28     35     42\n\\end{verbatim}\n\\afterverb\n%\nThis is fine, except that we probably want the table to be\nsquare---with the same number of rows and columns.  To do that, we\nadd another parameter to {\\tt printMultiples} to specify how many\ncolumns the table should have.\n\nJust to be annoying, we call this parameter {\\tt high}, demonstrating\nthat different functions can have parameters with the same name (just like\nlocal variables).  Here's the whole program:\n\n\\beforeverb\n\\begin{verbatim}\ndef printMultiples(n, high):\n  i = 1\n  while i <= high:\n    print n*i, '\\t',\n    i = i + 1\n  print\n\ndef printMultTable(high):\n  i = 1\n  while i <= high:\n    printMultiples(i, high)\n    i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nNotice that when we added a new parameter, we had to change the first line\nof the function (the function heading), and we also had to change the place\nwhere the function is called in {\\tt printMultTable}.\n\nAs expected, this program generates a square seven-by-seven table:\n\n\\beforeverb\n\\begin{verbatim}\n1      2      3      4      5      6      7\n2      4      6      8      10     12     14\n3      6      9      12     15     18     21\n4      8      12     16     20     24     28\n5      10     15     20     25     30     35\n6      12     18     24     30     36     42\n7      14     21     28     35     42     49\n\\end{verbatim}\n\\afterverb\n%\nWhen you generalize a function appropriately, you often get\na program with capabilities you didn't plan.  For\nexample, you might\nnotice that, because $ab = ba$,\nall the entries in the table appear twice.  You could save ink by printing\nonly half the table.  To do that, you only have to change one line of\n{\\tt printMultTable}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "45053040-3fa3-4bb5-aa00-7a11811e4098": {"__data__": {"id_": "45053040-3fa3-4bb5-aa00-7a11811e4098", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c", "node_type": null, "metadata": {}, "hash": "72342a9f8006c0bfab11df9ad85491e74e7261df4ab69348b5ffada9e9e01e09"}, "2": {"node_id": "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70", "node_type": null, "metadata": {}, "hash": "e0d88610c6309454c22e59eee75277fdd3d3bd750de908681b32efb7997ae38d"}}, "hash": "c998bd41bd90fb5669f9772e811d2b9f396d3813d744700ccc020a925464a3ff", "text": "Change\n\n\\beforeverb\n\\begin{verbatim}\n    printMultiples(i, high)\n\\end{verbatim}\n\\afterverb\n%\nto\n\n\\beforeverb\n\\begin{verbatim}\n    printMultiples(i, i)\n\\end{verbatim}\n\\afterverb\n%\nand you get\n\n\\beforeverb\n\\begin{verbatim}\n1\n2      4\n3      6      9\n4      8      12     16\n5      10     15     20     25\n6      12     18     24     30     36\n7      14     21     28     35     42     49\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, trace the execution of this version of\n{\\tt printMultTable} and figure out how it works.}\n\\end{quote}\n\n\n\\section{Functions}\n\\index{function}\n\nA few times now, we have mentioned ``all the things functions are good\nfor.''  By now, you might be wondering what exactly those things are.\nHere are some of them:\n\n\\begin{itemize}\n\n\\item Giving a name to a sequence of statements makes your program\neasier to read and debug.\n\n\\item Dividing a long program into functions allows you to separate parts of\nthe program, debug them in isolation, and then compose them into a whole.\n\n\\item Functions facilitate both recursion and iteration.\n\n\\item Well-designed functions are often useful for many programs.  Once you\nwrite and debug one, you can reuse it.\n\n\\end{itemize}\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[multiple assignment:] Making more than one assignment to the same\nvariable during the execution of a program.\n\n\\item[iteration:] Repeated execution of a set of statements using\neither a recursive function call or a loop.\n\n\\item[loop:] A statement or group of statements that execute repeatedly until\na terminating condition is satisfied.\n\n\\item[infinite loop:] A loop in which the terminating condition is\nnever satisfied.\n\n\\item[body:] The statements inside a loop.\n\n\\item[loop variable:] A variable used as part of the terminating\ncondition of a loop.\n\n\\item[tab:] A special character that causes the cursor to move to\nthe next tab stop on the current line.\n\n\\item[newline:] A special character that causes the cursor to move to the\nbeginning of the next line.\n\n\\item[cursor:] An invisible marker that keeps track of where the next\ncharacter will be printed.\n\n\\item[escape sequence:] An escape character ($\\backslash$) followed by one or\nmore printable characters used to designate a nonprintable character.\n\n\\item[encapsulate:] To divide a large complex program into components\n(like functions) and isolate the components from each other (by\nusing local variables, for example).\n\n\\item[generalize:] To replace something unnecessarily specific (like a constant\nvalue) with something appropriately general (like a variable or parameter).\nGeneralization makes code more versatile, more likely to be reused, and\nsometimes even easier to write.\n\n\\item[development plan:] A process for developing a program. In this chapter,\nwe demonstrated a style of development based on developing code to do\nsimple, specific things and then encapsulating and generalizing.\n\n\\index{multiple assignment}\n\\index{assignment!multiple }\n\\index{iteration}\n\\index{loop!body}\n\\index{loop}\n\\index{infinite loop}\n\\index{escape sequence}\n\\index{cursor}\n\\index{tab}\n\\index{newline}\n\\index{loop variable}\n\\index{encapsulate}\n\\index{generalize}\n\\index{development plan}\n\\index{program!development}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "959cccdc-8990-470a-a8e8-64ef3ca824bd": {"__data__": {"id_": "959cccdc-8990-470a-a8e8-64ef3ca824bd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "3": {"node_id": "3c0babf6-7299-46e3-8b25-a99533bce746", "node_type": null, "metadata": {}, "hash": "735d0bcca2a9e6bf0e0865ac194f1224cd14bec22dcd15c00403a1b97ee91d77"}}, "hash": "6d01005fba986675f0fdb396a209a5f9f6f8542d9a66c6c83d091fba1edbe052", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\\chapter{Strings}\n\\label{strings}\n\n\n\\section{A compound data type}\n\\index{compound data type}\n\\index{data type!compound}\n\nSo far we have seen three types: {\\tt int}, {\\tt float}, and {\\tt\nstring}.  Strings are qualitatively different from the\nother two because they are made up of smaller pieces---characters.\n\n\\index{character}\n\nTypes that comprise smaller pieces are called {\\bf compound data\ntypes}.  Depending on what we are doing, we may want to treat a\ncompound data type as a single thing, or we may want to access its\nparts.  This ambiguity is useful.\n\n\\index{bracket operator}\n\\index{operator!bracket}\n\nThe bracket operator selects a single character from a string.\n\n\\beforeverb\n\\begin{verbatim}\n>>> fruit = \"banana\"\n>>> letter = fruit[1]\n>>> print letter\n\\end{verbatim}\n\\afterverb\n%\nThe expression {\\tt fruit[1]} selects character number 1 from {\\tt\nfruit}.  The variable {\\tt letter} refers to the result.  When we\ndisplay {\\tt letter}, we get a surprise:\n\n\\beforeverb\n\\begin{verbatim}\na\n\\end{verbatim}\n\\afterverb\n%\nThe first letter of {\\tt \"banana\"} is not {\\tt a}.  Unless you are a\ncomputer scientist.  In that case you should think of the expression in\nbrackets as an offset from the beginning of the string, and the offset\nof the first letter is zero.  So {\\tt b} is the 0th letter\n(``zero-eth'') of {\\tt \"banana\"}, {\\tt a} is the 1th letter\n(``one-eth''), and {\\tt n} is the 2th (``two-eth'') letter.\n\nTo get the first letter of a string, you just put 0, or\nany expression with the value 0, in the brackets:\n\n\\beforeverb\n\\begin{verbatim}\n>>> letter = fruit[0]\n>>> print letter\nb\n\\end{verbatim}\n\\afterverb\n%\nThe expression in brackets is called an {\\bf index}.  An index\nspecifies a member of an ordered set, in this case the set of\ncharacters in the string.  The index {\\em indicates} which one you\nwant, hence the name.  It can be any integer expression.\n\n\\index{index}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3c0babf6-7299-46e3-8b25-a99533bce746": {"__data__": {"id_": "3c0babf6-7299-46e3-8b25-a99533bce746", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "959cccdc-8990-470a-a8e8-64ef3ca824bd", "node_type": null, "metadata": {}, "hash": "6d01005fba986675f0fdb396a209a5f9f6f8542d9a66c6c83d091fba1edbe052"}, "3": {"node_id": "80c4a719-ec82-4874-b183-7aef4ca5dceb", "node_type": null, "metadata": {}, "hash": "c14255fc7cb2121cc92a304d83326b4fc20ad2c30728da8a5af136f17b42a9df"}}, "hash": "735d0bcca2a9e6bf0e0865ac194f1224cd14bec22dcd15c00403a1b97ee91d77", "text": "\\section{Length}\n\\index{string!length}\n\\index{runtime error}\n\nThe {\\tt len} function returns the number of characters in a string:\n\n\\beforeverb\n\\begin{verbatim}\n>>> fruit = \"banana\"\n>>> len(fruit)\n6\n\\end{verbatim}\n\\afterverb\n%\nTo get the last letter of a string, you might be tempted to try something\nlike this:\n\n\\beforeverb\n\\begin{verbatim}\nlength = len(fruit)\nlast = fruit[length]       # ERROR!\n\\end{verbatim}\n\\afterverb\n%\nThat won't work. It causes the runtime error {\\tt IndexError: string\nindex out of range}.  The reason is that there is no 6th letter in\n{\\tt \"banana\"}.  Since we started counting at zero, the six letters\nare numbered 0 to 5.  To get the last character, we have to subtract\n1 from {\\tt length}:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\nlength = len(fruit)\nlast = fruit[length-1]\n\\end{verbatim}\n\\afterverb\n%\nAlternatively, we can use negative indices, which count backward from the end\nof the string.  The expression {\\tt fruit[-1]} yields the last letter,\n{\\tt fruit[-2]} yields the second to last, and so on.\n\n\\index{index!negative}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "80c4a719-ec82-4874-b183-7aef4ca5dceb": {"__data__": {"id_": "80c4a719-ec82-4874-b183-7aef4ca5dceb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "3c0babf6-7299-46e3-8b25-a99533bce746", "node_type": null, "metadata": {}, "hash": "735d0bcca2a9e6bf0e0865ac194f1224cd14bec22dcd15c00403a1b97ee91d77"}, "3": {"node_id": "e3602a25-424c-4f8a-9898-c34357bd7420", "node_type": null, "metadata": {}, "hash": "45efb16a6a470e7975752ab12fb92c62e1e978f426a22a113367ee70fe64c150"}}, "hash": "c14255fc7cb2121cc92a304d83326b4fc20ad2c30728da8a5af136f17b42a9df", "text": "\\section{Traversal and the {\\tt for} loop}\n\\label{for}\n\\index{traversal}\n\\index{loop!traversal}\n\\index{for loop}\n\\index{loop!for loop}\n\nA lot of computations involve processing a string one character at a\ntime.  Often they start at the beginning, select each character in\nturn, do something to it, and continue until the end.  This pattern of\nprocessing is called a {\\bf traversal}.  One way to encode a traversal\nis with a {\\tt while} statement:\n\n\\adjustpage{2}\n\\beforeverb\n\\begin{verbatim}\nindex = 0\nwhile index < len(fruit):\n  letter = fruit[index]\n  print letter\n  index = index + 1\n\\end{verbatim}\n\\afterverb\n%\nThis loop traverses the string and displays each letter on a line by\nitself.  The loop condition is {\\tt index < len(fruit)}, so\nwhen {\\tt index} is equal to the length of the string, the\ncondition is false, and the body of the loop is not executed.  The\nlast character accessed is the one with the index {\\tt len(fruit)-1},\nwhich is the last character in the string.\n\n\\begin{quote}\n{\\em As an exercise, write a function that takes a string as an argument\nand outputs the letters backward, one per line.}\n\\end{quote}\n\nUsing an index to\ntraverse a set of values is so common that\nPython provides an alternative, simpler syntax---the {\\tt for} loop:\n\n\\beforeverb\n\\begin{verbatim}\nfor char in fruit:\n  print char\n\\end{verbatim}\n\\afterverb\n%\nEach time through the loop, the next character in the string is assigned\nto the variable {\\tt char}.  The loop continues until no characters are\nleft.\n\n\\index{concatenation}\n\\index{abecedarian}\n\\index{McCloskey, Robert}\n\\index{{\\em Make Way for Ducklings}}\n\nThe following example shows how to use concatenation and a {\\tt\nfor} loop to generate an abecedarian series.  ``Abecedarian'' refers\nto a series or list in which the elements appear in alphabetical\norder.  For example, in Robert McCloskey's book {\\em Make Way for\nDucklings}, the names of the ducklings are Jack, Kack, Lack, Mack,\nNack, Ouack, Pack, and Quack.  This loop outputs these names in order:\n\n\\beforeverb\n\\begin{verbatim}\nprefixes = \"JKLMNOPQ\"\nsuffix = \"ack\"\n\nfor letter in prefixes:\n  print letter + suffix\n\\end{verbatim}\n\\afterverb\n%\nThe output of this program is:\n\n\\beforeverb\n\\begin{verbatim}\nJack\nKack\nLack\nMack\nNack\nOack\nPack\nQack\n\\end{verbatim}\n\\afterverb\n%\nOf course, that's not quite right because ``Ouack'' and\n``Quack'' are misspelled.\n\n\\begin{quote}\n{\\em As an exercise, modify the program to fix this error.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e3602a25-424c-4f8a-9898-c34357bd7420": {"__data__": {"id_": "e3602a25-424c-4f8a-9898-c34357bd7420", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "80c4a719-ec82-4874-b183-7aef4ca5dceb", "node_type": null, "metadata": {}, "hash": "c14255fc7cb2121cc92a304d83326b4fc20ad2c30728da8a5af136f17b42a9df"}, "3": {"node_id": "8875d27e-0ca8-4ae5-82bf-284d04df8f36", "node_type": null, "metadata": {}, "hash": "86ea4db9491e6908f37130994adc90bc0b61be3ac33910a2dd967767a690320a"}}, "hash": "45efb16a6a470e7975752ab12fb92c62e1e978f426a22a113367ee70fe64c150", "text": "\\section{String slices}\n\\label{slice}\n\\index{slice}\n\\index{string!slice}\n\nA segment of a string is called a \n{\\bf slice}.  Selecting a slice is similar to\nselecting a character:\n\n\\beforeverb\n\\begin{verbatim}\n>>> s = \"Peter, Paul, and Mary\"\n>>> print s[0:5]\nPeter\n>>> print s[7:11]\nPaul\n>>> print s[17:21]\nMary\n\\end{verbatim}\n\\afterverb\n%\nThe operator {\\tt [n:m]} returns the part of the string from the \n``n-eth'' character to the ``m-eth'' character, including the first but\nexcluding the last.  This behavior is counterintuitive; it makes\nmore sense if you imagine the indices pointing {\\em between} the\ncharacters, as in the following diagram:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/banana.eps}}\n\\afterfig\n\nIf you omit the first index (before the colon), the slice starts at the\nbeginning of the string.  If you omit the second index, the slice goes to the\nend of the string.  Thus:\n\n\\beforeverb\n\\begin{verbatim}\n>>> fruit = \"banana\"\n>>> fruit[:3]\n'ban'\n>>> fruit[3:]\n'ana'\n\\end{verbatim}\n\\afterverb\n%\nWhat do you think {\\tt s[:]} means?\n\n\n\\section{String comparison}\n\\index{string comparison}\n\\index{comparison!string}\n\nThe comparison operators work on\nstrings.  To see if two strings are equal:\n\n\\beforeverb\n\\begin{verbatim}\nif word == \"banana\":\n  print  \"Yes, we have no bananas!\"\n\\end{verbatim}\n\\afterverb\n%\n\\adjustpage{-2}\n\\pagebreak\n\nOther comparison operations are useful for putting words in alphabetical\norder:\n\n\\beforeverb\n\\begin{verbatim}\nif word < \"banana\":\n  print \"Your word,\" + word + \", comes before banana.\"\nelif word > \"banana\":\n  print \"Your word,\" + word + \", comes after banana.\"\nelse:\n  print \"Yes, we have no bananas!\"\n\\end{verbatim}\n\\afterverb\n%\nYou should be aware, though, that Python does not handle upper-\nand lowercase letters the same way that people do.  All the uppercase\nletters come before all the lowercase letters.  As a result:\n\n\\beforeverb\n\\begin{verbatim}\nYour word, Zebra, comes before banana.\n\\end{verbatim}\n\\afterverb\n%\nA common way to address this problem is to convert strings to a standard\nformat, such as all lowercase, before performing the comparison.  A more\ndifficult problem is making the program realize that zebras are not fruit.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8875d27e-0ca8-4ae5-82bf-284d04df8f36": {"__data__": {"id_": "8875d27e-0ca8-4ae5-82bf-284d04df8f36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "e3602a25-424c-4f8a-9898-c34357bd7420", "node_type": null, "metadata": {}, "hash": "45efb16a6a470e7975752ab12fb92c62e1e978f426a22a113367ee70fe64c150"}, "3": {"node_id": "0f8f3308-6725-46c7-84bd-19d9d9f68ceb", "node_type": null, "metadata": {}, "hash": "bfb52c67219bbd387f8057784cb43dfde2c07d3b11dda9a1e596edf573d375fb"}}, "hash": "86ea4db9491e6908f37130994adc90bc0b61be3ac33910a2dd967767a690320a", "text": "\\section{Strings are immutable}\n\\index{mutable}\n\\index{immutable string}\n\\index{string!immutable}\n\nIt is tempting to use the {\\tt []} operator on the left side of an\nassignment, with the intention of changing a character in a string.\nFor example:\n\n\\beforeverb\n\\begin{verbatim}\ngreeting = \"Hello, world!\"\ngreeting[0] = 'J'            # ERROR!\nprint greeting\n\\end{verbatim}\n\\afterverb\n%\nInstead of producing the output {\\tt Jello, world!}, this code\nproduces the runtime error {\\tt TypeError: object doesn't support item\nassignment}.\n\n\\index{runtime error}\n\nStrings are {\\bf immutable}, which means you can't change an\nexisting string.  The best you can do is create a new string\nthat is a variation on the original:\n\n\\beforeverb\n\\begin{verbatim}\ngreeting = \"Hello, world!\"\nnewGreeting = 'J' + greeting[1:]\nprint newGreeting\n\\end{verbatim}\n\\afterverb\n%\nThe solution here is to concatenate a new first letter onto\na slice of {\\tt greeting}.  This operation has no effect on\nthe original string.\n\n\\index{concatenation}\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\section{A {\\tt find} function}\n\\label{find}\n\\index{traversal}\n\\index{eureka traversal}\n\\index{pattern}\n\\index{computational pattern}\n\nWhat does the following function do?\n\n\\beforeverb\n\\begin{verbatim}\ndef find(str, ch):\n  index = 0\n  while index < len(str):\n    if str[index] == ch:\n      return index\n    index = index + 1\n  return -1\n\\end{verbatim}\n\\afterverb\n%\nIn a sense, {\\tt find} is the opposite of the {\\tt []} operator.\nInstead of taking an index and extracting the corresponding character,\nit takes a character and finds the index where that character\nappears.  If the character is not found, the function returns {\\tt\n-1}.\n\nThis is the first example we have seen of a {\\tt return} statement\ninside a loop.\nIf {\\tt str[index] == ch}, the function returns\nimmediately, breaking out of the loop prematurely.\n\nIf the character doesn't appear in the string, then the program\nexits the loop normally and \nreturns {\\tt -1}.\n\nThis pattern of computation is sometimes called a ``eureka'' traversal\nbecause as soon as we find what we are looking for, we can cry\n``Eureka!'' and stop looking.\n\n\\begin{quote}\n{\\em As an exercise, modify the {\\tt find} function so that it has a\nthird parameter, the index in the string where it should start\nlooking.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f8f3308-6725-46c7-84bd-19d9d9f68ceb": {"__data__": {"id_": "0f8f3308-6725-46c7-84bd-19d9d9f68ceb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "8875d27e-0ca8-4ae5-82bf-284d04df8f36", "node_type": null, "metadata": {}, "hash": "86ea4db9491e6908f37130994adc90bc0b61be3ac33910a2dd967767a690320a"}, "3": {"node_id": "eee0cc8b-2935-4cba-b198-f2213e577473", "node_type": null, "metadata": {}, "hash": "f7c431161d8e3cd8c3969c70ce8c4b32e77dc348980850ebd500017d70751227"}}, "hash": "bfb52c67219bbd387f8057784cb43dfde2c07d3b11dda9a1e596edf573d375fb", "text": "\\section{Looping and counting}\n\\label{counter}\n\\index{counter}\n\\index{pattern}\n\nThe following program counts the number of times the letter {\\tt a}\nappears in a string:\n\n\\beforeverb\n\\begin{verbatim}\nfruit = \"banana\"\ncount = 0\nfor char in fruit:\n  if char == 'a':\n    count = count + 1\nprint count\n\\end{verbatim}\n\\afterverb\n%\nThis program demonstrates another pattern of computation called a {\\bf\ncounter}.  The variable {\\tt count} is initialized to 0 and then\nincremented each time an {\\tt a} is found.  (To {\\bf increment} is to\nincrease by one; it is the opposite of {\\bf decrement}, and unrelated\nto ``excrement,'' which is a noun.)  When the loop exits, {\\tt count}\ncontains the result---the total number of {\\tt a}'s.\n\n\\begin{quote}\n{\\em As an exercise, encapsulate this code in a function named {\\tt\ncountLetters}, and generalize it so that it accepts the string and the\nletter as arguments.}\n\\end{quote}\n\n\\begin{quote}\n{\\em As a second exercise, rewrite this function so that instead of\ntraversing the string, it uses the three-parameter version of {\\tt\nfind} from the previous.}\n\\end{quote}\n\n\n\\section{The {\\tt string} module}\n\\index{module}\n\\index{string module}\n\nThe {\\tt string} module contains useful functions that\nmanipulate strings.  As usual, we have to import the module before\nwe can use it:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import string\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt string} module includes a function named {\\tt find} that does\nthe same thing as the function we wrote.  To call it we have to\nspecify the name of the module and the name of the function using dot\nnotation.\n\n\\beforeverb\n\\begin{verbatim}\n>>> fruit = \"banana\"\n>>> index = string.find(fruit, \"a\")\n>>> print index\n1\n\\end{verbatim}\n\\afterverb\n%\nThis example demonstrates one of the benefits of modules---they help\navoid collisions between the names of built-in functions and\nuser-defined functions.  By using dot notation we can specify which\nversion of {\\tt find} we want.\n\nActually, {\\tt string.find} is more general than our version.  First,\nit can find substrings, not just characters:\n\n\\beforeverb\n\\begin{verbatim}\n>>> string.find(\"banana\", \"na\")\n2\n\\end{verbatim}\n\\afterverb\n%\nAlso, it takes an additional argument that specifies the index it\nshould start at:\n\n\\beforeverb\n\\begin{verbatim}\n>>> string.find(\"banana\", \"na\", 3)\n4\n\\end{verbatim}\n\\afterverb\n%\nOr it can take two additional arguments that specify a range\nof indices:\n\n\\beforeverb\n\\begin{verbatim}\n>>> string.find(\"bob\", \"b\", 1, 2)\n-1\n\\end{verbatim}\n\\afterverb\n%\nIn this example, the search fails because the letter {\\em b} does not\nappear in the index range from {\\tt 1} to {\\tt 2} (not including {\\tt\n2}).\n\n\n\\section{Character classification}\n\\label{in}\n\\index{character classification}\n\\index{classification!character}\n\\index{uppercase}\n\\index{lowercase}\n\\index{whitespace}\n\nIt is often helpful to examine a character and test whether it is\nupper- or lowercase, or whether it is a character or a digit.  The\n{\\tt string} module provides several constants that are\nuseful for these purposes.\n\nThe string {\\tt string.lowercase} contains all of the letters that the\nsystem considers to be lowercase.  Similarly, {\\tt string.uppercase}\ncontains all of the uppercase letters.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "eee0cc8b-2935-4cba-b198-f2213e577473": {"__data__": {"id_": "eee0cc8b-2935-4cba-b198-f2213e577473", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "06e73d4b-883b-4bd7-8bf9-7799be07321a", "node_type": null, "metadata": {}, "hash": "0c5f73f43fc1f829f412659fdc54f0ed0987d18025656a1468a60fd1fc328cc7"}, "2": {"node_id": "0f8f3308-6725-46c7-84bd-19d9d9f68ceb", "node_type": null, "metadata": {}, "hash": "bfb52c67219bbd387f8057784cb43dfde2c07d3b11dda9a1e596edf573d375fb"}}, "hash": "f7c431161d8e3cd8c3969c70ce8c4b32e77dc348980850ebd500017d70751227", "text": "Try the following and see what\nyou get:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print string.lowercase\n>>> print string.uppercase\n>>> print string.digits\n\\end{verbatim}\n\\afterverb\n%\nWe can use these constants and {\\tt find} to classify characters. For\nexample, if {\\tt find(lowercase, ch)} returns a value other than {\\tt\n-1}, then {\\tt ch} must be lowercase:\n\n\\beforeverb\n\\begin{verbatim}\ndef isLower(ch):\n  return string.find(string.lowercase, ch) != -1\n\\end{verbatim}\n\\afterverb\n%\nAlternatively, we can take advantage of the {\\tt in} operator, which\ndetermines whether a character appears in a string:\n\n\\beforeverb\n\\begin{verbatim}\ndef isLower(ch):\n  return ch in string.lowercase\n\\end{verbatim}\n\\afterverb\n%\nAs yet another alternative, we can use the comparison operator:\n\n\\beforeverb\n\\begin{verbatim}\ndef isLower(ch):\n  return 'a' <= ch <= 'z'\n\\end{verbatim}\n\\afterverb\n%\nIf {\\tt ch} is between {\\em a} and {\\em z}, it must be a lowercase\nletter.\n\n\\begin{quote}\n{\\em As an exercise, discuss which version of {\\tt isLower} you think\nwill be fastest.  Can you think of other reasons besides speed to\nprefer one or the other?}\n\\end{quote}\n\nAnother constant defined in the {\\tt string} module may\nsurprise you when you print it:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print string.whitespace\n\\end{verbatim}\n\\afterverb\n%\n{\\bf Whitespace} characters move the cursor without printing\nanything.  They create the white space between visible\ncharacters (at least on white paper).  The constant\n{\\tt string.whitespace} contains all the\nwhitespace characters, including\nspace, tab (\\verb+\\t+), and newline\n(\\verb+\\n+).\n\n\\index{string module}\n\\index{module!string}\n\nThere are other useful functions in the {\\tt string} module, but this\nbook isn't intended to be a reference manual.  On the other hand, the\n{\\em Python Library Reference} is.  Along with a wealth of other\ndocumentation, it's available from the Python website, {\\tt\nwww.python.org}.\n\n\\index{{\\em Python Library Reference}}\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[compound data type:] A data type in which the values are made\nup of components, or elements, that are themselves values.\n\n\\item[traverse:] To iterate through the elements of a set,\nperforming a similar operation on each.\n\n\\item[index:] A variable or value used to select a member of an\nordered set, such as a character from a string.\n\n\\item[slice:] A part of a string specified by a range of indices.\n\n\\item[mutable:] A compound data types whose elements can be assigned\nnew values.\n\n\\item[counter:] A variable used to count something, usually initialized\nto zero and then incremented.\n\n\\item[increment:] To increase the value of a variable by one.\n\n\\item[decrement:] To decrease the value of a variable by one.\n\n\\item[whitespace:] Any of the characters that move the cursor without\nprinting visible characters.  The constant\n{\\tt string.whitespace}\ncontains all the white\\-space characters.\n\n\\index{compound data type}\n\\index{traverse}\n\\index{index}\n\\index{slice}\n\\index{mutable}\n\\index{counter}\n\\index{increment}\n\\index{decrement}\n\\index{whitespace}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c82bed89-8f47-4ba3-98c6-40149c08d156": {"__data__": {"id_": "c82bed89-8f47-4ba3-98c6-40149c08d156", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "3": {"node_id": "7fc185be-53f4-469d-8b85-7384546f2dae", "node_type": null, "metadata": {}, "hash": "4cd6de72fb0ca14346c1a9f8b2cc6480e907d94927d42989cc07de5783930cd7"}}, "hash": "7b80c006cacb8d13182073b618e9440bad1e116aa98c9a87c8ff853dca213a9a", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Lists}\n\\index{list}\n\\index{type!list}\n\\index{element}\n\\index{sequence}\n\nA {\\bf list} is an ordered set of values, where each value is\nidentified by an index.  The values that make up a list are\ncalled its {\\bf elements}.  Lists are similar to strings, which are\nordered sets of characters, except that the elements of a list can\nhave any type.  Lists and strings---and other things that behave like\nordered sets---are called {\\bf sequences}.\n\n\n\\section{List values}\n\nThere are several ways to create a new list; the simplest is to\nenclose the elements in square brackets (\\verb+[+ and \\verb+]+):\n\n\\beforeverb\n\\begin{verbatim}\n[10, 20, 30, 40]\n[\"spam\", \"bungee\", \"swallow\"]\n\\end{verbatim}\n\\afterverb\n%\nThe first example is a list of four integers.  The second is a list of\nthree strings.  The elements of a list don't have to be the same type.\nThe following list contains a string, a float, an integer, and\n(mirabile dictu) another list:\n\n\\beforeverb\n\\begin{verbatim}\n[\"hello\", 2.0, 5, [10, 20]]\n\\end{verbatim}\n\\afterverb\n%\nA list within another list is said to be {\\bf nested}.\n\n\\index{list!nested}\n\nLists that contain consecutive integers are common, so Python provides a\nsimple way to create them:\n\n\\beforeverb\n\\begin{verbatim}\n>>> range(1,5)\n[1, 2, 3, 4]\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt range} function takes two arguments and returns a list that\ncontains all the integers from the first to the second, including the\nfirst but not including the second!\n\nThere are two other forms of {\\tt range}.  With a single argument, it\ncreates a list that starts at 0:\n\n\\beforeverb\n\\begin{verbatim}\n>>> range(10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\\end{verbatim}\n\\afterverb\n%\nIf there is a third argument, it specifies the space between\nsuccessive values, which is called the {\\bf step size}.  This example\ncounts from 1 to 10 by steps of 2:\n\n\\beforeverb\n\\begin{verbatim}\n>>> range(1, 10, 2)\n[1, 3, 5, 7, 9]\n\\end{verbatim}\n\\afterverb\n%\nFinally, there is a special list that contains no elements.  It is\ncalled the empty list, and it is denoted {\\tt []}.\n\nWith all these ways to create lists, it would be disappointing if we\ncouldn't assign list values to variables or pass lists as arguments\nto functions.  We can.\n\n\\beforeverb\n\\begin{verbatim}\nvocabulary = [\"ameliorate\", \"castigate\", \"defenestrate\"]\nnumbers = [17, 123]\nempty = []\nprint vocabulary, numbers, empty\n['ameliorate', 'castigate', 'defenestrate'] [17, 123] []\n\\end{verbatim}\n\\afterverb\n%", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7fc185be-53f4-469d-8b85-7384546f2dae": {"__data__": {"id_": "7fc185be-53f4-469d-8b85-7384546f2dae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "c82bed89-8f47-4ba3-98c6-40149c08d156", "node_type": null, "metadata": {}, "hash": "7b80c006cacb8d13182073b618e9440bad1e116aa98c9a87c8ff853dca213a9a"}, "3": {"node_id": "f395dbda-eaef-4363-890a-e136eb12c483", "node_type": null, "metadata": {}, "hash": "7e33ab922458ecd5da7d328afa5afedb030ae07d89ea7c3a670c06a3ab5e278f"}}, "hash": "4cd6de72fb0ca14346c1a9f8b2cc6480e907d94927d42989cc07de5783930cd7", "text": "\\section{Accessing elements}\n\\index{list!element}\n\\index{access}\n\nThe syntax for accessing the elements of a list is the same as the\nsyntax for accessing the characters of a string---the bracket\noperator ({\\tt []}).  The expression inside the brackets\nspecifies the index.  Remember that the indices start at 0:\n\n\\beforeverb\n\\begin{verbatim}\nprint numbers[0]\nnumbers[1] = 5\n\\end{verbatim}\n\\afterverb\n%\nThe bracket operator can appear anywhere in an expression.  When it\nappears on the left side of an assignment, it changes one of the\nelements in the list, so the one-eth element of {\\tt numbers}, which\nused to be 123, is now 5.\n\nAny integer expression can be used as an index:\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers[3-2]\n5\n>>> numbers[1.0]\nTypeError: sequence index must be integer\n\\end{verbatim}\n\\afterverb\n%\nIf you try to read or write an element that does not exist, you\nget a runtime error:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers[2] = 5\nIndexError: list assignment index out of range\n\\end{verbatim}\n\\afterverb\n%\nIf an index has a negative value, it counts backward from the\nend of the list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers[-1]\n5\n>>> numbers[-2]\n17\n>>> numbers[-3]\nIndexError: list index out of range\n\\end{verbatim}\n\\afterverb\n%\n{\\tt numbers[-1]} is the last element of the list, {\\tt numbers[-2]}\nis the second to last, and {\\tt numbers[-3]} doesn't exist.\n\nIt is common to use a loop variable as a list index.\n\n\\beforeverb\n\\begin{verbatim}\nhorsemen = [\"war\", \"famine\", \"pestilence\", \"death\"]\n\ni = 0\nwhile i < 4:\n  print horsemen[i]\n  i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nThis {\\tt while} loop counts from 0 to 4.  When the loop variable\n{\\tt i} is 4, the condition fails and the loop terminates.  So the\nbody of the loop is only executed when {\\tt i} is 0, 1, 2, and 3.\n\nEach time through the loop, the variable {\\tt i} is used as an index\ninto the list, printing the {\\tt i}-eth element.  This pattern of\ncomputation is called a {\\bf list traversal}.\n\n\\index{list!traversal}\n\\index{traversal!list}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f395dbda-eaef-4363-890a-e136eb12c483": {"__data__": {"id_": "f395dbda-eaef-4363-890a-e136eb12c483", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "7fc185be-53f4-469d-8b85-7384546f2dae", "node_type": null, "metadata": {}, "hash": "4cd6de72fb0ca14346c1a9f8b2cc6480e907d94927d42989cc07de5783930cd7"}, "3": {"node_id": "edae333f-d2c1-4fc5-b558-50faf36e419a", "node_type": null, "metadata": {}, "hash": "5839bf742ede3dc1a28ba0a65d602886266d9398291d62e5d0e4d531b121b87a"}}, "hash": "7e33ab922458ecd5da7d328afa5afedb030ae07d89ea7c3a670c06a3ab5e278f", "text": "\\section{List length}\n\\index{length}\n\\index{list!length}\n\nThe function {\\tt len} returns the length of a list.  It is a good\nidea to use this value as the upper bound of a loop instead of a\nconstant.  That way, if the size of the list changes, you won't have\nto go through the program changing all the loops; they will work\ncorrectly for any size list:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\nhorsemen = [\"war\", \"famine\", \"pestilence\", \"death\"]\n\ni = 0\nwhile i < len(horsemen):\n  print horsemen[i]\n  i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nThe last time the body of the loop is executed, {\\tt i} is {\\tt\nlen(horsemen) - 1}, which is the index of the last element.  When {\\tt\ni} is equal to {\\tt len(horsemen)}, the condition fails and the body\nis not executed, which is a good thing, because {\\tt len(horsemen)} is\nnot a legal index.\n\nAlthough a list can contain another list, the nested\nlist still counts as a single element.  The length of this list is\nfour:\n\n\\beforeverb\n\\begin{verbatim}\n['spam!', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, write a loop that traverses the previous\nlist and prints the length of each element.  What happens if\nyou send an integer to {\\tt len}?}\n\\end{quote}\n\n\n\\section{List membership}\n\\index{list!membership}\n\\index{in operator}\n\\index{operator!in}\n\n{\\tt in} is a boolean operator that tests membership in a sequence.\nWe used it in Section~\\ref{in} with strings, but it also works with\nlists and other sequences:\n\n\\beforeverb\n\\begin{verbatim}\n>>> horsemen = ['war', 'famine', 'pestilence', 'death']\n>>> 'pestilence' in horsemen\nTrue\n>>> 'debauchery' in horsemen\nFalse\n\\end{verbatim}\n\\afterverb\n\nSince ``pestilence'' is a member of the {\\tt horsemen} list, the {\\tt in}\noperator returns true.  Since ``debauchery'' is not in the list, {\\tt\nin} returns false.\n\nWe can use the {\\tt not} in combination\nwith {\\tt in} to test whether an element is not a member of a list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> 'debauchery' not in horsemen\nTrue\n\\end{verbatim}\n\\afterverb", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "edae333f-d2c1-4fc5-b558-50faf36e419a": {"__data__": {"id_": "edae333f-d2c1-4fc5-b558-50faf36e419a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "f395dbda-eaef-4363-890a-e136eb12c483", "node_type": null, "metadata": {}, "hash": "7e33ab922458ecd5da7d328afa5afedb030ae07d89ea7c3a670c06a3ab5e278f"}, "3": {"node_id": "359df20b-7775-474e-b3a4-bfbbc0e8a56c", "node_type": null, "metadata": {}, "hash": "d1761e9915c9a111e140e9f096bf7a562e02ff7cc65d2c55aec846c665d2e536"}}, "hash": "5839bf742ede3dc1a28ba0a65d602886266d9398291d62e5d0e4d531b121b87a", "text": "\\section{Lists and {\\tt for} loops}\n\\index{for loop}\n\\index{list!for loop}\n\\index{traversal}\n\nThe {\\tt for} loop we saw in Section~\\ref{for} also works with\nlists.\nThe generalized syntax of a {\\tt for} loop is:\n\n\\beforeverb\n\\begin{verbatim}\nfor VARIABLE in LIST:\n  BODY\n\\end{verbatim}\n\\afterverb\n%\nThis statement is equivalent to:\n\n\\beforeverb\n\\begin{verbatim}\ni = 0\nwhile i < len(LIST):\n  VARIABLE = LIST[i]\n  BODY\n  i = i + 1\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt for} loop is more concise because we can \neliminate the loop variable, {\\tt i}.\nHere is the previous loop written with a {\\tt for} loop.\n\n\\beforeverb\n\\begin{verbatim}\nfor horseman in horsemen:\n  print horseman\n\\end{verbatim}\n\\afterverb\n%\nIt almost reads like English: ``For (every) horseman\nin (the list of) horsemen, print (the name of the) horseman.''\n\nAny list expression can be used in a {\\tt for} loop:\n\n\\beforeverb\n\\begin{verbatim}\nfor number in range(20):\n  if number % 2 == 0:\n    print  number\n\nfor fruit in [\"banana\", \"apple\", \"quince\"]:\n  print \"I like to eat \" + fruit + \"s!\"\n\\end{verbatim}\n\\afterverb\n%\nThe first\nexample prints all the even numbers between zero and nineteen.\nThe second example expresses enthusiasm for various fruits.\n\n\n\n\\section{List operations}\n\\index{list operation}\n\\index{operation!list}\n\nThe {\\tt +} operator concatenates lists:\n\n\\index{concatenation!list}\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = [1, 2, 3]\n>>> b = [4, 5, 6]\n>>> c = a + b\n>>> print c\n[1, 2, 3, 4, 5, 6]\n\\end{verbatim}\n\\afterverb\n%\nSimilarly, the {\\tt *} operator repeats a list a given number of times:\n\n\\index{repetition!list}\n\n\\beforeverb\n\\begin{verbatim}\n>>> [0] * 4\n[0, 0, 0, 0]\n>>> [1, 2, 3] * 3\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n\\end{verbatim}\n\\afterverb\n%\nThe first example repeats {\\tt [0]} four times.  The second example\nrepeats the list {\\tt [1, 2, 3]} three times.\n\n\n\\section{List slices}\n\\index{slice}\n\\index{list!slice}\n\nThe slice operations we saw in Section~\\ref{slice}\nalso work on lists:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> list[1:3]\n['b', 'c']\n>>> list[:4]\n['a', 'b', 'c', 'd']\n>>> list[3:]\n['d', 'e', 'f']\n\\end{verbatim}\n\\afterverb\n%\nIf you omit the first index, the slice starts at the beginning.\nIf you omit the second, the slice goes to the end.  So if you\nomit both, the slice is really a copy of the whole list.\n\n\\beforeverb\n\\begin{verbatim}\n>>> list[:]\n['a', 'b', 'c', 'd', 'e', 'f']\n\\end{verbatim}\n\\afterverb\n%", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "359df20b-7775-474e-b3a4-bfbbc0e8a56c": {"__data__": {"id_": "359df20b-7775-474e-b3a4-bfbbc0e8a56c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "edae333f-d2c1-4fc5-b558-50faf36e419a", "node_type": null, "metadata": {}, "hash": "5839bf742ede3dc1a28ba0a65d602886266d9398291d62e5d0e4d531b121b87a"}, "3": {"node_id": "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e", "node_type": null, "metadata": {}, "hash": "022f4fd091c6ca4b9954bb35645e04c2055850653debe4fec86ccf62a7fec0a3"}}, "hash": "d1761e9915c9a111e140e9f096bf7a562e02ff7cc65d2c55aec846c665d2e536", "text": "\\section{Lists are mutable}\n\\index{mutable!list}\n\\index{list!mutable}\n\nUnlike strings, lists are mutable, which means we can change\ntheir elements.  Using the bracket operator on the left side\nof an assignment, we can update one of the elements:\n\n\\beforeverb\n\\begin{verbatim}\n>>> fruit = [\"banana\", \"apple\", \"quince\"]\n>>> fruit[0] = \"pear\"\n>>> fruit[-1] = \"orange\"\n>>> print fruit\n['pear', 'apple', 'orange']\n\\end{verbatim}\n\\afterverb\n%\nWith the slice operator we can update several elements at once:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> list[1:3] = ['x', 'y']\n>>> print list\n['a', 'x', 'y', 'd', 'e', 'f']\n\\end{verbatim}\n\\afterverb\n%\nWe can also remove elements from a list by assigning the empty list to\nthem:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> list[1:3] = []\n>>> print list\n['a', 'd', 'e', 'f']\n\\end{verbatim}\n\\afterverb\n%\nAnd we can add elements to a list by squeezing them into an empty\nslice at the desired location:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['a', 'd', 'f']\n>>> list[1:1] = ['b', 'c']\n>>> print list\n['a', 'b', 'c', 'd', 'f']\n>>> list[4:4] = ['e']\n>>> print list\n['a', 'b', 'c', 'd', 'e', 'f']\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{List deletion}\n\\index{deletion!list}\n\\index{list deletion}\n\nUsing slices to delete list elements can be\nawkward, and therefore error-prone.  Python provides an alternative\nthat is more readable.\n\n{\\tt del} removes an element from a list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = ['one', 'two', 'three']\n>>> del a[1]\n>>> a\n['one', 'three']\n\\end{verbatim}\n\\afterverb\n%\nAs you might expect, {\\tt del} handles negative indices\nand causes a runtime error if the index is\nout of range.\n\nYou can use a slice as an index for {\\tt del}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> del list[1:5]\n>>> print list\n['a', 'f']\n\\end{verbatim}\n\\afterverb\n%\nAs usual, slices select all the elements up to, but not\nincluding, the second index.\n\n% Had to remove this because append is a method, not a function.\n% The {\\tt append} function adds an element (or a list) to\n% the end of an existing list.\n\n% \\beforeverb\n% \\begin{verbatim}\n% >>> a = ['one', 'two']\n% >>> append (a, 'three')\n% >>> print a\n% ['one', 'two', 'three']\n% \\end{verbatim}\n% \\afterverb", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e": {"__data__": {"id_": "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "359df20b-7775-474e-b3a4-bfbbc0e8a56c", "node_type": null, "metadata": {}, "hash": "d1761e9915c9a111e140e9f096bf7a562e02ff7cc65d2c55aec846c665d2e536"}, "3": {"node_id": "f8a816c2-2836-40c3-b2e7-5e2ea5584eab", "node_type": null, "metadata": {}, "hash": "6523a7be6879e96e94c153c7ad9d95ed19b3df1bc33c36966695347313b8b39d"}}, "hash": "022f4fd091c6ca4b9954bb35645e04c2055850653debe4fec86ccf62a7fec0a3", "text": "\\adjustpage{-2}\n\\pagebreak\n\n\\section{Objects and values}\n\\index{object}\n\\index{value}\n\nIf we execute these assignment statements,\n\n\\beforeverb\n\\begin{verbatim}\na = \"banana\"\nb = \"banana\"\n\\end{verbatim}\n\\afterverb\n%\nwe know that {\\tt a} and {\\tt b} will refer to a\nstring with the letters {\\tt \"banana\"}.  But we can't\ntell whether they point to the {\\em same} string.\n\nThere are two possible states:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/list1.eps}}\n\\afterfig\n\nIn one case, {\\tt a} and {\\tt b} refer to two different things that\nhave the same value.  In the second case, they refer to the same\nthing.  These ``things'' have names---they are called {\\bf objects}.\nAn object is something a variable can refer to.\n\nEvery object has a unique {\\bf identifier}, which we can obtain with\nthe {\\tt id} function.  By printing the identifier of {\\tt a}\nand {\\tt b}, we can tell whether they refer to the same object.\n\n\\beforeverb\n\\begin{verbatim}\n>>> id(a)\n135044008\n>>> id(b)\n135044008\n\\end{verbatim}\n\\afterverb\n%\nIn fact, we get the same identifier twice, which means that\nPython only created one string,\nand both {\\tt a} and {\\tt b} refer to it.\n\nInterestingly, lists behave differently.\nWhen we create two lists, we get two objects:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = [1, 2, 3]\n>>> b = [1, 2, 3]\n>>> id(a)\n135045528\n>>> id(b)\n135041704\n\\end{verbatim}\n\\afterverb\n%\n\\adjustpage{1}\n\nSo the state diagram looks like this:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/list2.eps}}\n\\afterfig\n\n{\\tt a} and {\\tt b} have the same value but do not\nrefer to the same object.\n\n\n\\section{Aliasing}\n\\index{aliasing}\n\\index{reference!aliasing}\n\nSince variables refer to objects, if we assign one\nvariable to another, both variables refer to the same object:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = [1, 2, 3]\n>>> b = a\n\\end{verbatim}\n\\afterverb\n%\nIn this case, the state diagram looks like this:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/list3.eps}}\n\\afterfig\n\nBecause the same list has two different names, {\\tt a} and {\\tt b}, we\nsay that it is {\\bf aliased}.  Changes made with one alias affect\nthe other:\n\n\\beforeverb\n\\begin{verbatim}\n>>> b[0] = 5\n>>> print a\n[5, 2, 3]\n\\end{verbatim}\n\\afterverb\n%\nAlthough this behavior can be useful, it is sometimes unexpected or\nundesirable.  In general, it is safer to avoid aliasing when you\nare working with mutable objects.  Of course, for immutable\nobjects, there's no problem.  That's why Python is free to\nalias strings when it sees an opportunity to economize.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f8a816c2-2836-40c3-b2e7-5e2ea5584eab": {"__data__": {"id_": "f8a816c2-2836-40c3-b2e7-5e2ea5584eab", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e", "node_type": null, "metadata": {}, "hash": "022f4fd091c6ca4b9954bb35645e04c2055850653debe4fec86ccf62a7fec0a3"}, "3": {"node_id": "faba4ae7-0c67-498f-a704-eabd35773868", "node_type": null, "metadata": {}, "hash": "bb5b82e3d02fadef2a20dbbb63ab1ba8646f53735c084188740097225d50b54c"}}, "hash": "6523a7be6879e96e94c153c7ad9d95ed19b3df1bc33c36966695347313b8b39d", "text": "\\section{Cloning lists}\n\\index{list!cloning}\n\\index{cloning}\n\nIf we want to modify a list and also keep a copy of the original, we\nneed to be able to make a copy of the list itself, not just the\nreference.  This process is sometimes called {\\bf cloning}, to avoid the\nambiguity of the word ``copy.''\n\nThe easiest way to clone a list is to use the slice operator:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = [1, 2, 3]\n>>> b = a[:]\n>>> print b\n[1, 2, 3]\n\\end{verbatim}\n\\afterverb\n%\nTaking any slice of {\\tt a} creates a new list.  \nIn this case the slice happens to consist of the whole list.\n\nNow we are free to make changes to {\\tt b} without worrying about {\\tt a}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> b[0] = 5\n>>> print a\n[1, 2, 3]\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, draw a state diagram for {\\tt a} and {\\tt b}\nbefore and after this change.}\n\\end{quote}\n\n\n\n\\section{List parameters}\n\\index{list!as parameter}\n\\index{parameter}\n\\index{parameter!list}\n\nPassing a list as an argument actually passes a reference to the\nlist, not a copy of the list.\nFor example, the function {\\tt head} takes a list as an argument\nand returns the first element:\n\n\\beforeverb\n\\begin{verbatim}\ndef head(list):\n  return list[0]\n\\end{verbatim}\n\\afterverb\n%\nHere's how it is used:\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers = [1, 2, 3]\n>>> head(numbers)\n1\n\\end{verbatim}\n\\afterverb\n%\nThe parameter {\\tt list} and the variable {\\tt numbers} are\naliases for the same object.  The state diagram looks like\nthis:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/stack5.eps}}\n\\afterfig\n\nSince the list object is shared by two frames, we drew\nit between them.\n\nIf a function modifies a list parameter, the caller sees the change.\nFor example, {\\tt deleteHead} removes the first element from a list:\n\n\\beforeverb\n\\begin{verbatim}\ndef deleteHead(list):\n  del list[0]\n\\end{verbatim}\n\\afterverb\n%\nHere's how {\\tt deleteHead} is used:\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers = [1, 2, 3]\n>>> deleteHead(numbers)\n>>> print numbers\n[2, 3]\n\\end{verbatim}\n\\afterverb\n%\nIf a function returns a list, it returns a reference to the list.  For\nexample, {\\tt tail} returns a list that contains all but the first\nelement of the given list:\n\n\\beforeverb\n\\begin{verbatim}\ndef tail(list):\n  return list[1:]\n\\end{verbatim}\n\\afterverb\n%\nHere's how {\\tt tail} is used:\n\n\\beforeverb\n\\begin{verbatim}\n>>> numbers = [1, 2, 3]\n>>> rest = tail(numbers)\n>>> print rest\n[2, 3]\n\\end{verbatim}\n\\afterverb\n%\nBecause the return value was created with the slice operator, it\nis a new list.  Creating {\\tt rest}, and any subsequent changes\nto {\\tt rest}, have no effect on {\\tt numbers}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "faba4ae7-0c67-498f-a704-eabd35773868": {"__data__": {"id_": "faba4ae7-0c67-498f-a704-eabd35773868", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "f8a816c2-2836-40c3-b2e7-5e2ea5584eab", "node_type": null, "metadata": {}, "hash": "6523a7be6879e96e94c153c7ad9d95ed19b3df1bc33c36966695347313b8b39d"}, "3": {"node_id": "00b14091-118e-4451-ad88-dd7db709b135", "node_type": null, "metadata": {}, "hash": "63ea626e5a80338b543b599ac89b67aafc2e3bd4de82f2091a370b3e98ed1f84"}}, "hash": "bb5b82e3d02fadef2a20dbbb63ab1ba8646f53735c084188740097225d50b54c", "text": "\\section{Nested lists}\n\\label{nested lists}\n\\index{nested list}\n\\index{list!nested}\n\nA nested list is a list that appears as an element in another\nlist.  In this list, the three-eth element is a nested list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = [\"hello\", 2.0, 5, [10, 20]]\n\\end{verbatim}\n\\afterverb\n%\nIf we print {\\tt list[3]}, we get {\\tt [10, 20]}.  To extract an\nelement from the nested list, we can proceed in two steps:\n\n\\beforeverb\n\\begin{verbatim}\n>>> elt = list[3]\n>>> elt[0]\n10\n\\end{verbatim}\n\\afterverb\n%\nOr we can combine them:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list[3][1]\n20\n\\end{verbatim}\n\\afterverb\n%\nBracket operators evaluate from left to right, so this expression\ngets the three-eth element of {\\tt list} and extracts the one-eth\nelement from it.\n\n\\section{Matrices}\n\\index{matrix}\n\\index{list!nested}\n\nNested lists are often used to represent matrices.  For example,\nthe matrix:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/matrix.eps}}\n\\afterfig\n\nmight be represented as:\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\\end{verbatim}\n\\afterverb\n%\n{\\tt matrix} is a list with three elements, where each\nelement is a row of the matrix.  We can select an entire row from the\nmatrix in the usual way:\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix[1]\n[4, 5, 6]\n\\end{verbatim}\n\\afterverb\n%\nOr we can extract a single element from the matrix using the\ndouble-index form:\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix[1][1]\n5\n\\end{verbatim}\n\\afterverb\n%\nThe first index selects the row, and the second index selects the\ncolumn.  Although this way of representing matrices is common, it is\nnot the only possibility.  A small variation is to use a list of\ncolumns instead of a list of rows.  Later we will see a more\nradical alternative using a dictionary.\n\n\\index{dictionary}\n\\index{row}\n\\index{column}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "00b14091-118e-4451-ad88-dd7db709b135": {"__data__": {"id_": "00b14091-118e-4451-ad88-dd7db709b135", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b39a27f4-bb19-4496-9cd3-a6710b808acd", "node_type": null, "metadata": {}, "hash": "b5905689fabc253bee90b71ee08cddd044f0b13c1802fb7325049fb948b116c0"}, "2": {"node_id": "faba4ae7-0c67-498f-a704-eabd35773868", "node_type": null, "metadata": {}, "hash": "bb5b82e3d02fadef2a20dbbb63ab1ba8646f53735c084188740097225d50b54c"}}, "hash": "63ea626e5a80338b543b599ac89b67aafc2e3bd4de82f2091a370b3e98ed1f84", "text": "\\section{Strings and lists}\n\\index{split function}\n\\index{join function}\n\nTwo of the most useful functions in the {\\tt string} module involve\nlists of strings.  The {\\tt split} function breaks a string into a\nlist of words.  By default, any number of whitespace characters is\nconsidered a word boundary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import string\n>>> song = \"The rain in Spain...\"\n>>> string.split(song)\n['The', 'rain', 'in', 'Spain...']\n\\end{verbatim}\n\\afterverb\n%\nAn optional argument called a {\\bf delimiter} can be used to specify which\ncharacters to use as word boundaries.\nThe following example\nuses the string {\\tt ai} as the delimiter:\n\n\\beforeverb\n\\begin{verbatim}\n>>> string.split(song, 'ai')\n['The r', 'n in Sp', 'n...']\n\\end{verbatim}\n\\afterverb\n%\nNotice that the delimiter doesn't appear in the list.\n\nThe {\\tt join} function is the inverse of {\\tt split}.  It\ntakes a list of strings and\nconcatenates the elements with a space between each pair:\n\n\\beforeverb\n\\begin{verbatim}\n>>> list = ['The', 'rain', 'in', 'Spain...']\n>>> string.join(list)\n'The rain in Spain...'\n\\end{verbatim}\n\\afterverb\n%\nLike {\\tt split}, {\\tt join} takes an optional delimiter\nthat is inserted between elements:\n\n\\beforeverb\n\\begin{verbatim}\n>>> string.join(list, '_')\n'The_rain_in_Spain...'\n\\end{verbatim}\n\\afterverb\n\n\\begin{quote}\n\\begin{quote}\n{\\em As an exercise, describe the relationship between {\\tt\nstring.join(string.split(song))} and {\\tt song}.  Are they the same\nfor all strings?  When would they be different?}\n\\end{quote}\n\\end{quote}\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[list:] A named collection of objects, where each object is\nidentified by an index.\n\n\\item[index:] An integer variable or value that indicates an element of a\nlist.\n\n\\item[element:] One of the values in a list (or other sequence).  The\nbracket operator selects elements of a list.\n\n\\item[sequence:] Any of the data types that consist of an ordered set of\nelements, with each element identified by an index.\n\n\\item[nested list:] A list that is an element of another list.\n\n\\item[list traversal:] The sequential accessing of each element in a list.\n\n\\item[object:] A thing to which a variable can refer.\n\n\\item[aliases:] Multiple variables that contain references to the same object.\n\n\\item[clone:] To create a new object that has the same value as an\nexisting object.  Copying a reference to an object creates an alias\nbut doesn't clone the object.\n\n\\item[delimiter:] A character or string used to indicate where a\nstring should be split.\n\n\\index{list}\n\\index{index}\n\\index{sequence}\n\\index{element}\n\\index{nested list}\n\\index{list traversal}\n\\index{object}\n\\index{aliasing}\n\\index{clone}\n\\index{delimiter}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ebc2df6e-9ad0-494f-b5bd-1e02d342a82b": {"__data__": {"id_": "ebc2df6e-9ad0-494f-b5bd-1e02d342a82b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "3": {"node_id": "31aa5116-27d2-4e25-9ea7-e39a90baf975", "node_type": null, "metadata": {}, "hash": "ea6989e45e373ef22ea75b6c97c976cc3aff927456dc089c0d3e3f1833d67228"}}, "hash": "c39643e53282c6a2902f89c717f8ffcd27ad3fa95addb68d9a12e5ed6a1e5b19", "text": "% LaTeX source for textbook ``How to think like a computer scientist'\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n\n\\chapter{Tuples}\n\\label{tuplechap}\n\\index{tuple}\n\n\\section{Mutability and tuples}\n\\index{tuple}\n\\index{data type!tuple}\n\\index{type!tuple}\n\\index{data type!immutable}\n\nSo far, you have seen two compound types: strings, which are made up\nof characters; and lists, which are made up of elements of any type.\nOne of the differences we noted is that the elements of a list can be\nmodified, but the characters in a string cannot.  In other words, strings\nare {\\bf immutable} and lists are {\\bf mutable}.\n\n\\index{mutable}\n\\index{immutable}\n\nThere is another type in Python called a {\\bf tuple} that is similar\nto a list except that it is immutable.  Syntactically, a tuple is a\ncomma-separated list of values:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tuple = 'a', 'b', 'c', 'd', 'e'\n\\end{verbatim}\n\\afterverb\n%\nAlthough it is not necessary, it is conventional to enclose tuples in\nparentheses:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tuple = ('a', 'b', 'c', 'd', 'e')\n\\end{verbatim}\n\\afterverb\n%\nTo create a tuple with a single element, we have to include the final\ncomma:\n\n\\beforeverb\n\\begin{verbatim}\n>>> t1 = ('a',)\n>>> type(t1)\n<type 'tuple'>\n\\end{verbatim}\n\\afterverb\n%\nWithout the comma, Python treats {\\tt ('a')} as a string in\nparentheses:\n\n\\beforeverb\n\\begin{verbatim}\n>>> t2 = ('a')\n>>> type(t2)\n<type 'str'>\n\\end{verbatim}\n\\afterverb\n%\nSyntax issues aside, the operations on tuples are the same as the\noperations on lists.  The index operator selects an element from\na tuple.\n\n\\beforeverb\n\\begin{verbatim}\n>>> tuple = ('a', 'b', 'c', 'd', 'e')\n>>> tuple[0]\n'a'\n\\end{verbatim}\n\\afterverb\n%\nAnd the slice operator selects a range of elements.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "31aa5116-27d2-4e25-9ea7-e39a90baf975": {"__data__": {"id_": "31aa5116-27d2-4e25-9ea7-e39a90baf975", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "2": {"node_id": "ebc2df6e-9ad0-494f-b5bd-1e02d342a82b", "node_type": null, "metadata": {}, "hash": "c39643e53282c6a2902f89c717f8ffcd27ad3fa95addb68d9a12e5ed6a1e5b19"}, "3": {"node_id": "bfda4cdd-355f-44cd-a333-592fb7cbade4", "node_type": null, "metadata": {}, "hash": "c3ced4734c6b97d8f3ff2bd52171d803850326402dc41a65902f00fcf2b1f84e"}}, "hash": "ea6989e45e373ef22ea75b6c97c976cc3aff927456dc089c0d3e3f1833d67228", "text": "\\beforeverb\n\\begin{verbatim}\n>>> tuple[1:3]\n('b', 'c')\n\\end{verbatim}\n\\afterverb\n%\nBut if we try to modify one of the elements of the tuple, we get\nan error:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\n>>> tuple[0] = 'A'\nTypeError: object doesn't support item assignment\n\\end{verbatim}\n\\afterverb\n%\nOf course, even if we can't modify the elements of a tuple, we can\nreplace it with a different tuple:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tuple = ('A',) + tuple[1:]\n>>> tuple\n('A', 'b', 'c', 'd', 'e')\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{Tuple assignment}\n\\label{tuple assignment}\n\\index{tuple assignment}\n\\index{assignment!tuple}\n\nOnce in a while, it is useful to swap the values of two variables.\nWith conventional assignment statements, we have to use a temporary\nvariable.  For example, to swap {\\tt a} and {\\tt b}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> temp = a\n>>> a = b\n>>> b = temp\n\\end{verbatim}\n\\afterverb\n%\nIf we have to do this often, this approach becomes cumbersome.  Python\nprovides a form of {\\bf tuple assignment} that solves this problem neatly:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a, b = b, a\n\\end{verbatim}\n\\afterverb\n%\nThe left side is a tuple of variables; the right side is a tuple of\nvalues.  Each value is assigned to its respective variable.  \nAll the expressions on the right side are evaluated before any\nof the assignments.\nThis feature makes tuple\nassignment quite versatile.\n\nNaturally, the number of variables on the left and the number of\nvalues on the right have to be the same:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a, b, c, d = 1, 2, 3\nValueError: unpack tuple of wrong size\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{Tuples as return values}\n\\index{tuple}\n\\index{value!tuple}\n\\index{return value!tuple}\n\\index{function!tuple as return value}\n\nFunctions can return tuples as return values.  For example, we could\nwrite a function that swaps two parameters:\n\n\\beforeverb\n\\begin{verbatim}\ndef swap(x, y):\n  return y, x\n\\end{verbatim}\n\\afterverb\n%\nThen we can assign the return value to a\ntuple with two variables:\n\n\\beforeverb\n\\begin{verbatim}\na, b = swap(a, b)\n\\end{verbatim}\n\\afterverb\n%\nIn this case, there is no great advantage in making {\\tt swap} a\nfunction.  In fact, there is a danger in trying to encapsulate {\\tt\nswap}, which is the following tempting mistake:\n\n\\beforeverb\n\\begin{verbatim}\ndef swap(x, y):      # incorrect version\n  x, y = y, x\n\\end{verbatim}\n\\afterverb\n%\nIf we call this function like this:\n\n\\beforeverb\n\\begin{verbatim}\nswap(a, b)\n\\end{verbatim}\n\\afterverb\n%\nthen {\\tt a} and {\\tt x} are aliases for the same value.  Changing {\\tt x}\ninside {\\tt swap} makes {\\tt x} refer to a different value, but it has no\neffect on {\\tt a} in {\\tt \\_\\_main\\_\\_}.  Similarly, changing {\\tt y} has no\neffect on {\\tt b}.\n\nThis function runs without producing an error message, but it\ndoesn't do what we intended.  This is an example of a semantic\nerror.\n\n\\index{semantic error}\n\n\\begin{quote}\n{\\em As an exercise, draw a state diagram for this function so that\nyou can see why it doesn't work.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bfda4cdd-355f-44cd-a333-592fb7cbade4": {"__data__": {"id_": "bfda4cdd-355f-44cd-a333-592fb7cbade4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "2": {"node_id": "31aa5116-27d2-4e25-9ea7-e39a90baf975", "node_type": null, "metadata": {}, "hash": "ea6989e45e373ef22ea75b6c97c976cc3aff927456dc089c0d3e3f1833d67228"}, "3": {"node_id": "7517e8c9-e829-47be-a792-3bb7aedb40a7", "node_type": null, "metadata": {}, "hash": "4a99eea3c36191d40ec408c6796f60e5bb4cac4b086b7f0f25d2fa092224e2c1"}}, "hash": "c3ced4734c6b97d8f3ff2bd52171d803850326402dc41a65902f00fcf2b1f84e", "text": "\\end{quote}\n\n\n\\section{Random numbers}\n\\index{random number}\n\\index{number!random}\n\nMost computer programs do the same thing every time they execute,\nso they are said to be {\\bf deterministic}.  Determinism is usually a\ngood thing, since we expect the same calculation to yield the same\nresult.  For some applications, though, we want the computer to\nbe unpredictable.  Games are an obvious example, but there are\nmore.\n\nMaking a program truly nondeterministic turns out to be not so easy,\nbut there are ways to make it at least seem nondeterministic.  One of\nthem is to generate random numbers and use them to determine the\noutcome of the program.  Python provides a built-in function that\ngenerates {\\bf pseudorandom} numbers, which are not truly random in\nthe mathematical sense, but for our purposes they will do.\n\nThe {\\tt random} module contains a function called {\\tt random} that\nreturns a floating-point number between 0.0 and 1.0.  Each time you\ncall {\\tt random}, you get the next number in a long series.  To see a\nsample, run this loop:\n\n\\beforeverb\n\\begin{verbatim}\nimport random\n\nfor i in range(10):\n  x = random.random()\n  print x\n\\end{verbatim}\n\\afterverb\n%\nTo generate a random number between 0.0 and an upper bound like\n{\\tt high}, multiply {\\tt x} by {\\tt high}.\n\n\\begin{quote}\n{\\em As an exercise, generate a random number between {\\tt low} and\n{\\tt high}.}\n\\end{quote}\n\n\\begin{quote}\n{\\em As an additional exercise, generate a random {\\em integer}\nbetween {\\tt low} and {\\tt high}, including both end points.}\n\\end{quote}\n\n\n\\section{List of random numbers}\n\nThe first step is to generate a list of random values.  {\\tt\nrandomList} takes an integer argument and returns a list of random\nnumbers with the given length.  It starts with a list of {\\tt n}\nzeros.  Each time through the loop, it replaces one of the elements\nwith a random number.\nThe return value is a reference to the complete list:\n\n\\beforeverb\n\\begin{verbatim}\ndef randomList(n):\n  s = [0] * n\n  for i in range(n):\n    s[i] = random.random()\n  return s\n\\end{verbatim}\n\\afterverb\n%\nWe'll test this function with a list of eight elements.  For\npurposes of debugging, it is a good idea to start small.\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\n>>> randomList(8)\n0.15156642489\n0.498048560109\n0.810894847068\n0.360371157682\n0.275119183077\n0.328578797631\n0.759199803101\n0.800367163582\n\\end{verbatim}\n\\afterverb\n%\nThe numbers generated by {\\tt random} are supposed to be distributed\nuniformly, which means that every value is equally likely.\n\nIf we divide the range of possible\nvalues into equal-sized ``buckets,'' and count the number of times a\nrandom value falls in each bucket, we should get roughly the\nsame number in each.\n\nWe can test this theory by writing a program to \ndivide the range into\nbuckets and count the number of values in each.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7517e8c9-e829-47be-a792-3bb7aedb40a7": {"__data__": {"id_": "7517e8c9-e829-47be-a792-3bb7aedb40a7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "2": {"node_id": "bfda4cdd-355f-44cd-a333-592fb7cbade4", "node_type": null, "metadata": {}, "hash": "c3ced4734c6b97d8f3ff2bd52171d803850326402dc41a65902f00fcf2b1f84e"}, "3": {"node_id": "eeeefeaf-d448-4ed2-967b-ac85b7dc012e", "node_type": null, "metadata": {}, "hash": "b1784dbf90b13f34642c68fa4873209e8e0680eaf59af102003de67f516da973"}}, "hash": "4a99eea3c36191d40ec408c6796f60e5bb4cac4b086b7f0f25d2fa092224e2c1", "text": "\\section{Counting}\n\\index{counting}\n\nA good approach to problems like this is to divide the problem into\nsubproblems and look for subproblems that fit a computational pattern\nyou have seen before.\n\nIn this case, we want to traverse a list of numbers and count the\nnumber of times a value falls in a given range.  That sounds familiar.\nIn Section~\\ref{counter}, we wrote a program that traversed a string and\ncounted the number of times a given letter appeared.\n\nSo, we can proceed by copying the old program and adapting it\nfor the current problem.  The original program was:\n\n\\beforeverb\n\\begin{verbatim}\ncount = 0\nfor char in fruit:\n  if char == 'a':\n    count = count + 1\nprint count\n\\end{verbatim}\n\\afterverb\n%\nThe first step is to replace {\\tt fruit} with {\\tt t} and\n{\\tt char} with {\\tt num}.  That doesn't change the program;\nit just makes it more readable.\n\nThe second step is to change the test.  We aren't interested\nin finding letters.  We want to see if {\\tt num} is between\nthe given values {\\tt low} and {\\tt high}.  \n\n\\beforeverb\n\\begin{verbatim}\ncount = 0\nfor num in t:\n  if low < num < high:\n    count = count + 1\nprint count\n\\end{verbatim}\n\\afterverb\n%\nThe last step is to encapsulate this code in a function called\n{\\tt inBucket}.  The parameters are the list and the values\n{\\tt low} and {\\tt high}.\n\n\\beforeverb\n\\begin{verbatim}\ndef inBucket(t, low, high):\n  count = 0\n  for num in t:\n    if low < num < high:\n      count = count + 1\n  return count\n\\end{verbatim}\n\\afterverb\n%\nBy copying and modifying an existing program, we were able\nto write this function quickly and save a lot of debugging\ntime.  This development plan is called {\\bf pattern matching}.\nIf you find yourself working on a problem you have solved\nbefore, reuse the solution.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "eeeefeaf-d448-4ed2-967b-ac85b7dc012e": {"__data__": {"id_": "eeeefeaf-d448-4ed2-967b-ac85b7dc012e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "2": {"node_id": "7517e8c9-e829-47be-a792-3bb7aedb40a7", "node_type": null, "metadata": {}, "hash": "4a99eea3c36191d40ec408c6796f60e5bb4cac4b086b7f0f25d2fa092224e2c1"}, "3": {"node_id": "7fd9dd64-d020-4c02-8c3e-7e498557b7e6", "node_type": null, "metadata": {}, "hash": "1b5465abfaa4d670fddf0f276070e4fed2e3fbbbe627fb47495e250c0d7ae2f4"}}, "hash": "b1784dbf90b13f34642c68fa4873209e8e0680eaf59af102003de67f516da973", "text": "\\section{Many buckets}\n\nAs the number of buckets increases, {\\tt inBucket} gets\na little unwieldy.  With two buckets, it's not bad:\n\n\\beforeverb\n\\begin{verbatim}\nlow = inBucket(a, 0.0, 0.5)\nhigh = inBucket(a, 0.5, 1)\n\\end{verbatim}\n\\afterverb\n%\nBut with four buckets it is getting cumbersome.\n\n\\beforeverb\n\\begin{verbatim}\nbucket1 = inBucket(a, 0.0, 0.25)\nbucket2 = inBucket(a, 0.25, 0.5)\nbucket3 = inBucket(a, 0.5, 0.75)\nbucket4 = inBucket(a, 0.75, 1.0)\n\\end{verbatim}\n\\afterverb\n%\nThere are two problems.  One is that we have to make up new\nvariable names for each result.  The other is that we have to\ncompute the range for each bucket.\n\nWe'll solve the second problem first.  If the number of buckets\nis {\\tt numBuckets}, then the width of each bucket is\n{\\tt 1.0 / numBuckets}.\n\nWe'll use a loop to compute the range of each bucket.\nThe loop variable, {\\tt i},\ncounts from 0 to {\\tt numBuckets-1}:\n\n\\beforeverb\n\\begin{verbatim}\nbucketWidth = 1.0 / numBuckets\nfor i in range(numBuckets):\n  low = i * bucketWidth\n  high = low + bucketWidth\n  print low, \"to\", high\n\\end{verbatim}\n\\afterverb\n%\nTo compute the low end of each bucket, we multiply the loop variable\nby the bucket width.  The high end is just a {\\tt bucketWidth} away.\n\nWith {\\tt numBuckets = 8}, the output is:\n\n\\beforeverb\n\\begin{verbatim}\n0.0 to 0.125\n0.125 to 0.25\n0.25 to 0.375\n0.375 to 0.5\n0.5 to 0.625\n0.625 to 0.75\n0.75 to 0.875\n0.875 to 1.0\n\\end{verbatim}\n\\afterverb\n%\nYou can confirm that each bucket is the same width, that they don't\noverlap, and that they cover the entire range from 0.0 to 1.0.\n\nNow back to the first problem.\nWe need a way to store eight integers, using the loop variable\nto indicate one at a time.  By now you should be thinking,\n``List!''\n\nWe have to create the bucket list outside the loop, because we only\nwant to do it once.  Inside the loop, we'll call {\\tt inBucket}\nrepeatedly and update the {\\tt i}-eth element of the list:\n\n\\beforeverb\n\\begin{verbatim}\nnumBuckets = 8\nbuckets = [0] * numBuckets\nbucketWidth = 1.0 / numBuckets\nfor i in range(numBuckets):\n  low = i * bucketWidth\n  high = low + bucketWidth\n  buckets[i] = inBucket(t, low, high)\nprint buckets\n\\end{verbatim}\n\\afterverb\n%\nWith a list of 1000 values, this code produces this bucket list:\n\n\\beforeverb\n\\begin{verbatim}\n[138, 124, 128, 118, 130, 117, 114, 131]\n\\end{verbatim}\n\\afterverb\n%\nThese numbers are fairly close to 125, which is what we expected.  At\nleast, they are close enough that we can believe the random number\ngenerator is working.\n\n\\begin{quote}\n{\\em As an exercise, \ntest this function with some longer lists, and see if the\nnumber of values in each bucket tends to level off.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7fd9dd64-d020-4c02-8c3e-7e498557b7e6": {"__data__": {"id_": "7fd9dd64-d020-4c02-8c3e-7e498557b7e6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b44e675-64e5-457e-909e-a1553348de00", "node_type": null, "metadata": {}, "hash": "79112d3452a6e8330f0183a7b4466e744f84d6c6cd5d148b62c00f7bd3dbc318"}, "2": {"node_id": "eeeefeaf-d448-4ed2-967b-ac85b7dc012e", "node_type": null, "metadata": {}, "hash": "b1784dbf90b13f34642c68fa4873209e8e0680eaf59af102003de67f516da973"}}, "hash": "1b5465abfaa4d670fddf0f276070e4fed2e3fbbbe627fb47495e250c0d7ae2f4", "text": "\\section{A single-pass solution}\n\\index{histogram}\n\nAlthough this program works, it is not as efficient as it could be.\nEvery time it calls {\\tt inBucket}, it traverses the entire list.  As\nthe number of buckets increases, that gets to be a lot of traversals.\n\nIt would be better to make a single pass through the list and compute\nfor each value the index of the bucket in which it falls.  Then we can\nincrement the appropriate counter.\n\nIn the previous section we took an index, {\\tt i}, and multiplied it\nby the {\\tt bucketWidth} to find the lower bound of a given\nbucket.  Now we want to take a value in the range 0.0 to 1.0 and find the\nindex of the bucket where it falls.\n\nSince this problem is the inverse of the previous problem, we might\nguess that we should divide by {\\tt bucketWidth} instead of\nmultiplying.  That guess is correct.\n\nSince {\\tt bucketWidth = 1.0 / numBuckets}, dividing by {\\tt\nbucketWidth} is the same as multiplying by {\\tt numBuckets}.  If we\nmultiply a number in the range 0.0 to 1.0 by {\\tt numBuckets}, we get\na number in the range from 0.0 to {\\tt numBuckets}.  If we round that\nnumber to the next lower integer, we get exactly what we are looking\nfor---a bucket index:\n\n\\beforeverb\n\\begin{verbatim}\nnumBuckets = 8\nbuckets = [0] * numBuckets\nfor i in t:\n  index = int(i * numBuckets)\n  buckets[index] = buckets[index] + 1\n\\end{verbatim}\n\\afterverb\n%\nWe used the {\\tt int} function to convert a floating-point\nnumber to an integer.\n\nIs it possible for this calculation to produce an index that is out of\nrange (either negative or greater than {\\tt len(buckets)-1})?\n\nA list like {\\tt buckets} that contains counts of the number of values\nin each range is called a {\\bf histogram}.\n\n\\begin{quote}\n{\\em As an exercise, write a function called {\\tt histogram} that\ntakes a list and a number of buckets as arguments and returns\na histogram with the given number of buckets.}\n\\end{quote}\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[immutable type:] A type in which the elements cannot be\nmodified.  Assignments\nto elements or slices of immutable types cause an error.\n\n\\item[mutable type:] A data type in which the elements can be\nmodified.  All mutable\ntypes are compound types.  Lists and dictionaries are mutable data\ntypes; strings and tuples are not.\n\n\\item[tuple:] A sequence type that is similar to a list except that it is\nimmutable.  Tuples can be used wherever an immutable type is required, such\nas a key in a dictionary.\n\n\\item[tuple assignment:] An assignment to all of the elements in a tuple using\na single assignment statement. Tuple assignment occurs in parallel rather\nthan in sequence, making it useful for swapping values.\n\n\\item[deterministic:] A program that does the same thing each time it is\ncalled.\n\n\\item[pseudorandom:] A sequence of numbers that appear to be random but that\nare actually the result of a deterministic computation.\n\n\\item[histogram:] A list of integers in which each element counts the \nnumber of times something happens.\n\n\\item[pattern matching:] A program development plan that involves\nidentifying a familiar computational pattern and copying the\nsolution to a similar problem.\n\n\\index{mutable type}\n\\index{immutable type}\n\\index{tuple}\n\\index{tuple assignment}\n\\index{assignment!tuple}\n\\index{deterministic}\n\\index{pseudorandom}\n\\index{histogram}\n\\index{pattern matching}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78fce47a-97ce-40a1-a41d-45c29ec1c6ff": {"__data__": {"id_": "78fce47a-97ce-40a1-a41d-45c29ec1c6ff", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "3": {"node_id": "270fc7ae-49fc-4d87-a3e7-04ec0577a426", "node_type": null, "metadata": {}, "hash": "1d211337437ef34e3a0b188e3abc96baba35800c4eb752b01eb498d33f203c37"}}, "hash": "bae8a0a240f9b1c1edac65dea11aed7477bea31c7107f7c4f0703c4ab0e1b8d2", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Dictionaries}\n\\index{dictionary}\n\n\\index{dictionary}\n\\index{data type!dictionary}\n\\index{type!dict}\n\\index{key}\n\\index{key-value pair}\n\\index{index}\n\nThe compound types you have learned about---strings, lists, and\ntuples---use integers as indices.  If you try to use any other type as\nan index, you get an error.\n\n{\\bf Dictionaries} are similar to other compound types except that\nthey can use any immutable type as an index.  As an example, we will\ncreate a dictionary to translate English words into Spanish.  For this\ndictionary, the indices are {\\tt strings}.\n\nOne way to create a dictionary is to start with the empty dictionary\nand add elements.  The empty dictionary is denoted {\\verb+{}+}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp = {}\n>>> eng2sp['one'] = 'uno'\n>>> eng2sp['two'] = 'dos'\n\\end{verbatim}\n\\afterverb\n%\nThe first assignment creates a dictionary named {\\tt eng2sp}; the\nother assignments add new elements to the dictionary.  We can print\nthe current value of the dictionary in the usual way:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print eng2sp\n{'one': 'uno', 'two': 'dos'}\n\\end{verbatim}\n\\afterverb\n%\nThe elements of a dictionary appear in a comma-separated list.  Each\nentry contains an index and a value separated by a colon.  In a\ndictionary, the indices are called {\\bf keys}, so the elements are\ncalled {\\bf key-value pairs}.\n\nAnother way to create a dictionary is to provide a list of key-value\npairs using the same syntax as the previous output:\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\n\\end{verbatim}\n\\afterverb\n%\nIf we print the value of {\\tt eng2sp} again, we get a surprise:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print eng2sp\n{'one': 'uno', 'three': 'tres', 'two': 'dos'}\n\\end{verbatim}\n\\afterverb\n%\nThe key-value pairs are not in order!  Fortunately, there is no reason\nto care about the order, since the elements of a dictionary are never\nindexed with integer indices.  Instead, we use the keys to look up the\ncorresponding values:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print eng2sp['two']\n'dos'\n\\end{verbatim}\n\\afterverb\n%\nThe key {\\tt 'two'} yields the value {\\tt 'dos'} even though it\nappears in the third key-value pair.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "270fc7ae-49fc-4d87-a3e7-04ec0577a426": {"__data__": {"id_": "270fc7ae-49fc-4d87-a3e7-04ec0577a426", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "2": {"node_id": "78fce47a-97ce-40a1-a41d-45c29ec1c6ff", "node_type": null, "metadata": {}, "hash": "bae8a0a240f9b1c1edac65dea11aed7477bea31c7107f7c4f0703c4ab0e1b8d2"}, "3": {"node_id": "d37333a6-d060-47f4-9e0e-29273ac89aa1", "node_type": null, "metadata": {}, "hash": "1ea09d693255a02045d4b11b587061c36225487037d5f32662564f9c4abc11f1"}}, "hash": "1d211337437ef34e3a0b188e3abc96baba35800c4eb752b01eb498d33f203c37", "text": "\\section{Dictionary operations}\n\\index{dictionary!operation}\n\\index{operation!dictionary}\n\nThe {\\tt del} statement removes a key-value pair from a dictionary.\nFor example, the following dictionary contains the names of various\nfruits and the number of each fruit in stock:\n\n\\beforeverb\n\\begin{verbatim}\n>>> inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, \n'pears': 217}\n>>> print inventory\n{'oranges': 525, 'apples': 430, 'pears': 217, 'bananas': 312}\n\\end{verbatim}\n\\afterverb\n%\nIf someone buys all of the pears, we can remove the entry from the\ndictionary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> del inventory['pears']\n>>> print inventory\n{'oranges': 525, 'apples': 430, 'bananas': 312}\n\\end{verbatim}\n\\afterverb\n%\nOr if we're expecting more pears soon, we might just change the\nvalue associated with pears:\n\n\\beforeverb\n\\begin{verbatim}\n>>> inventory['pears'] = 0\n>>> print inventory\n{'oranges': 525, 'apples': 430, 'pears': 0, 'bananas': 312}\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt len} function also works on dictionaries; it returns the\nnumber of key-value pairs:\n\n\\beforeverb\n\\begin{verbatim}\n>>> len(inventory)\n4\n\\end{verbatim}\n\\afterverb\n%", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d37333a6-d060-47f4-9e0e-29273ac89aa1": {"__data__": {"id_": "d37333a6-d060-47f4-9e0e-29273ac89aa1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "2": {"node_id": "270fc7ae-49fc-4d87-a3e7-04ec0577a426", "node_type": null, "metadata": {}, "hash": "1d211337437ef34e3a0b188e3abc96baba35800c4eb752b01eb498d33f203c37"}, "3": {"node_id": "97c67d12-52ac-46ba-8df3-c740bb16e497", "node_type": null, "metadata": {}, "hash": "af9128b4ef3f5d78dc5775bc63983a22e49646210837bd8c49691302fabc10af"}}, "hash": "1ea09d693255a02045d4b11b587061c36225487037d5f32662564f9c4abc11f1", "text": "\\section{Dictionary methods}\n\\index{dictionary!method}\n\\index{method!dictionary}\n\\index{method}\n\\index{method!invocation}\n\\index{invoking method}\n\nA {\\bf method} is similar to a function---it takes arguments and\nreturns a value---but the syntax is different.  For example, the {\\tt\nkeys} method takes a dictionary and returns a list of the keys that\nappear, but instead of the function syntax {\\tt keys(eng2sp)}, we use\nthe method syntax {\\tt eng2sp.keys()}.\n\n\\index{dot notation}\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp.keys()\n['one', 'three', 'two']\n\\end{verbatim}\n\\afterverb\n%\nThis form of dot notation specifies the name of the function, {\\tt\nkeys}, and the name of the object to apply the function to, {\\tt\neng2sp}.  The parentheses indicate that this method has no\nparameters.\n\nA method call is called an {\\bf invocation}; in this case, we would\nsay that we are invoking {\\tt keys} on the object {\\tt eng2sp}.\n\nThe {\\tt values} method is similar; it returns a list of the values in\nthe dictionary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp.values()\n['uno', 'tres', 'dos']\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt items} method returns both, in the form of a\nlist of tuples---one for each key-value\npair:\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp.items()\n[('one','uno'), ('three', 'tres'), ('two', 'dos')]\n\\end{verbatim}\n\\afterverb\n%\nThe syntax provides useful type information.  The square brackets\nindicate that this is a list.  The parentheses indicate that\nthe elements of the list are tuples.\n\nIf a method takes an argument, it uses the same syntax as a function\ncall.  For example, the method {\\tt has\\_key} takes a key\nand returns\ntrue (1) if the key appears in the dictionary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> eng2sp.has_key('one')\nTrue\n>>> eng2sp.has_key('deux')\nFalse\n\\end{verbatim}\n\\afterverb\n%\nIf you try to call a method without specifying an object, you get an\nerror.  In this case, the error message is not very helpful:\n\n\\beforeverb\n\\begin{verbatim}\n>>> has_key('one')\nNameError: has_key\n\\end{verbatim}\n\\afterverb\n%\n\n\\index{runtime error}\n\n\n\\section{Aliasing and copying}\n\\index{aliasing}\n\\index{copying}\n\\index{cloning}\n\nBecause dictionaries are mutable, you need to be aware of aliasing.\nWhenever two variables refer to the same object, changes to one affect\nthe other.\n\nIf you want to modify a dictionary and keep a copy of the original,\nuse the {\\tt copy} method.  For example, {\\tt opposites} is a\ndictionary that contains pairs of opposites:\n\n\\beforeverb\n\\begin{verbatim}\n>>> opposites = {'up': 'down', 'right': 'wrong', 'true': 'false'}\n>>> alias = opposites\n>>> copy = opposites.copy()\n\\end{verbatim}\n\\afterverb\n%\n{\\tt alias} and {\\tt opposites} refer to the same object; {\\tt copy}\nrefers to a fresh copy of the same dictionary.  If we modify {\\tt\nalias}, {\\tt opposites} is also changed:\n\n\\beforeverb\n\\begin{verbatim}\n>>> alias['right'] = 'left'\n>>> opposites['right']\n'left'\n\\end{verbatim}\n\\afterverb\n%\nIf we modify {\\tt copy}, {\\tt opposites} is unchanged:\n\n\\beforeverb\n\\begin{verbatim}\n>>> copy['right'] = 'privilege'\n>>> opposites['right']\n'left'\n\\end{verbatim}\n\\afterverb\n%", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97c67d12-52ac-46ba-8df3-c740bb16e497": {"__data__": {"id_": "97c67d12-52ac-46ba-8df3-c740bb16e497", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "2": {"node_id": "d37333a6-d060-47f4-9e0e-29273ac89aa1", "node_type": null, "metadata": {}, "hash": "1ea09d693255a02045d4b11b587061c36225487037d5f32662564f9c4abc11f1"}, "3": {"node_id": "1f9270dc-5439-4eb4-b6a8-bee468243ae9", "node_type": null, "metadata": {}, "hash": "c8f3ccc4ea92632c2cb9d2d005bd4273a87a900b950209d4c216e4d4953b6daf"}}, "hash": "af9128b4ef3f5d78dc5775bc63983a22e49646210837bd8c49691302fabc10af", "text": "\\section{Sparse matrices }\n\\index{matrix!sparse}\n\\index{nested list}\n\\index{list!nested}\n\nIn Section~\\ref{nested lists}, we used a list of lists to represent a\nmatrix.  That is a good choice for a matrix with mostly nonzero\nvalues, but consider a sparse matrix like this one:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/sparse.eps}}\n\\afterfig\n\nThe list representation contains a lot of zeroes:\n\n\\beforeverb\n\\begin{verbatim}\nmatrix = [ [0,0,0,1,0],\n           [0,0,0,0,0],\n           [0,2,0,0,0],\n           [0,0,0,0,0],\n           [0,0,0,3,0] ]\n\\end{verbatim}\n\\afterverb\n%\nAn alternative is to use a dictionary.\nFor the keys, we can use tuples that contain the row and column\nnumbers.  Here is the dictionary representation of the same matrix:\n\n\\beforeverb\n\\begin{verbatim}\nmatrix = {(0,3): 1, (2, 1): 2, (4, 3): 3}\n\\end{verbatim}\n\\afterverb\n%\nWe only need three key-value pairs, one for each nonzero element of the\nmatrix.  Each key is a tuple, and each value is an integer.\n\nTo access an element of the matrix, we could use the {\\tt []}\noperator:\n\n\\beforeverb\n\\begin{verbatim}\nmatrix[0,3]\n1\n\\end{verbatim}\n\\afterverb\n%\nNotice that the syntax for the dictionary representation is not the\nsame as the syntax for the nested list representation.  Instead of\ntwo integer indices, we use one index, which is a tuple of integers.\n\nThere is one problem.\nIf we specify an element that is zero, we get an\nerror, because there is no entry in the dictionary with that key:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix[1,3]\nKeyError: (1, 3)\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt get} method solves this problem:\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix.get((0,3), 0)\n1\n\\end{verbatim}\n\\afterverb\n%\nThe first argument is the key; the second argument is the value\n{\\tt get} should return if the key is not in the dictionary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> matrix.get((1,3), 0)\n0\n\\end{verbatim}\n\\afterverb\n%\n{\\tt get} definitely improves the semantics of accessing\na sparse matrix.  Shame about the syntax.\n\n\n\\section{Hints}\n\\index{hint}\n\\index{Fibonacci function}\n\nIf you played around with the {\\tt fibonacci} function from\nSection~\\ref{one more example}, you might have noticed that the bigger\nthe argument you provide, the longer the function takes to run.\nFurthermore, the run time increases very quickly.  On one of our\nmachines, {\\tt fibonacci(20)} finishes instantly, {\\tt fibonacci(30)}\ntakes about a second, and {\\tt fibonacci(40)} takes roughly forever.\n\nTo understand why, consider this {\\bf call graph} for\n{\\tt fibonacci} with {\\tt n=4}:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/fibonacci.eps,height=2in}}\n\\afterfig\n\nA call graph shows a set function frames, with lines connecting each\nframe to the frames of the functions it calls.  At the top of the\ngraph, {\\tt fibonacci} with {\\tt n=4} calls {\\tt fibonacci} with {\\tt\nn=3} and {\\tt n=2}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1f9270dc-5439-4eb4-b6a8-bee468243ae9": {"__data__": {"id_": "1f9270dc-5439-4eb4-b6a8-bee468243ae9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "2": {"node_id": "97c67d12-52ac-46ba-8df3-c740bb16e497", "node_type": null, "metadata": {}, "hash": "af9128b4ef3f5d78dc5775bc63983a22e49646210837bd8c49691302fabc10af"}, "3": {"node_id": "bf7b3e64-7e63-4c9a-b611-622581711e8d", "node_type": null, "metadata": {}, "hash": "44988c9b900451859896bf15a4d2ee70437d9f3127d76ea444a09f2dbe5391e5"}}, "hash": "c8f3ccc4ea92632c2cb9d2d005bd4273a87a900b950209d4c216e4d4953b6daf", "text": "In turn, {\\tt fibonacci} with {\\tt n=3} calls\n{\\tt fibonacci} with {\\tt n=2} and {\\tt n=1}.  And so on.\n\n\\index{function frame}\n\\index{frame}\n\\index{call graph}\n\nCount how many times {\\tt fibonacci(0)} and {\\tt fibonacci(1)} are\ncalled.  This is an inefficient solution to the problem, and it gets\nfar worse as the argument gets bigger.\n\nA good solution is to keep track of values that have already been\ncomputed by storing them in a dictionary.  A previously computed value\nthat is stored for later use is called a {\\bf hint}.  Here is\nan implementation of {\\tt fibonacci} using hints:\n\n\\beforeverb\n\\begin{verbatim}\nprevious = {0:1, 1:1}\n\ndef fibonacci(n):\n  if previous.has_key(n):\n    return previous[n]\n  else:\n    newValue = fibonacci(n-1) + fibonacci(n-2)\n    previous[n] = newValue\n    return newValue\n\\end{verbatim}\n\\afterverb\n%\nThe dictionary named {\\tt previous} keeps track of the Fibonacci\nnumbers we already know.  We start with only\ntwo pairs: 0 maps to 1; and 1 maps to 1.\n\nWhenever {\\tt fibonacci} is called, it checks the dictionary to\ndetermine if it contains the result.\nIf it's there, the function can return\nimmediately without making any more recursive calls.  If not, it has\nto compute the new value.  The new value is added to the dictionary\nbefore the function returns.\n\nUsing this version of {\\tt fibonacci}, our machines can compute\n{\\tt fibonacci(40)} in an eyeblink.  But when we try to compute\n{\\tt fibonacci(50)}, we see the following:\n\n\\beforeverb\n\\begin{verbatim}\n>>> fibonacci(50)\n20365011074L\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt L} at the end of the result indicates that the answer\n+(20,365,011,074) is too big to fit into a Python integer.  Python\nhas automatically converted the result to a long integer.\n\n\\section{Long integers}\n\\index{long integer}\n\\index{data type!long integer}\n\\index{type!long}\n\\index{integer!long}\n\nPython provides a type called {\\tt long} that can handle any size\ninteger.  There are two ways to create a {\\tt long} value.  One is\nto write an integer with a capital {\\tt L} at the end:\n\n\\beforeverb\n\\begin{verbatim}\n>>> type(1L)\n<type 'long'>\n\\end{verbatim}\n\\afterverb\n%\nThe other is to use the {\\tt long} function to convert a value to a\n{\\tt long}.  {\\tt long} can accept any numerical type and even\nstrings of digits:\n\n\\index{type coercion}\n\\index{coercion!type}\n\n\\beforeverb\n\\begin{verbatim}\n>>> long(1)\n1L\n>>> long(3.9)\n3L\n>>> long('57')\n57L\n\\end{verbatim}\n\\afterverb\n%\nAll of the math operations work on {\\tt long}s, so in general\nany code that works with integers will also work with long\nintegers.  Any time the result of a computation is too big\nto be represented with an integer, Python detects the overflow\nand returns the result as a long integer.  For example:\n\n\\beforeverb\n\\begin{verbatim}\n>>> 1000 * 1000\n1000000\n>>> 100000 * 100000\n10000000000L\n\\end{verbatim}\n\\afterverb\n%\nIn the first case the result has type {\\tt int}; in the\nsecond case it is {\\tt long}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bf7b3e64-7e63-4c9a-b611-622581711e8d": {"__data__": {"id_": "bf7b3e64-7e63-4c9a-b611-622581711e8d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c0e9bc5-b047-4250-a300-230f1a16cd97", "node_type": null, "metadata": {}, "hash": "fb2260ef912cda76d6237745cb2dc272feae14cd7c1f90ddf083d5ff9c5cd1ad"}, "2": {"node_id": "1f9270dc-5439-4eb4-b6a8-bee468243ae9", "node_type": null, "metadata": {}, "hash": "c8f3ccc4ea92632c2cb9d2d005bd4273a87a900b950209d4c216e4d4953b6daf"}}, "hash": "44988c9b900451859896bf15a4d2ee70437d9f3127d76ea444a09f2dbe5391e5", "text": "\\section{Counting letters}\n\\index{counting}\n\\index{histogram}\n\\index{compression}\n\nIn Chapter~\\ref{strings}, we wrote a function that counted the number\nof occurrences of a letter in a string.  A more general version of\nthis problem is to form a histogram of the letters in the string, that\nis, how many times each letter appears.\n\nSuch a histogram might be useful for compressing a text\nfile.  Because different letters appear with different frequencies, we\ncan compress a file by using shorter codes for common letters and\nlonger codes for letters that appear less frequently.\n\nDictionaries provide an elegant way to generate a histogram:\n\n\\beforeverb\n\\begin{verbatim}\n>>> letterCounts = {}\n>>> for letter in \"Mississippi\":\n...   letterCounts[letter] = letterCounts.get (letter, 0) + 1\n...\n>>> letterCounts\n{'M': 1, 's': 4, 'p': 2, 'i': 4}\n\\end{verbatim}\n\\afterverb\n%\nWe start with an empty dictionary.  For each letter in the string, we\nfind the current count (possibly zero) and increment it.  At the end,\nthe dictionary contains pairs of letters and their frequencies.\n\nIt might be more appealing to display the histogram in alphabetical\norder.  We can do that with the {\\tt items} and {\\tt sort} methods:\n\n\\beforeverb\n\\begin{verbatim}\n>>> letterItems = letterCounts.items()\n>>> letterItems.sort()\n>>> print letterItems\n[('M', 1), ('i', 4), ('p', 2), ('s', 4)]\n\\end{verbatim}\n\\afterverb\n%\nYou have seen the {\\tt items} method before, but {\\tt sort} is the\nfirst method you have encountered that applies to lists.  There are\nseveral other list methods, including {\\tt append}, {\\tt extend}, and\n{\\tt reverse}.  Consult the Python documentation for details.\n\n\\index{method!list}\n\\index{list method}\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[dictionary:] A collection of key-value pairs that maps from\nkeys to values.\nThe keys can be any immutable type, and the values can be any type.\n\n\\item[key:] A value that is used to look up an entry in a dictionary.\n\n\\item[key-value pair:] One of the items in a dictionary.\n\n\\item[method:] A kind of function that is called with a different syntax and\ninvoked ``on'' an object.\n\n\\item[invoke:] To call a method.\n\n\\item[hint:] Temporary storage of a precomputed value to avoid redundant\ncomputation.\n\n\\item[overflow:] A numerical result that is too large to be represented\nin a numerical format.\n\n\\index{dictionary}\n\\index{key}\n\\index{key-value pair}\n\\index{hint}\n\\index{method}\n\\index{invoke}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "00b4a5d7-9bbd-4055-a1cf-f54e5357911b": {"__data__": {"id_": "00b4a5d7-9bbd-4055-a1cf-f54e5357911b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "3": {"node_id": "cf0db177-d4a6-45eb-838d-074b79670592", "node_type": null, "metadata": {}, "hash": "43b14ce32fcbe430ac7a49c5c61f792365a67437d17c515df23b7a2431efb030"}}, "hash": "58c74a8f753f5627524f31a15d25ca3823e7767588d8981d79d3d5734186b907", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Files and exceptions}\n\\index{file}\n\\index{type!file}\n\nWhile a program is running, its data is in memory.  When the program\nends, or the computer shuts down, data in memory disappears.  To\nstore data permanently, you have to put it in a {\\bf file}.\nFiles are usually stored on a\nhard drive, floppy drive, or CD-ROM.\n\nWhen there are a large number of files, they are often organized\ninto {\\bf directories} (also called ``folders'').\nEach file is identified by a unique name, or a combination of a\nfile name and a directory name.\n\nBy reading and writing files, programs can\nexchange information with each other and generate printable formats\nlike PDF.\n\nWorking with files is a lot like working with books.  To use a book,\nyou have to open it.  When you're done, you have to close it.  While\nthe book is open, you can either write in it or read from it.  In\neither case, you know where you are in the book.  Most of the time,\nyou read the whole book in its natural order, but you can also skip\naround.\n\nAll of this applies to files as well.  To open a file, you specify\nits name and indicate whether you want to read or write.\n\nOpening a file creates a file object.  In this example,\nthe variable {\\tt f} refers to the new file object.\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.dat\",\"w\")\n>>> print f\n<open file 'test.dat', mode 'w' at fe820>\n\\end{verbatim}\n\\afterverb\n%\nThe open function takes two arguments.  The first is the name of the file,\nand the second is the mode.  Mode {\\tt \"w\"} means that we are opening\nthe file for writing.\n\nIf there is no file named {\\tt test.dat}, it will be created.\nIf there already is one, it will be replaced by the file we are\nwriting.\n\nWhen we print the file object, we see the name of the file, the\nmode, and the location of the object.\n\nTo put data in the file we invoke the {\\tt write} method on the\nfile object:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f.write(\"Now is the time\")\n>>> f.write(\"to close the file\")\n\\end{verbatim}\n\\afterverb\n%\nClosing the file tells the system that we are done writing and\nmakes the file available for reading:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f.close()\n\\end{verbatim}\n\\afterverb\n%\nNow we can open the file again, this time for reading, and read the\ncontents into a string.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cf0db177-d4a6-45eb-838d-074b79670592": {"__data__": {"id_": "cf0db177-d4a6-45eb-838d-074b79670592", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "00b4a5d7-9bbd-4055-a1cf-f54e5357911b", "node_type": null, "metadata": {}, "hash": "58c74a8f753f5627524f31a15d25ca3823e7767588d8981d79d3d5734186b907"}, "3": {"node_id": "fd76a23c-a4e7-463d-a4e4-2a999724795f", "node_type": null, "metadata": {}, "hash": "c2f26a06a13a8c34996b3bba6eddd01e5f9a98fdb969824ee331a9cda28592f7"}}, "hash": "43b14ce32fcbe430ac7a49c5c61f792365a67437d17c515df23b7a2431efb030", "text": "This time, the mode argument\nis {\\tt \"r\"} for reading:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.dat\",\"r\")\n\\end{verbatim}\n\\afterverb\n%\nIf we try to open a file that doesn't exist, we get an error:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.cat\",\"r\")\nIOError: [Errno 2] No such file or directory: 'test.cat'\n\\end{verbatim}\n\\afterverb\n%\nNot surprisingly, the {\\tt read} method reads data from the\nfile.  With no arguments, it reads the entire contents of the file:\n\n\\beforeverb\n\\begin{verbatim}\n>>> text = f.read()\n>>> print text\nNow is the timeto close the file\n\\end{verbatim}\n\\afterverb\n%\nThere is no space between ``time'' and ``to'' because we did\nnot write a space between the strings.\n\n{\\tt read} can also take an argument that indicates how many\ncharacters to read:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.dat\",\"r\")\n>>> print f.read(5)\nNow i\n\\end{verbatim}\n\\afterverb\n%\nIf not enough characters are left in the file,\n{\\tt read} returns the remaining characters.\nWhen we get to the end of the file,\n{\\tt read} returns the empty string:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print f.read(1000006)\ns the timeto close the file\n>>> print f.read()\n\n>>>\n\\end{verbatim}\n\\afterverb\n%\nThe following function copies a file, reading and writing\nup to fifty characters at a time.  The first argument is the name of\nthe original file; the second is the name of the new file:\n\n\\beforeverb\n\\begin{verbatim}\ndef copyFile(oldFile, newFile):\n  f1 = open(oldFile, \"r\")\n  f2 = open(newFile, \"w\")\n  while True:\n    text = f1.read(50)\n    if text == \"\":\n      break\n    f2.write(text)\n  f1.close()\n  f2.close()\n  return\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt break} statement is new.  Executing it breaks out of the\nloop; the flow of execution moves to the first statement after\nthe loop.\n\n\\index{break statement}\n\\index{statement!break}\n\nIn this example, the {\\tt while} loop is infinite because the\nvalue {\\tt True} is always true.  The {\\em only} way to get out\nof the loop is to execute {\\tt break}, which happens when\n{\\tt text} is the empty string, which happens when we get to\nthe end of the file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fd76a23c-a4e7-463d-a4e4-2a999724795f": {"__data__": {"id_": "fd76a23c-a4e7-463d-a4e4-2a999724795f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "cf0db177-d4a6-45eb-838d-074b79670592", "node_type": null, "metadata": {}, "hash": "43b14ce32fcbe430ac7a49c5c61f792365a67437d17c515df23b7a2431efb030"}, "3": {"node_id": "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b", "node_type": null, "metadata": {}, "hash": "fea80c013bc777615b447136967f5829cce51a5caf3c430029739f7a7570b906"}}, "hash": "c2f26a06a13a8c34996b3bba6eddd01e5f9a98fdb969824ee331a9cda28592f7", "text": "\\section{Text files}\n\\index{text file}\n\\index{file!text}\n\nA {\\bf text file} is a file that contains printable characters and\nwhitespace, organized into lines separated by newline characters.\nSince Python is specifically designed to process text files, it\nprovides methods that make the job easy.\n\nTo demonstrate, we'll\ncreate a text file with three lines of text separated by\nnewlines:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.dat\",\"w\")\n>>> f.write(\"line one\\nline two\\nline three\\n\")\n>>> f.close()\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt readline} method reads all the characters\nup to and including the next newline character:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.dat\",\"r\")\n>>> print f.readline()\nline one\n\n>>>\n\\end{verbatim}\n\\afterverb\n%\n{\\tt readlines} returns all of the remaining\nlines as a list of strings:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print f.readlines()\n['line two\\012', 'line three\\012']\n\\end{verbatim}\n\\afterverb\n%\nIn this case, the output is in list format, which means that the\nstrings appear with quotation marks and the newline character\nappears as the escape sequence {\\tt \\\\012}.\n\nAt the end of the file, {\\tt readline} returns the empty string\nand {\\tt readlines} returns the empty list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print f.readline()\n\n>>> print f.readlines()\n[]\n\\end{verbatim}\n\\afterverb\n%\nThe following is an example of a line-processing program.\n{\\tt filterFile} makes a copy of {\\tt oldFile}, omitting\nany lines that begin with {\\tt \\#}:\n\n\\beforeverb\n\\begin{verbatim}\ndef filterFile(oldFile, newFile):\n  f1 = open(oldFile, \"r\")\n  f2 = open(newFile, \"w\")\n  while True:\n    text = f1.readline()\n    if text == \"\":\n      break\n    if text[0] == '#':\n      continue\n    f2.write(text)\n  f1.close()\n  f2.close()\n  return\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt continue} statement ends the current iteration of the\nloop, but continues looping.  The flow of\nexecution moves to the top of the loop, checks the condition,\nand proceeds accordingly.\n\n\\index{continue statement}\n\\index{statement!continue}\n\nThus, if {\\tt text} is the empty string, the loop exits.  If\nthe first character of {\\tt text} is a hash mark, the flow\nof execution goes to\nthe top of the loop.  Only if both conditions fail do we copy\n{\\tt text} into the new file.\n\n\n\\section{Writing variables}\n\\index{format operator}\n\\index{format string}\n\\index{operator!format}\n\nThe argument of {\\tt write} has to be a string, so if we want\nto put other values in a file, we have to convert them to\nstrings first.  The easiest way to do that is with the {\\tt str}\nfunction:\n\n\\beforeverb\n\\begin{verbatim}\n>>> x = 52\n>>> f.write (str(x))\n\\end{verbatim}\n\\afterverb\n%\nAn alternative is to use the {\\bf format operator} {\\tt \\%}.  When\napplied to integers, {\\tt \\%} is the modulus operator.  But\nwhen the first operand is a string, {\\tt \\%} is the format operator.\n\nThe first operand is the {\\bf format string}, and the second operand\nis a tuple of expressions.  The result is a string that contains\nthe values of the expressions, formatted according to the format\nstring.\n\nAs a simple example, the {\\bf format sequence} {\\tt \"\\%d\"} means that\nthe first expression in the tuple should be formatted as an\ninteger.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b": {"__data__": {"id_": "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "fd76a23c-a4e7-463d-a4e4-2a999724795f", "node_type": null, "metadata": {}, "hash": "c2f26a06a13a8c34996b3bba6eddd01e5f9a98fdb969824ee331a9cda28592f7"}, "3": {"node_id": "932ade67-eecb-47cd-b5fe-567427a3003a", "node_type": null, "metadata": {}, "hash": "07a84d5219ebb70e08a263e735277406d289fbe9f4653530e22aabcc83663663"}}, "hash": "fea80c013bc777615b447136967f5829cce51a5caf3c430029739f7a7570b906", "text": "Here the letter {\\em d} stands for ``decimal'':\n\n\\beforeverb\n\\begin{verbatim}\n>>> cars = 52\n>>> \"%d\" % cars\n'52'\n\\end{verbatim}\n\\afterverb\n%\nThe result is the string {\\tt '52'}, which is not to be confused\nwith the integer value {\\tt 52}.\n\nA format sequence can appear anywhere in the format string,\nso we can embed a value in a sentence:\n\n\\beforeverb\n\\begin{verbatim}\n>>> cars = 52\n>>> \"In July we sold %d cars.\" % cars\n'In July we sold 52 cars.'\n\\end{verbatim}\n\\afterverb\n%\nThe format sequence {\\tt \"\\%f\"} formats the next item in\nthe tuple as a floating-point number, and {\\tt \"\\%s\"} formats\nthe next item as a string:\n\n\\beforeverb\n\\begin{verbatim}\n>>> \"In %d days we made %f million %s.\" % (34,6.1,'dollars')\n'In 34 days we made 6.100000 million dollars.'\n\\end{verbatim}\n\\afterverb\n%\nBy default, the floating-point format prints six decimal places.\n\nThe number of expressions in the tuple has to match the number\nof format sequences in the string.  Also, the types of the\nexpressions have to match the format sequences:\n\n\\index{runtime error}\n\n\\beforeverb\n\\begin{verbatim}\n>>> \"%d %d %d\" % (1,2)\nTypeError: not enough arguments for format string\n>>> \"%d\" % 'dollars'\nTypeError: illegal argument type for built-in operation\n\\end{verbatim}\n\\afterverb\n%\nIn the first example, there aren't enough expressions; in the\nsecond, the expression is the wrong type.\n\nFor more control over the format of numbers, we can specify\nthe number of digits as part of the format sequence:\n\n\\beforeverb\n\\begin{verbatim}\n>>> \"%6d\" % 62\n'    62'\n>>> \"%12f\" % 6.1\n'    6.100000'\n\\end{verbatim}\n\\afterverb\n%\nThe number after the percent sign is the minimum number of spaces\nthe number will take up.  If the value provided takes fewer digits,\nleading spaces are added.  If the number of spaces is negative,\ntrailing spaces are added:\n\n\\beforeverb\n\\begin{verbatim}\n>>> \"%-6d\" % 62\n'62    '\n\\end{verbatim}\n\\afterverb\n%\nFor floating-point numbers, we can also\nspecify the number of digits after the decimal point:\n\n\\beforeverb\n\\begin{verbatim}\n>>> \"%12.2f\" % 6.1\n'        6.10'\n\\end{verbatim}\n\\afterverb\n%\nIn this example, the result takes up twelve spaces and includes two\ndigits after the decimal.  This format is useful for printing\ndollar amounts with the decimal points aligned.\n\n\\index{dictionary}\n\nFor example, imagine a dictionary that contains\nstudent names as keys and hourly wages as values.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "932ade67-eecb-47cd-b5fe-567427a3003a": {"__data__": {"id_": "932ade67-eecb-47cd-b5fe-567427a3003a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b", "node_type": null, "metadata": {}, "hash": "fea80c013bc777615b447136967f5829cce51a5caf3c430029739f7a7570b906"}, "3": {"node_id": "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935", "node_type": null, "metadata": {}, "hash": "440752e479fc4dedd1ba69410b16d0856ceefc1e0c71b515611ce14d07a4fce9"}}, "hash": "07a84d5219ebb70e08a263e735277406d289fbe9f4653530e22aabcc83663663", "text": "Here is a function that prints the contents of the dictionary\nas a formatted report:\n\n\\beforeverb\n\\begin{verbatim}\ndef report (wages) :\n  students = wages.keys()\n  students.sort()\n  for student in students :\n    print \"%-20s %12.2f\" % (student, wages[student])\n\\end{verbatim}\n\\afterverb\n%\nTo test this function, we'll create a small dictionary\nand print the contents:\n\n\\beforeverb\n\\begin{verbatim}\n>>> wages = {'mary': 6.23, 'joe': 5.45, 'joshua': 4.25}\n>>> report (wages)\njoe                          5.45\njoshua                       4.25\nmary                         6.23\n\\end{verbatim}\n\\afterverb\n%\nBy controlling the width of each value, we guarantee that the columns\nwill line up, as long as the names contain fewer than twenty-one\ncharacters and the wages are less than one billion dollars an hour.\n\n\n\\section{Directories}\n\\index{directory}\n\nWhen you create a new file by opening it and writing, the new\nfile goes in the current directory (wherever you were when\nyou ran the program).  Similarly, when you open a file for\nreading, Python looks for it in the current directory.\n\nIf you want to open a file somewhere else, you have to specify\nthe {\\bf path} to the file, which is the name of the directory\n(or folder) where the file is located:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   f = open(\"/usr/share/dict/words\",\"r\")\n>>>   print f.readline()\nAarhus\n\\end{verbatim}\n\\afterverb\n%\nThis example opens a file named {\\tt words} that resides in a\ndirectory named {\\tt dict}, which resides in {\\tt share}, which\nresides in {\\tt usr}, which resides in the top-level directory\nof the system, called {\\tt /}.\n\n\\index{path}\n\\index{delimiter}\n\nYou cannot use {\\tt /}\nas part of a filename; it is reserved as a delimiter between\ndirectory and filenames.\n\nThe file {\\tt /usr/share/dict/words} contains a list of words\nin alphabetical order, of which the first is the name of a\nDanish university.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935": {"__data__": {"id_": "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "932ade67-eecb-47cd-b5fe-567427a3003a", "node_type": null, "metadata": {}, "hash": "07a84d5219ebb70e08a263e735277406d289fbe9f4653530e22aabcc83663663"}, "3": {"node_id": "4a21db87-f1d9-4f48-97ed-ef89e1c22707", "node_type": null, "metadata": {}, "hash": "1539a4e6540a2bca7f8f8836e2e375cd96b6f518168a3ac4db8442cbdee1051e"}}, "hash": "440752e479fc4dedd1ba69410b16d0856ceefc1e0c71b515611ce14d07a4fce9", "text": "\\section{Pickling}\n\\index{pickling}\n\nIn order to put values into a file, you have to convert them\nto strings.  You have already seen how to do that with {\\tt str}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f.write (str(12.3))\n>>> f.write (str([1,2,3]))\n\\end{verbatim}\n\\afterverb\n%\nThe problem is that when you read the value back, you get a string.\nThe original type information has been lost.  In fact, you can't\neven tell where one value ends and the next begins:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   f.readline()\n'12.3[1, 2, 3]'\n\\end{verbatim}\n\\afterverb\n%\nThe solution is {\\bf pickling}, so called because it ``preserves''\ndata structures.  The {\\tt pickle} module contains the necessary\ncommands.  To use it, import {\\tt pickle} and then open the file in\nthe usual way:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import pickle\n>>> f = open(\"test.pck\",\"w\")\n\\end{verbatim}\n\\afterverb\n%\nTo store a data structure, use the {\\tt dump} method and\nthen close the file in the usual way:\n\n\\beforeverb\n\\begin{verbatim}\n>>> pickle.dump(12.3, f)\n>>> pickle.dump([1,2,3], f)\n>>> f.close()\n\\end{verbatim}\n\\afterverb\n%\nThen we can open the file for reading and load the data structures\nwe dumped:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"test.pck\",\"r\")\n>>> x = pickle.load(f)\n>>> x\n12.3\n>>> type(x)\n<type 'float'>\n>>> y = pickle.load(f)\n>>> y\n[1, 2, 3]\n>>> type(y)\n<type 'list'>\n\\end{verbatim}\n\\afterverb\n%\nEach time we invoke {\\tt load}, we get a single value from\nthe file, complete with its original type.\n\n\n\\section{Exceptions}\n\\index{try statement}\n\\index{statement!try}\n\\index{raise exception}\n\\index{handle exception}\n\\index{except statement}\n\\index{statement!except}\n\\index{exception}\n\nWhenever a runtime error occurs, it creates an\n{\\bf exception}.  Usually, the program stops and Python\nprints \nan error message.\n\nFor example, dividing by zero creates an exception:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print 55/0\nZeroDivisionError: integer division or modulo\n\\end{verbatim}\n\\afterverb\n%\nSo does accessing a nonexistent list item:\n\n\\beforeverb\n\\begin{verbatim}\n>>> a = []\n>>> print a[5]\nIndexError: list index out of range\n\\end{verbatim}\n\\afterverb\n%\nOr accessing a key that isn't in the dictionary:\n\n\\beforeverb\n\\begin{verbatim}\n>>> b = {}\n>>> print b['what']\nKeyError: what\n\\end{verbatim}\n\\afterverb\n%\nOr trying to open a nonexistent file:\n\n\\beforeverb\n\\begin{verbatim}\n>>> f = open(\"Idontexist\", \"r\")\nIOError: [Errno 2] No such file or directory: 'Idontexist'\n\\end{verbatim}\n\\afterverb\n%\nIn each case, the error\nmessage has two parts: the type of error before\nthe colon, and specifics about the error after the colon.\nNormally Python also prints a traceback of where the program\nwas, but we have omitted that from the examples.\n\n\\index{traceback}\n\nSometimes we want to execute an operation that could cause\nan exception, but we don't want the program to stop.  We can\n{\\bf handle} the exception using the {\\tt try} and\n{\\tt except} statements.\n\nFor example, we might prompt the user for the name of a file\nand then try to open it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4a21db87-f1d9-4f48-97ed-ef89e1c22707": {"__data__": {"id_": "4a21db87-f1d9-4f48-97ed-ef89e1c22707", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935", "node_type": null, "metadata": {}, "hash": "440752e479fc4dedd1ba69410b16d0856ceefc1e0c71b515611ce14d07a4fce9"}, "3": {"node_id": "ff5d255c-4788-45d5-b921-9cca84b2584a", "node_type": null, "metadata": {}, "hash": "d4a3047c021c639998773a0db2ad69874968db10e38ce6d4c4c23e48897df884"}}, "hash": "1539a4e6540a2bca7f8f8836e2e375cd96b6f518168a3ac4db8442cbdee1051e", "text": "If the file doesn't exist, we don't\nwant the program to crash; we want to handle the exception:\n\n\\beforeverb\n\\begin{verbatim}\nfilename = raw_input('Enter a file name: ')\ntry:\n  f = open (filename, \"r\")\nexcept IOError:\n  print 'There is no file named', filename\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt try} statement executes the statements in the first block.\nIf no exceptions occur, it ignores the {\\tt except} statement.  If an\nexception of type {\\tt IOError} occurs, it executes the statements in\nthe {\\tt except} branch and then continues.\n\nWe can encapsulate this capability in a function: {\\tt exists} takes a\nfilename and returns true if the file exists, false if it doesn't:\n\n\\beforeverb\n\\begin{verbatim}\ndef exists(filename):\n  try:\n    f = open(filename)\n    f.close()\n    return True\n  except IOError:\n    return False\n\\end{verbatim}\n\\afterverb\n%\nYou can use multiple {\\tt except} blocks to handle different kinds of\nexceptions.  The {\\em Python Reference Manual} has the details.\n\nIf your program detects an error condition, you can make it\n{\\bf raise} an exception.  Here is an example that gets input\nfrom the user and checks for the value 17.  \nAssuming that 17 is not valid input for some reason, we raise an\nexception.\n\n\\beforeverb\n\\begin{verbatim}\ndef inputNumber () :\n  x = input ('Pick a number: ')\n  if x == 17 :\n    raise ValueError, '17 is a bad number'\n  return x\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt raise} statement takes two arguments: the exception type and\nspecific information about the error.  {\\tt ValueError} is one of the\nexception types Python provides for a variety of occasions.  Other\nexamples include {\\tt TypeError}, {\\tt KeyError}, and my favorite,\n{\\tt NotImplementedError}.\n\nIf the function that called {\\tt inputNumber} handles the error,\nthen the program can continue; otherwise, Python prints the\nerror message and exits:\n\n\\beforeverb\n\\begin{verbatim}\n>>> inputNumber ()\nPick a number: 17\nValueError: 17 is a bad number\n\\end{verbatim}\n\\afterverb\n%\nThe error message includes the exception type and the\nadditional information you provided.\n\n\\begin{quote}\n{\\em As an exercise, write a function that uses {\\tt inputNumber}\nto input a number from the keyboard and that handles the\n{\\tt ValueError} exception.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ff5d255c-4788-45d5-b921-9cca84b2584a": {"__data__": {"id_": "ff5d255c-4788-45d5-b921-9cca84b2584a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1", "node_type": null, "metadata": {}, "hash": "7826336962347e4f949e64a37c4ade0177fd90bd37cad66a15096f8284c29e4c"}, "2": {"node_id": "4a21db87-f1d9-4f48-97ed-ef89e1c22707", "node_type": null, "metadata": {}, "hash": "1539a4e6540a2bca7f8f8836e2e375cd96b6f518168a3ac4db8442cbdee1051e"}}, "hash": "d4a3047c021c639998773a0db2ad69874968db10e38ce6d4c4c23e48897df884", "text": "\\end{quote}\n\n\n\\section{Glossary}\n\n\\index{file}\n\\index{text file}\n\\index{break statement}\n\\index{statement!break}\n\\index{continue statement}\n\\index{statement!continue}\n\\index{format operator}\n\\index{format string}\n\\index{operator!format}\n\\index{directory}\n\\index{pickle}\n\\index{try}\n\\index{raise exception}\n\\index{raise exception}\n\\index{handle exception}\n\\index{except statement}\n\\index{exception}\n\n\\begin{description}\n\n\\item[file:] A named entity, usually stored on a hard drive, floppy disk,\nor CD-ROM, that contains a stream of characters.\n\n\\item[directory:] A named collection of files, also called a folder.\n\n\\item[path:] A sequence of directory names that specifies the\nexact location of a file.\n\n\\item[text file:] A file that contains printable characters organized\ninto lines separated by newline characters.\n\n\\item[break statement:] A statement that causes the flow of execution\nto exit a loop.\n\n\\item[continue statement:] A statement that causes the current iteration\nof a loop to end.  The flow of execution goes to the top of the loop,\nevaluates the condition, and proceeds accordingly.\n\n\\item[format operator:] The {\\tt \\%} operator takes a format\nstring and a tuple of expressions and yields a string that includes\nthe expressions, formatted according to the format string.\n\n\\item[format string:] A string that contains printable characters\nand format sequences that indicate how to format values.\n\n\\item[format sequence:] A sequence of characters beginning with\n{\\tt \\%} that indicates how to format a value.\n\n\\item[pickle:] To write a data value in a file along with its\ntype information so that it can be reconstituted later.\n\n\\item[exception:] An error that occurs at runtime.\n\n\\item[handle:] To prevent an exception from terminating\na program using the {\\tt try}\nand {\\tt except} statements.\n\n\\item[raise:] To signal an exception using the {\\tt raise}\nstatement.\n\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9e3a1ee4-9a16-458d-9d23-3a155e95ef79": {"__data__": {"id_": "9e3a1ee4-9a16-458d-9d23-3a155e95ef79", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "3": {"node_id": "a5376a45-de84-4321-b327-d9e9c6742a8c", "node_type": null, "metadata": {}, "hash": "9d40abf92aabc151deeb50290e5dc23aa7146a691774e27b6b926ae21e5baed7"}}, "hash": "09e2f91ace6e3b0832a4449b8f755d2dd903e4574546a3a5b36e1bd8fe21eb8e", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Classes and objects}\n\\index{class}\n\\index{object}\n\n\n\\section{User-defined compound types}\n\\label{point}\n\\index{compound data type}\n\\index{data type!compound}\n\\index{user-defined data type}\n\\index{data type!user-defined}\n\\index{constructor}\n\nHaving used some of Python's built-in types, we are ready to create a\nuser-defined type: the {\\tt Point}.\n\nConsider the concept of a mathematical point.  In two dimensions, a\npoint is two numbers (coordinates) that are treated collectively as a\nsingle object.  In mathematical notation, points are often written in\nparentheses with a comma separating the coordinates. For example,\n$(0, 0)$ represents the origin, and $(x, y)$ represents the\npoint $x$ units to the right and $y$ units up from the origin.\n\nA natural way to represent a point in Python is with two\nfloating-point values.  The question, then, is how to group these two\nvalues into a compound object.  The quick and dirty solution\nis to use a list or tuple, and for some applications that might\nbe the best choice.\n\n\\index{floating-point}\n\nAn alternative is to define a new user-defined compound type, also\ncalled a {\\bf class}.  This approach involves a bit more effort, but\nit has advantages that will be apparent soon.\n\nA class definition looks like this:\n\n\\beforeverb\n\\begin{verbatim}\nclass Point:\n  pass\n\\end{verbatim}\n\\afterverb\n%\nClass definitions can appear anywhere in a program, but they are\nusually near the beginning (after the {\\tt import} statements).  The\nsyntax rules for a class definition are the same as for other compound\nstatements (see Section~\\ref{conditional execution}).\n\nThis definition creates a new class called {\\tt Point}.  The\n{\\bf pass} statement has no effect; it is only\nnecessary because a compound statement must have something in its\nbody.\n\nBy creating the {\\tt Point} class, we created a new type, also\ncalled {\\tt Point}.  The members of this type are called\n{\\bf instances} of the type or {\\bf objects}.  Creating a new instance\nis called {\\bf instantiation}.  To instantiate a {\\tt Point} object,\nwe call a function named (you guessed it) {\\tt Point}:\n\n\\index{instance!object}\n\\index{object instance}\n\\index{instantiation}\n\n\\beforeverb\n\\begin{verbatim}\nblank = Point()\n\\end{verbatim}\n\\afterverb\n%\nThe variable {\\tt blank} is assigned a reference to a new\n{\\tt Point} object.  A function like {\\tt Point} that creates\nnew objects is called a {\\bf constructor}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a5376a45-de84-4321-b327-d9e9c6742a8c": {"__data__": {"id_": "a5376a45-de84-4321-b327-d9e9c6742a8c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "9e3a1ee4-9a16-458d-9d23-3a155e95ef79", "node_type": null, "metadata": {}, "hash": "09e2f91ace6e3b0832a4449b8f755d2dd903e4574546a3a5b36e1bd8fe21eb8e"}, "3": {"node_id": "87d37a51-fbbf-4575-a224-dfbce78025c6", "node_type": null, "metadata": {}, "hash": "5e6eef98523896bc62410c1c73f53a52920519adc1b12c2ed8bf3ab19827f2d3"}}, "hash": "9d40abf92aabc151deeb50290e5dc23aa7146a691774e27b6b926ae21e5baed7", "text": "\\section{Attributes}\n\\index{attribute}\n\nWe can add new data to an instance using dot notation:\n\n\\beforeverb\n\\begin{verbatim}\n>>> blank.x = 3.0\n>>> blank.y = 4.0\n\\end{verbatim}\n\\afterverb\n%\nThis syntax is similar to the syntax for selecting a variable from a\nmodule, such as {\\tt math.pi} or {\\tt string.uppercase}.  In this case,\nthough, we are selecting a data item from an instance.  These\nnamed items are called {\\bf attributes}.\n\nThe following state diagram shows the result of these assignments:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/point.eps}}\n\\afterfig\n\nThe variable {\\tt blank} refers to a Point object, which\ncontains two attributes.  Each attribute refers to a\nfloating-point number.\n\nWe can read the value of an attribute using the same syntax:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print blank.y\n4.0\n>>> x = blank.x\n>>> print x\n3.0\n\\end{verbatim}\n\\afterverb\n%\nThe expression {\\tt blank.x} means, ``Go to the object {\\tt blank}\nrefers to and get the value of {\\tt x}.'' In this case, we assign that\nvalue to a variable named {\\tt x}.  There is no conflict between\nthe variable {\\tt x} and the attribute {\\tt x}.  The\npurpose of dot notation is to identify which variable you are\nreferring to unambiguously.\n\nYou can use dot notation as part of any expression, so the following\nstatements are legal:\n\n\\beforeverb\n\\begin{verbatim}\nprint '(' + str(blank.x) + ', ' + str(blank.y) + ')'\ndistanceSquared = blank.x * blank.x + blank.y * blank.y\n\\end{verbatim}\n\\afterverb\n%\nThe first line outputs {\\tt (3.0, 4.0)}; the second line calculates\nthe value 25.0.\n\nYou might be tempted to print the value of {\\tt blank} itself:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print blank\n<__main__.Point instance at 80f8e70>\n\\end{verbatim}\n\\afterverb\n%\nThe result indicates that {\\tt blank} is an instance of the {\\tt\nPoint} class and it was defined in {\\tt \\_\\_main\\_\\_}.  {\\tt 80f8e70}\nis the unique identifier for this object, written in hexadecimal (base\n16).  This is probably not the most informative way to display a {\\tt\nPoint} object.  You will see how to change it shortly.\n\n\\index{printing!object}\n\n\\begin{quote}\n{\\em As an exercise, create and print a {\\tt Point} object, and then\nuse {\\tt id} to print the object's unique identifier.\nTranslate the hexadecimal form into decimal and confirm that they\nmatch.}\n\\end{quote}\n\n\n\\section{Instances as arguments}\n\\index{instance}\n\\index{parameter}\n\nYou can pass an instance as an argument in the usual way.\nFor example:\n\n\\beforeverb\n\\begin{verbatim}\ndef printPoint(p):\n  print '(' + str(p.x) + ', ' + str(p.y) + ')'\n\\end{verbatim}\n\\afterverb\n%\n{\\tt printPoint} takes a point as an argument and displays it in\nthe standard format.  If you call {\\tt printPoint(blank)}, the\noutput is {\\tt (3.0, 4.0)}.\n\n\\begin{quote}\n{\\em As an exercise, rewrite the {\\tt distance} function from\nSection~\\ref{program development} so that it takes two {\\tt Point}s as\narguments instead of four numbers.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "87d37a51-fbbf-4575-a224-dfbce78025c6": {"__data__": {"id_": "87d37a51-fbbf-4575-a224-dfbce78025c6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "a5376a45-de84-4321-b327-d9e9c6742a8c", "node_type": null, "metadata": {}, "hash": "9d40abf92aabc151deeb50290e5dc23aa7146a691774e27b6b926ae21e5baed7"}, "3": {"node_id": "ddbf5900-58bf-41be-acf1-43b900410da6", "node_type": null, "metadata": {}, "hash": "cf00de856470d0f93df4216db55d35e75ddd0601cddb0ba350c4e8dd9cebf30b"}}, "hash": "5e6eef98523896bc62410c1c73f53a52920519adc1b12c2ed8bf3ab19827f2d3", "text": "\\section{Sameness}\n\\index{sameness}\n\nThe meaning of the word ``same'' seems perfectly clear until you give\nit some thought, and then you realize there is more to it than you\nexpected.\n\n\\index{ambiguity}\n\\index{natural language}\n\\index{language!}\n\nFor example, if you say, ``Chris and I have the same car,'' you mean\nthat his car and yours are the same make and model, but that they are\ntwo different cars.  If you say, ``Chris and I have the same mother,''\nyou mean that his mother and yours are the same person.\\footnote{Not all\nlanguages have the same problem.  For example, German has different\nwords for different kinds of sameness.  ``Same car'' in this context\nwould be ``gleiche Auto,'' and ``same mother'' would be ``selbe\nMutter.''}  So the idea of ``sameness'' is different depending on the\ncontext.\n\nWhen you talk about objects, there is a similar ambiguity.  For\nexample, if two {\\tt Point}s are the same, does that mean they\ncontain the same data (coordinates) or that they are actually\nthe same object?\n\nTo find out if two references refer to the same object, use\nthe {\\tt is} operator.  For example:\n\n\\beforeverb\n\\begin{verbatim}\n>>> p1 = Point()\n>>> p1.x = 3\n>>> p1.y = 4\n>>> p2 = Point()\n>>> p2.x = 3\n>>> p2.y = 4\n>>> p1 is p2\nFalse\n\\end{verbatim}\n\\afterverb\n%\nEven though {\\tt p1} and {\\tt p2} contain the same coordinates,\nthey are not the same object.  If we assign {\\tt p1} to\n{\\tt p2}, then the two variables are aliases of the same\nobject:\n\n\\beforeverb\n\\begin{verbatim}\n>>> p2 = p1\n>>> p1 is p2\nTrue\n\\end{verbatim}\n\\afterverb\n%\nThis type of equality is called {\\bf shallow equality} because\nit compares only the references, not the contents of the objects.\n\n\\index{equality}\n\\index{identity}\n\\index{shallow equality}\n\\index{deep equality}\n\nTo compare the contents of the objects---{\\bf deep equality}---we\ncan write a function called {\\tt samePoint}:\n\n\\beforeverb\n\\begin{verbatim}\ndef samePoint(p1, p2) :\n  return (p1.x == p2.x) and (p1.y == p2.y)\n\\end{verbatim}\n\\afterverb\n%\nNow if we create two different objects that contain the same\ndata, we can use {\\tt samePoint} to find out if they represent the\nsame point.\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\n>>> p1 = Point()\n>>> p1.x = 3\n>>> p1.y = 4\n>>> p2 = Point()\n>>> p2.x = 3\n>>> p2.y = 4\n>>> samePoint(p1, p2)\nTrue\n\\end{verbatim}\n\\afterverb\n%\nOf course, if the two variables refer to the same object,\nthey have both shallow and deep equality.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ddbf5900-58bf-41be-acf1-43b900410da6": {"__data__": {"id_": "ddbf5900-58bf-41be-acf1-43b900410da6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "87d37a51-fbbf-4575-a224-dfbce78025c6", "node_type": null, "metadata": {}, "hash": "5e6eef98523896bc62410c1c73f53a52920519adc1b12c2ed8bf3ab19827f2d3"}, "3": {"node_id": "98b2ce96-a564-4c85-8471-1014e50c45b1", "node_type": null, "metadata": {}, "hash": "946943857ee755604a90416a5e4b4d33aa5221a2e688316b802a1d7c67dc8ae0"}}, "hash": "cf00de856470d0f93df4216db55d35e75ddd0601cddb0ba350c4e8dd9cebf30b", "text": "\\section{Rectangles}\n\\index{rectangle}\n\nLet's say that we want a class to represent a rectangle.  The question\nis, what information do we have to provide in order to specify a\nrectangle? To keep things simple, assume that the rectangle is\noriented either vertically or horizontally, never at an angle.\n\nThere are a few possibilities: we could specify the center of the\nrectangle (two coordinates) and its size (width and height); or we\ncould specify one of the corners and the size; or we could specify two\nopposing corners.  A conventional choice is to specify the upper-left\ncorner of the rectangle and the size.\n\nAgain, we'll define a new class:\n\n\\beforeverb\n\\begin{verbatim}\nclass Rectangle:\n  pass\n\\end{verbatim}\n\\afterverb\n%\nAnd instantiate it:\n\n\\beforeverb\n\\begin{verbatim}\nbox = Rectangle()\nbox.width = 100.0\nbox.height = 200.0\n\\end{verbatim}\n\\afterverb\n%\nThis code creates a new {\\tt Rectangle} object with two floating-point\nattributes.  To specify the upper-left corner, we can embed an\nobject within an object!\n\n\\beforeverb\n\\begin{verbatim}\nbox.corner = Point()\nbox.corner.x = 0.0\nbox.corner.y = 0.0\n\\end{verbatim}\n\\afterverb\n%\nThe dot operator composes.  The expression {\\tt box.corner.x} means,\n``Go to the object {\\tt box} refers to and select the attribute named\n{\\tt corner}; then go to that object and select the attribute named\n{\\tt x}.''\n\nThe figure shows the state of this object:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/rectangle.eps}}\n\\afterfig", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "98b2ce96-a564-4c85-8471-1014e50c45b1": {"__data__": {"id_": "98b2ce96-a564-4c85-8471-1014e50c45b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "ddbf5900-58bf-41be-acf1-43b900410da6", "node_type": null, "metadata": {}, "hash": "cf00de856470d0f93df4216db55d35e75ddd0601cddb0ba350c4e8dd9cebf30b"}, "3": {"node_id": "1146c533-2788-4aa9-a68e-2f129677a095", "node_type": null, "metadata": {}, "hash": "a79d816ddaa242ae78b2fbbb57e01037234551b2ccf808209266b0d06f392cf5"}}, "hash": "946943857ee755604a90416a5e4b4d33aa5221a2e688316b802a1d7c67dc8ae0", "text": "\\section{Instances as return values}\n\\index{instance}\n\\index{return value}\n\nFunctions can return instances.  For example, {\\tt findCenter}\ntakes a {\\tt Rectangle} as an argument and returns a {\\tt Point}\nthat contains the coordinates of the center of the {\\tt Rectangle}:\n\n\\beforeverb\n\\begin{verbatim}\ndef findCenter(box):\n  p = Point()\n  p.x = box.corner.x + box.width/2.0\n  p.y = box.corner.y - box.height/2.0\n  return p\n\\end{verbatim}\n\\afterverb\n%\nTo call this function, pass {\\tt box} as an argument and assign\nthe result to a variable:\n\n\\beforeverb\n\\begin{verbatim}\n>>> center = findCenter(box)\n>>> printPoint(center)\n(50.0, -100.0)\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{Objects are mutable}\n\\index{object!mutable}\n\\index{mutable!object}\n\nWe can change the state of an object by making an assignment\nto one of its attributes.  For example, to change the size\nof a rectangle without changing its position, we could\nmodify the values of {\\tt width} and {\\tt height}:\n\n\\beforeverb\n\\begin{verbatim}\nbox.width = box.width + 50\nbox.height = box.height + 100\n\\end{verbatim}\n\\afterverb\n%\nWe could encapsulate this code in a method and\ngeneralize it to grow the rectangle by any amount:\n\n\\index{encapsulation}\n\\index{generalization}\n\n\\beforeverb\n\\begin{verbatim}\ndef growRect(box, dwidth, dheight) :\n  box.width = box.width + dwidth\n  box.height = box.height + dheight\n\\end{verbatim}\n\\afterverb\n%\nThe variables {\\tt dwidth} and {\\tt dheight} indicate how much the\nrectangle should grow in each direction.  Invoking this method has the\neffect of modifying the {\\tt Rectangle} that is passed as an argument.\n\nFor example, we could create a new {\\tt Rectangle} named {\\tt bob}\nand pass it to {\\tt growRect}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> bob = Rectangle()\n>>> bob.width = 100.0\n>>> bob.height = 200.0\n>>> bob.corner = Point()\n>>> bob.corner.x = 0.0\n>>> bob.corner.y = 0.0\n>>> growRect(bob, 50, 100)\n\\end{verbatim}\n\\afterverb\n%\nWhile {\\tt growRect} is running, the parameter {\\tt box} is an\nalias for {\\tt bob}.  Any changes made to {\\tt box} also\naffect {\\tt bob}.\n\n\\begin{quote}\n{\\em As an exercise, write a function named {\\tt moveRect} that takes\na {\\tt Rectangle} and two parameters named {\\tt dx} and {\\tt dy}.  It\nshould change the location of the rectangle by adding {\\tt dx}\nto the {\\tt x} coordinate of {\\tt corner} and adding {\\tt dy}\nto the {\\tt y} coordinate of {\\tt corner}.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1146c533-2788-4aa9-a68e-2f129677a095": {"__data__": {"id_": "1146c533-2788-4aa9-a68e-2f129677a095", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "98b2ce96-a564-4c85-8471-1014e50c45b1", "node_type": null, "metadata": {}, "hash": "946943857ee755604a90416a5e4b4d33aa5221a2e688316b802a1d7c67dc8ae0"}, "3": {"node_id": "5501c185-c58a-4ee2-8d66-f373eb14f7f4", "node_type": null, "metadata": {}, "hash": "99e9dfb7a97674614b7624ab714204a731b4d2bb19bcde2408d2b5674c269c50"}}, "hash": "a79d816ddaa242ae78b2fbbb57e01037234551b2ccf808209266b0d06f392cf5", "text": "\\section{Copying}\n\\label{embedded}\n\\index{aliasing}\n\\index{copying}\n\\index{copy module}\n\\index{module!copy}\n\nAliasing can make a program difficult to read because changes\nmade in one place might have unexpected effects in another place.\nIt is hard to keep track of all the variables that might refer\nto a given object.\n\nCopying an object is often an alternative to aliasing.\nThe {\\tt copy} module contains a function called {\\tt copy} that\ncan duplicate any object:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import copy\n>>> p1 = Point()\n>>> p1.x = 3\n>>> p1.y = 4\n>>> p2 = copy.copy(p1)\n>>> p1 == p2\nFalse\n>>> samePoint(p1, p2)\nTrue\n\\end{verbatim}\n\\afterverb\n%\nOnce we import the {\\tt copy} module, we can use the {\\tt copy} method\nto make a new {\\tt Point}.  {\\tt p1} and {\\tt p2} are not the\nsame point, but they contain the same data.\n\nTo copy a simple object like a {\\tt Point}, which doesn't\ncontain any embedded objects, {\\tt copy} is sufficient.  This is called \n{\\bf shallow copying}.\n\nFor something like a {\\tt Rectangle}, which contains a reference\nto a {\\tt Point}, {\\tt copy} doesn't do quite the right thing.  It\ncopies the reference to the {\\tt Point} object, so both the old\n{\\tt Rectangle} and the new one refer to a single {\\tt Point}.\n\n\\index{embedded reference}\n\\index{reference!embedded}\n\nIf we create a box, {\\tt b1}, in the usual way and then make\na copy, {\\tt b2}, using {\\tt copy}, the resulting\nstate diagram looks like this:\n\n\\vspace{0.1in}\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/rectangle2.eps}}\n\\afterfig\n\\vspace{0.1in}\n\nThis is almost certainly not what we want.  In this case, invoking\n{\\tt growRect} on one of the {\\tt Rectangles} would not affect\nthe other, but invoking {\\tt moveRect} on either would affect both!\nThis behavior is confusing and error-prone.\n\nFortunately, the {\\tt copy} module contains a method named {\\tt\ndeepcopy} that copies not only the object but also any embedded\nobjects.  You will not be surprised to learn that this operation is\ncalled a {\\bf deep copy}.\n\n\\beforeverb\n\\begin{verbatim}\n>>> b2 = copy.deepcopy(b1)\n\\end{verbatim}\n\\afterverb\n%\nNow {\\tt b1} and {\\tt b2} are completely separate objects.\n\nWe can use {\\tt deepcopy} to rewrite {\\tt growRect} so that\ninstead of modifying an existing {\\tt Rectangle}, it creates a new\n{\\tt Rectangle} that has the same location as the old one but new\ndimensions:\n\n\\beforeverb\n\\begin{verbatim}\ndef growRect(box, dwidth, dheight) :\n  import copy\n  newBox = copy.deepcopy(box)\n  newBox.width = newBox.width + dwidth\n  newBox.height = newBox.height + dheight\n  return newBox\n\\end{verbatim}\n\\afterverb\n%\n\n\\begin{quote}\n{\\em An an exercise, rewrite {\\tt moveRect} so that it creates and\nreturns a new {\\tt Rectangle} instead of modifying the old one.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5501c185-c58a-4ee2-8d66-f373eb14f7f4": {"__data__": {"id_": "5501c185-c58a-4ee2-8d66-f373eb14f7f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2d4bd6b2-e597-4231-9fd7-ee576f2d485d", "node_type": null, "metadata": {}, "hash": "0a5b5c31def51af47d686168fbcd18a8eb627fb655d88e86be7e30f597dbed2e"}, "2": {"node_id": "1146c533-2788-4aa9-a68e-2f129677a095", "node_type": null, "metadata": {}, "hash": "a79d816ddaa242ae78b2fbbb57e01037234551b2ccf808209266b0d06f392cf5"}}, "hash": "99e9dfb7a97674614b7624ab714204a731b4d2bb19bcde2408d2b5674c269c50", "text": "\\adjustpage{-2}\n\\pagebreak\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[class:] A user-defined compound type.\nA class can also be thought of\nas a template for the objects that are instances of it.\n\n\\item[instantiate:] To create an instance of a class.\n\n\\item[instance:] An object that belongs to a class.\n\n\\item[object:] A compound data type that is often used to\nmodel a thing or concept in the real world.\n\n\\item[constructor:] A method used to create new objects.\n\n\\item[attribute:] One of the named data items that makes up\nan instance.\n\n\\item[shallow equality:]  Equality of references, or two\nreferences that point to the same object.\n\n\\item[deep equality:]  Equality of values, or two references\nthat point to objects that have the same value.\n\n\\item[shallow copy:] To copy the contents of an object, including\nany references to embedded objects; implemented by the {\\tt copy}\nfunction in the {\\tt copy} module.\n\n\\item[deep copy:] To copy the contents of an object as well as any\nembedded objects, and any objects embedded in them, and so on;\nimplemented by the {\\tt deepcopy} function in the {\\tt copy} module.\n\n\\index{class}\n\\index{instantiate}\n\\index{instance}\n\\index{object}\n\\index{constructor}\n\\index{attribute}\n\\index{shallow equality}\n\\index{deep equality}\n\\index{shallow copy}\n\\index{deep copy}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7ce69457-887b-4129-bc12-be646345587b": {"__data__": {"id_": "7ce69457-887b-4129-bc12-be646345587b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9", "node_type": null, "metadata": {}, "hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "3": {"node_id": "a19ef6b2-886a-49f0-972c-adb25d81ea44", "node_type": null, "metadata": {}, "hash": "4baaf7b2aa101a77215f23e189ff222d7b0a287f9ef2eafc57bd72fea437f727"}}, "hash": "ca7c78b3730f011f3219cf582de6261520bd15fb73cc9ac44e08b27091db4c4f", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Classes and functions}\n\\label{time}\n\\index{function}\n\\index{method}\n\n\n\\section{Time}\n\nAs another example of a user-defined type, we'll define a class called\n{\\tt Time} that records the time of day.  The class definition looks\nlike this:\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  pass\n\\end{verbatim}\n\\afterverb\n%\nWe can create a new {\\tt Time} object and assign\nattributes for hours, minutes, and seconds:\n\n\\beforeverb\n\\begin{verbatim}\ntime = Time()\ntime.hours = 11\ntime.minutes = 59\ntime.seconds = 30\n\\end{verbatim}\n\\afterverb\n%\nThe state diagram for the {\\tt Time} object looks like this:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/time.eps}}\n\\afterfig\n\n\\begin{quote}\n{\\em As an exercise, write a function {\\tt printTime} that takes a \n{\\tt Time} object\nas an argument and prints it in the form {\\tt hours:minutes:seconds}.}\n\\end{quote}\n\n\\begin{quote}\n{\\em As a second exercise, write a boolean function {\\tt after} that\ntakes two {\\tt Time} objects, {\\tt t1} and {\\tt t2}, as arguments, and\nreturns {\\tt True} if {\\tt t1} follows {\\tt t2} chronologically and\n{\\tt False} otherwise.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a19ef6b2-886a-49f0-972c-adb25d81ea44": {"__data__": {"id_": "a19ef6b2-886a-49f0-972c-adb25d81ea44", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9", "node_type": null, "metadata": {}, "hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "2": {"node_id": "7ce69457-887b-4129-bc12-be646345587b", "node_type": null, "metadata": {}, "hash": "ca7c78b3730f011f3219cf582de6261520bd15fb73cc9ac44e08b27091db4c4f"}, "3": {"node_id": "914c76dc-6aab-47cf-9ab6-731981d942fe", "node_type": null, "metadata": {}, "hash": "2bb253b03abf79883db91c75870deeed1338862fd3737db7e30c66510f030892"}}, "hash": "4baaf7b2aa101a77215f23e189ff222d7b0a287f9ef2eafc57bd72fea437f727", "text": "\\section{Pure functions}\n\\index{pure function}\n\\index{function type!pure}\n\nIn the next few sections, we'll write two versions of a function\ncalled {\\tt addTime}, which calculates the sum of two {\\tt Time}s.\nThey will demonstrate two kinds of functions: pure functions and\nmodifiers.\n\nThe following is a rough version of {\\tt addTime}:\n\n\\beforeverb\n\\begin{verbatim}\ndef addTime(t1, t2):\n  sum = Time()\n  sum.hours = t1.hours + t2.hours\n  sum.minutes = t1.minutes + t2.minutes\n  sum.seconds = t1.seconds + t2.seconds\n  return sum\n\\end{verbatim}\n\\afterverb\n%\nThe function creates a new {\\tt Time} object, initializes its\nattributes, and returns a reference to the new object.  This is called\na {\\bf pure function} because it does not modify any of the objects\npassed to it as arguments and it has no side effects, such as\ndisplaying a value or getting user input.\n\nHere is an example of how to use this function.  We'll create two {\\tt\nTime} objects: {\\tt currentTime}, which contains the current time; and\n{\\tt breadTime}, which contains the amount of time it takes for a\nbreadmaker to make bread.  Then we'll use {\\tt addTime} to figure out\nwhen the bread will be done.  If you haven't finished writing {\\tt\nprintTime} yet, take a look ahead to Section~\\ref{printTime} before\nyou try this:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time()\n>>> currentTime.hours = 9\n>>> currentTime.minutes = 14\n>>> currentTime.seconds =  30\n\n>>> breadTime = Time()\n>>> breadTime.hours =  3\n>>> breadTime.minutes =  35\n>>> breadTime.seconds =  0\n\n>>> doneTime = addTime(currentTime, breadTime)\n>>> printTime(doneTime)\n\\end{verbatim}\n\\afterverb\n%\nThe output of this program is {\\tt 12:49:30}, which is correct. On the\nother hand, there are cases where the result is not correct.  Can you\nthink of one?\n\nThe problem is that this function does not deal with cases where the\nnumber of seconds or minutes adds up to more than sixty.  When that\nhappens, we have to ``carry'' the extra seconds into the minutes column\nor the extra minutes into the hours column.\n\nHere's a second corrected version of the function:\n\n\\beforeverb\n\\begin{verbatim}\ndef addTime(t1, t2):\n  sum = Time()\n  sum.hours = t1.hours + t2.hours\n  sum.minutes = t1.minutes + t2.minutes\n  sum.seconds = t1.seconds + t2.seconds\n\n  if sum.seconds >= 60:\n    sum.seconds = sum.seconds - 60\n    sum.minutes = sum.minutes + 1\n\n  if sum.minutes >= 60:\n    sum.minutes = sum.minutes - 60\n    sum.hours = sum.hours + 1\n\n  return sum\n\\end{verbatim}\n\\afterverb\n%\nAlthough this function is correct, it is starting to get big.  Later\nwe will suggest an alternative approach that yields shorter code.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "914c76dc-6aab-47cf-9ab6-731981d942fe": {"__data__": {"id_": "914c76dc-6aab-47cf-9ab6-731981d942fe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9", "node_type": null, "metadata": {}, "hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "2": {"node_id": "a19ef6b2-886a-49f0-972c-adb25d81ea44", "node_type": null, "metadata": {}, "hash": "4baaf7b2aa101a77215f23e189ff222d7b0a287f9ef2eafc57bd72fea437f727"}, "3": {"node_id": "935bce25-2dce-433f-a117-7583d47ec888", "node_type": null, "metadata": {}, "hash": "f83432b03f65234a53edb52755f63594d0536a0667d3c4b8da37022fd371562e"}}, "hash": "2bb253b03abf79883db91c75870deeed1338862fd3737db7e30c66510f030892", "text": "\\section{Modifiers}\n\\label{increment}\n\\index{modifier}\n\\index{function type!modifier}\n\nThere are times when it is useful for a function to modify one or more\nof the objects it gets as arguments.  Usually, the caller keeps a\nreference to the objects it passes, so any changes the function makes\nare visible to the caller.  Functions that work this way are called\n{\\bf modifiers}.\n\n{\\tt increment}, which adds a given number of seconds to a {\\tt Time}\nobject, would be written most naturally as a\nmodifier.  A rough draft of the function\nlooks like this:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\ndef increment(time, seconds):\n  time.seconds = time.seconds + seconds\n\n  if time.seconds >= 60:\n    time.seconds = time.seconds - 60\n    time.minutes = time.minutes + 1\n\n  if time.minutes >= 60:\n    time.minutes = time.minutes - 60\n    time.hours = time.hours + 1\n\\end{verbatim}\n\\afterverb\n%\nThe first line performs the basic operation; the remainder deals\nwith the special cases we saw before.\n\nIs this function correct?  What happens if the parameter {\\tt seconds} is\nmuch greater than sixty?  In that case, it is not enough to carry\nonce; we have to keep doing it until {\\tt seconds} is less than sixty.\nOne solution is to\nreplace the {\\tt if} statements with {\\tt while}\nstatements:\n\n\\beforeverb\n\\begin{verbatim}\ndef increment(time, seconds):\n  time.seconds = time.seconds + seconds\n\n  while time.seconds >= 60:\n    time.seconds = time.seconds - 60\n    time.minutes = time.minutes + 1\n\n  while time.minutes >= 60:\n    time.minutes = time.minutes - 60\n    time.hours = time.hours + 1\n\\end{verbatim}\n\\afterverb\n%\nThis function is now correct, but it is not the most efficient\nsolution.\n\n\\begin{quote}\n{\\em As an exercise, rewrite this function so that it doesn't contain \nany loops.}\n\\end{quote}\n\n\\begin{quote}\n{\\em As a second exercise, rewrite {\\tt increment} as a pure function, and\nwrite function calls to both versions.}\n\\end{quote}\n\n\n\\section{Which is better?}\n\\index{functional programming style}\n\n\\adjustpage{1}\n\nAnything that can be done with modifiers can also be done with pure\nfunctions.  In fact, some programming languages only allow pure\nfunctions.  There is some evidence that programs that use pure\nfunctions are faster to develop and less error-prone than programs\nthat use modifiers.  Nevertheless, modifiers are convenient at times,\nand in some cases, functional programs are less efficient.\n\nIn general, we recommend that you write pure functions whenever it is\nreasonable to do so and resort to modifiers only if there is a\ncompelling advantage.  This approach might be called a {\\bf functional\nprogramming style}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "935bce25-2dce-433f-a117-7583d47ec888": {"__data__": {"id_": "935bce25-2dce-433f-a117-7583d47ec888", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9", "node_type": null, "metadata": {}, "hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "2": {"node_id": "914c76dc-6aab-47cf-9ab6-731981d942fe", "node_type": null, "metadata": {}, "hash": "2bb253b03abf79883db91c75870deeed1338862fd3737db7e30c66510f030892"}, "3": {"node_id": "51d8576b-7e29-4750-b6b9-0f17693077d5", "node_type": null, "metadata": {}, "hash": "6e1cd873a606730dcbbdac3c8bad1d3343c396891f9e2b9757a9b98f94a85ce3"}}, "hash": "f83432b03f65234a53edb52755f63594d0536a0667d3c4b8da37022fd371562e", "text": "\\section{Prototype development versus planning}\n\\label{convert}\n\\index{prototype development}\n\nIn this chapter, we demonstrated an approach to program\ndevelopment that we call {\\bf prototype development}. In each\ncase, we wrote a rough draft (or prototype) that performed the basic\ncalculation and then tested it on a few cases, correcting flaws as we\nfound them.\n\nAlthough this approach can be effective, it can lead to code that is\nunnecessarily complicated---since it deals with many special\ncases---and unreliable---since it is hard to know if you have found\nall the errors.\n\nAn alternative is {\\bf planned development}, in which high-level insight\ninto the problem can make the programming much easier.  In this case,\nthe insight is that a {\\tt Time} object is really a three-digit number\nin base 60!  The {\\tt second} component is the ``ones column,'' the\n{\\tt minute} component is the ``sixties column,'' and the {\\tt hour}\ncomponent is the ``thirty-six hundreds column.''\n\nWhen we wrote {\\tt addTime} and {\\tt increment}, we were effectively\ndoing addition in base 60, which is why we had to carry from one\ncolumn to the next.\n\nThis observation suggests another approach to the whole problem---we\ncan convert a {\\tt Time} object into a single number and take\nadvantage of the fact that the computer knows how to do arithmetic\nwith numbers.  The following function converts a {\\tt Time}\nobject into an integer:\n\n\\beforeverb\n\\begin{verbatim}\ndef convertToSeconds(t):\n  minutes = t.hours * 60 + t.minutes\n  seconds = minutes * 60 + t.seconds\n  return seconds\n\\end{verbatim}\n\\afterverb\n%\nNow, all we need is a way to convert from an integer to a {\\tt Time}\nobject:\n\n\\adjustpage{1}\n\n\\beforeverb\n\\begin{verbatim}\ndef makeTime(seconds):\n  time = Time()\n  time.hours = seconds // 3600\n  time.minutes = (seconds%3600) // 60\n  time.seconds = seconds%60\n  return time\n\\end{verbatim}\n\\afterverb\n%\nYou might have to think a bit to convince yourself that this function\nis correct.  Assuming you are convinced, you can use it and\n{\\tt convertToSeconds}\nto rewrite {\\tt addTime}:\n\n\\beforeverb\n\\begin{verbatim}\ndef addTime(t1, t2):\n  seconds = convertToSeconds(t1) + convertToSeconds(t2)\n  return makeTime(seconds)\n\\end{verbatim}\n\\afterverb\n%\nThis version is much shorter than the original, and it is much easier to\ndemonstrate that it is correct.\n\n\\begin{quote}\n{\\em As an exercise, rewrite {\\tt increment} the same way.}\n\\end{quote}\n\n\n\\section{Generalization}\n\\index{generalization}\n\nIn some ways, converting from base 60 to base 10 and back is harder\nthan just dealing with times.  Base conversion is more abstract; our\nintuition for dealing with times is better.\n\nBut if we have the insight to treat times as base 60 numbers and make\nthe investment of writing the conversion functions ({\\tt\nconvertToSeconds} and {\\tt makeTime}), we get a program that is\nshorter, easier to read and debug, and more reliable.\n\nIt is also easier to add features later.  For example, imagine\nsubtracting two {\\tt Time}s to find the duration between them.  The\nna\\\"{\\i}ve approach would be to implement subtraction with borrowing.\nUsing the conversion functions would be easier and more likely to be\ncorrect.\n\nIronically, sometimes making a problem harder (or more general) makes it\neasier (because there are fewer special cases and fewer opportunities\nfor error).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "51d8576b-7e29-4750-b6b9-0f17693077d5": {"__data__": {"id_": "51d8576b-7e29-4750-b6b9-0f17693077d5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef7906f0-0f42-4ca1-aaea-654d1c6674a9", "node_type": null, "metadata": {}, "hash": "05a1e2b7fecdfcc0cff6fba1318a82c4e45728db6cccbaca5cdb52d57ba9d74f"}, "2": {"node_id": "935bce25-2dce-433f-a117-7583d47ec888", "node_type": null, "metadata": {}, "hash": "f83432b03f65234a53edb52755f63594d0536a0667d3c4b8da37022fd371562e"}}, "hash": "6e1cd873a606730dcbbdac3c8bad1d3343c396891f9e2b9757a9b98f94a85ce3", "text": "\\section{Algorithms}\n\\index{algorithm}\n\nWhen you write a general solution for a class of problems, as opposed\nto a specific solution to a single problem, you have written an {\\bf\nalgorithm}.  We mentioned this word before but did not define it\ncarefully.  It is not easy to define, so we will try a couple of\napproaches.\n\nFirst, consider something that is not an algorithm.  When you learned\nto multiply single-digit numbers, you probably memorized the\nmultiplication table.  In effect, you memorized 100 specific solutions.\nThat kind of knowledge is not algorithmic.\n\nBut if you were ``lazy,'' you probably cheated by learning a few\ntricks.  For example, to find the product of $n$ and 9, you can\nwrite $n-1$ as the first digit and $10-n$ as the second\ndigit.  This trick is a general solution for multiplying any\nsingle-digit number by 9.  That's an algorithm!\n\nSimilarly, the techniques you learned for addition with carrying,\nsubtraction with borrowing, and long division are all algorithms.  One\nof the characteristics of algorithms is that they do not require any\nintelligence to carry out.  They are mechanical processes in which\neach step follows from the last according to a simple set of rules.\n\nIn our opinion, it is embarrassing that humans spend so much time in\nschool learning to execute algorithms that, quite literally, require\nno intelligence.\n\nOn the other hand, the process of designing algorithms is interesting,\nintellectually challenging, and a central part of what we call\nprogramming.\n\nSome of the things that people do naturally, without difficulty or\nconscious thought, are the hardest to express algorithmically.\nUnderstanding natural language is a good example.  We all do it, but\nso far no one has been able to explain {\\em how} we do it, at least\nnot in the form of an algorithm.\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[pure function:] A function that does not modify any of the objects it\nreceives as arguments.  Most pure functions are fruitful.\n\n\\item[modifier:] A function that changes one or more of the objects it\nreceives as arguments.  Most modifiers are fruitless.\n\n\\item[functional programming style:] A style of program design in which the\nmajority of functions are pure.\n\n\\item[prototype development:] A way of developing programs starting with a\nprototype and gradually testing and improving it.\n\n\\item[planned development:] A way of developing programs that involves\nhigh-level insight into the problem and more planning than incremental\ndevelopment or prototype development.\n\n\\item[algorithm:] A set of instructions for solving a class of problems by a\nmechanical, unintelligent process.\n\n\\index{pure function}\n\\index{modifier}\n\\index{functional programming style}\n\\index{incremental development}\n\\index{development!incremental}\n\\index{planned development}\n\\index{development!planned}\n\\index{algorithm}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "55da5c49-c77a-4ce6-bd25-70b055db9658": {"__data__": {"id_": "55da5c49-c77a-4ce6-bd25-70b055db9658", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "3": {"node_id": "ba390c38-cbab-4d5e-8737-21c68d6599e7", "node_type": null, "metadata": {}, "hash": "1a5a9aa0002ddef1d1557bf29f583276843c7d92c259e266efcec81402c206de"}}, "hash": "3d3ad5040d68562d80881264221853bee312c95716209c65eeb1dae802613120", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Classes and methods}\n\n\n\\section{Object-oriented features}\n\\index{object-oriented programming language}\n\\index{object-oriented programming}\n\nPython is an {\\bf object-oriented programming language}, which means\nthat it provides features that support {\\bf object-oriented\nprogramming}.\n\nIt is not easy to define object-oriented programming, but we have\nalready seen some of its characteristics:\n\n\\begin{itemize}\n\n\\item Programs are made up of object definitions and function\ndefinitions, and most of the computation is expressed in terms\nof operations on objects.\n\n\\item Each object definition corresponds to some object or concept\nin the real world, and the functions that operate on that object\ncorrespond to the ways real-world objects interact.\n\n\\end{itemize}\n\nFor example, the {\\tt Time} class defined in Chapter~\\ref{time}\ncorresponds to the way people record the time of day, and the\nfunctions we defined correspond to the kinds of things people do with\ntimes.  Similarly, the {\\tt Point} and {\\tt Rectangle} classes\ncorrespond to the mathematical concepts of a point and a rectangle.\n\nSo far, we have not taken advantage of the features Python provides to\nsupport object-oriented programming.  Strictly speaking, these features are\nnot necessary.  For the most part, they provide an alternative syntax\nfor things we have already done, but in many cases, the\nalternative is more concise and more accurately conveys the structure of\nthe program.\n\nFor example, in the {\\tt Time} program, there is no obvious\nconnection between the class definition and the function definitions\nthat follow.  With some examination, it is apparent that every function\ntakes at least one {\\tt Time} object as an argument.\n\nThis observation is the motivation for {\\bf methods}.  We have already\nseen some methods, such as {\\tt keys} and {\\tt values}, which were\ninvoked on dictionaries.  Each method is associated with a class and is\nintended to be invoked on instances of that class.\n\n\\index{method}\n\\index{function}\n\\index{instance!object}\n\\index{object instance}\n\nMethods are just like functions, with\ntwo differences:\n\n\\begin{itemize}\n\n\\item Methods are defined inside a class definition in order\nto make the relationship between the class and the method explicit.\n\n\\item The syntax for invoking a method is different from the\nsyntax for calling a function.\n\n\\end{itemize}\n\nIn the next few sections, we will take the functions from the previous\ntwo chapters and transform them into methods.  This transformation is\npurely mechanical; you can do it simply by following a sequence of\nsteps.  If you are comfortable converting from one form to another,\nyou will be able to choose the best form for whatever you are doing.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ba390c38-cbab-4d5e-8737-21c68d6599e7": {"__data__": {"id_": "ba390c38-cbab-4d5e-8737-21c68d6599e7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "55da5c49-c77a-4ce6-bd25-70b055db9658", "node_type": null, "metadata": {}, "hash": "3d3ad5040d68562d80881264221853bee312c95716209c65eeb1dae802613120"}, "3": {"node_id": "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107", "node_type": null, "metadata": {}, "hash": "3894241940c94a0e32a0e323c09a4bba1e11147200eba206597d7efdc1456b7b"}}, "hash": "1a5a9aa0002ddef1d1557bf29f583276843c7d92c259e266efcec81402c206de", "text": "\\section{{\\tt printTime}}\n\\label{printTime}\n\\index{printing!object}\n\nIn Chapter~\\ref{time}, we defined a class named\n{\\tt Time} and you wrote a function named {\\tt printTime}, which\nshould have looked something like this:\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  pass\n\ndef printTime(time):\n  print str(time.hours) + \":\" + \\\n        str(time.minutes) + \":\" + \\\n        str(time.seconds)\n\\end{verbatim}\n\\afterverb\n%\nTo call this function, we passed a {\\tt Time} object as an argument:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time()\n>>> currentTime.hours = 9\n>>> currentTime.minutes = 14\n>>> currentTime.seconds = 30\n>>> printTime(currentTime)\n\\end{verbatim}\n\\afterverb\n%\nTo make {\\tt printTime} a method, all we have to do is\nmove the function definition inside the class definition.  Notice\nthe change in indentation.\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  def printTime(time):\n    print str(time.hours) + \":\" +  \\\n          str(time.minutes) + \":\" +  \\\n          str(time.seconds)\n\\end{verbatim}\n\\afterverb\n%\nNow we can invoke {\\tt printTime} using dot notation.\n\n\\index{dot notation}\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime.printTime()\n\\end{verbatim}\n\\afterverb\n%\nAs usual, the object on which the method is invoked appears\nbefore the dot and the\nname of the method appears after the dot.\n\nThe object on which the method is invoked is assigned to the\nfirst parameter, so in this case {\\tt currentTime} is assigned\nto the parameter {\\tt time}.\n\nBy convention, the first parameter of a method is\ncalled {\\tt self}.  The reason for this is a little\nconvoluted, but it is based on a useful metaphor.\n\nThe syntax for a function call, {\\tt printTime(currentTime)},\nsuggests that the function is the active agent.  It says\nsomething like, ``Hey {\\tt printTime}!  Here's an object for\nyou to print.''\n\nIn object-oriented programming, the objects are the active\nagents.  An invocation like {\\tt currentTime.printTime()}\nsays ``Hey {\\tt currentTime}!  Please print yourself!''\n\nThis change in perspective might be more polite, but\nit is not obvious that it is useful.  In the examples we\nhave seen so far, it may not be.  But sometimes shifting\nresponsibility from the functions onto the objects\nmakes it possible to write more versatile functions,\nand makes it easier to maintain and reuse code.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107": {"__data__": {"id_": "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "ba390c38-cbab-4d5e-8737-21c68d6599e7", "node_type": null, "metadata": {}, "hash": "1a5a9aa0002ddef1d1557bf29f583276843c7d92c259e266efcec81402c206de"}, "3": {"node_id": "b62efdf3-cde0-49ba-a7d5-68d8a09f3118", "node_type": null, "metadata": {}, "hash": "8b2375437d05a095f1c85fe363b70772b135362e793a36290f674c50e64483f4"}}, "hash": "3894241940c94a0e32a0e323c09a4bba1e11147200eba206597d7efdc1456b7b", "text": "\\section{Another example}\n\nLet's convert {\\tt increment} (from Section~\\ref{increment}) to a\nmethod.  To save space, we will leave out previously defined methods,\nbut you should keep them in your version:\n\n\\adjustpage{-1}\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  #previous method definitions here...\n\n  def increment(self, seconds):\n    self.seconds = seconds + self.seconds\n\n    while self.seconds >= 60:\n      self.seconds = self.seconds - 60\n      self.minutes = self.minutes + 1\n\n    while self.minutes >= 60:\n      self.minutes = self.minutes - 60\n      self.hours = self.hours + 1\n\\end{verbatim}\n\\afterverb\n%\nThe transformation is purely mechanical---we move the method\ndefinition into the class definition and change the name of the first\nparameter.\n\nNow we can invoke {\\tt increment} as a method.\n\n\\beforeverb\n\\begin{verbatim}\ncurrentTime.increment(500)\n\\end{verbatim}\n\\afterverb\n%\nAgain, the object on which the method is invoked gets assigned\nto the first parameter, {\\tt self}.  The second parameter,\n{\\tt seconds} gets the value {\\tt 500}.\n\n\\begin{quote}\n{\\em As an exercise, convert {\\tt convertToSeconds} \n(from Section~\\ref{convert}) to a method in the\n{\\tt Time} class.}\n\\end{quote}\n\n\n\\section{A more complicated example}\n\nThe {\\tt after} function is slightly more complicated because it\noperates on two {\\tt Time} objects, not just one.  We can only convert\none of the parameters to {\\tt self}; the other stays the same:\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  #previous method definitions here...\n\n  def after(self, time2):\n    if self.hour > time2.hour:\n      return 1\n    if self.hour < time2.hour:\n      return 0\n\n    if self.minute > time2.minute:\n      return 1\n    if self.minute < time2.minute:\n      return 0\n\n    if self.second > time2.second:\n      return 1\n    return 0\n\\end{verbatim}\n\\afterverb\n%\nWe invoke this method on one object and pass the other as an argument:\n\n\\beforeverb\n\\begin{verbatim}\nif doneTime.after(currentTime):\n  print \"The bread is not done yet.\"\n\\end{verbatim}\n\\afterverb\n%\nYou can almost read the invocation like English: ``If the done-time is\nafter the current-time, then...''", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b62efdf3-cde0-49ba-a7d5-68d8a09f3118": {"__data__": {"id_": "b62efdf3-cde0-49ba-a7d5-68d8a09f3118", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107", "node_type": null, "metadata": {}, "hash": "3894241940c94a0e32a0e323c09a4bba1e11147200eba206597d7efdc1456b7b"}, "3": {"node_id": "63f94e80-9f22-4700-ae0d-393029b21a47", "node_type": null, "metadata": {}, "hash": "2f9299287a3afeaf3b2def0068bf39ce1eca2146b935474248cf094e47c86b99"}}, "hash": "8b2375437d05a095f1c85fe363b70772b135362e793a36290f674c50e64483f4", "text": "\\section{Optional arguments}\n\nWe have seen built-in functions that take a variable number of\narguments.  For example, {\\tt string.find} can take two, three, or\nfour arguments.\n\nIt is possible to write user-defined functions with optional argument\nlists.  For example, we can upgrade our own version of {\\tt find} to do\nthe same thing as {\\tt string.find}.\n\nThis is the original version from Section~\\ref{find}:\n\n\\beforeverb\n\\begin{verbatim}\ndef find(str, ch):\n  index = 0\n  while index < len(str):\n    if str[index] == ch:\n      return index\n    index = index + 1\n  return -1\n\\end{verbatim}\n\\afterverb\n%\nThis is the new and improved version:\n\n\\beforeverb\n\\begin{verbatim}\ndef find(str, ch, start=0):\n  index = start\n  while index < len(str):\n    if str[index] == ch:\n      return index\n    index = index + 1\n  return -1\n\\end{verbatim}\n\\afterverb\n%\nThe third parameter, {\\tt start}, is optional because a default value,\n{\\tt 0}, is provided.  If we invoke {\\tt find} with only two\narguments, it uses the default value and starts from the beginning of\nthe string:\n\n\\beforeverb\n\\begin{verbatim}\n>>> find(\"apple\", \"p\")\n1\n\\end{verbatim}\n\\afterverb\n%\nIf we provide a third argument, it {\\bf overrides} the default:\n\n\\beforeverb\n\\begin{verbatim}\n>>> find(\"apple\", \"p\", 2)\n2\n>>> find(\"apple\", \"p\", 3)\n-1\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, add a fourth parameter, {\\tt end}, that specifies where\nto stop looking.\n\nWarning: This exercise is a bit tricky.  The default value of\n{\\tt end} should be {\\tt len(str)}, but that doesn't work.  The\ndefault values are evaluated when the function is defined, not when it\nis called.  When {\\tt find} is defined, {\\tt str} doesn't exist yet,\nso you can't find its length.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "63f94e80-9f22-4700-ae0d-393029b21a47": {"__data__": {"id_": "63f94e80-9f22-4700-ae0d-393029b21a47", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "b62efdf3-cde0-49ba-a7d5-68d8a09f3118", "node_type": null, "metadata": {}, "hash": "8b2375437d05a095f1c85fe363b70772b135362e793a36290f674c50e64483f4"}, "3": {"node_id": "51feec6d-2627-4b9e-a339-7524953b135c", "node_type": null, "metadata": {}, "hash": "25019c40bdb85ee5999eedd9249928dfff52668c73bda9c1fe41d1be4c625a8a"}}, "hash": "2f9299287a3afeaf3b2def0068bf39ce1eca2146b935474248cf094e47c86b99", "text": "\\section{The initialization method}\n\\index{initialization method}\n\\index{method!initialization}\n\nThe {\\bf initialization method} is\na special method that is invoked when an object is created.  The name\nof this method is {\\tt \\_\\_init\\_\\_} (two underscore characters,\nfollowed by {\\tt init}, and then two more underscores).  An\ninitialization method for the {\\tt Time} class looks like this:\n\n\\beforeverb\n\\begin{verbatim}\nclass Time:\n  def __init__(self, hours=0, minutes=0, seconds=0):\n    self.hours = hours\n    self.minutes = minutes\n    self.seconds = seconds\n\\end{verbatim}\n\\afterverb\n%\nThere is no conflict between the attribute {\\tt self.hours}\nand the parameter {\\tt hours}.  Dot notation specifies which\nvariable we are referring to.\n\n\\index{dot notation}\n\nWhen we invoke the {\\tt Time} constructor, the arguments we provide\nare passed along to {\\tt init}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time(9, 14, 30)\n>>> currentTime.printTime()\n9:14:30\n\\end{verbatim}\n\\afterverb\n%\nBecause the arguments are optional, we can omit them:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time()\n>>> currentTime.printTime()\n0:0:0\n\\end{verbatim}\n\\afterverb\n%\nOr provide only the first:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time (9)\n>>> currentTime.printTime()\n9:0:0\n\\end{verbatim}\n\\afterverb\n%\nOr the first two:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time (9, 14)\n>>> currentTime.printTime()\n9:14:0\n\\end{verbatim}\n\\afterverb\n%\nFinally, we can make assignments to a subset of the\nparameters by naming them explicitly:\n\n\\beforeverb\n\\begin{verbatim}\n>>> currentTime = Time(seconds = 30, hours = 9)\n>>> currentTime.printTime()\n9:0:30\n\\end{verbatim}\n\\afterverb\n%\n\n\\section{Points revisited}\n\\index{Point class}\n\\index{class!Point}\n\nLet's rewrite the {\\tt Point} class from\nSection~\\ref{point} in a more object-oriented style:\n\n\\beforeverb\n\\begin{verbatim}\nclass Point:\n  def __init__(self, x=0, y=0):\n    self.x = x\n    self.y = y\n\n  def __str__(self):\n    return '(' + str(self.x) + ', ' + str(self.y) + ')'\n\\end{verbatim}\n\\afterverb\n%\nThe initialization method\ntakes $x$ and $y$ values as optional parameters;\nthe default for either parameter is 0.\n\nThe next method, {\\tt \\_\\_str\\_\\_}, returns a string representation\nof a {\\tt Point} object.\nIf a class provides a method named {\\tt \\_\\_str\\_\\_}, it\noverrides the default behavior of the Python built-in {\\tt str} function.\n\n\\beforeverb\n\\begin{verbatim}\n>>> p = Point(3, 4)\n>>> str(p)\n'(3, 4)'\n\\end{verbatim}\n\\afterverb\n%\nPrinting a {\\tt Point} object implicitly invokes {\\tt \\_\\_str\\_\\_} on\nthe object, so defining {\\tt \\_\\_str\\_\\_} also changes the behavior of\n{\\tt print}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> p = Point(3, 4)\n>>> print p\n(3, 4)\n\\end{verbatim}\n\\afterverb\n%\nWhen we write a new class, we almost always start by writing {\\tt\n\\_\\_init\\_\\_}, which makes it easier to instantiate objects, and {\\tt\n\\_\\_str\\_\\_}, which is almost always useful for debugging.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "51feec6d-2627-4b9e-a339-7524953b135c": {"__data__": {"id_": "51feec6d-2627-4b9e-a339-7524953b135c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "63f94e80-9f22-4700-ae0d-393029b21a47", "node_type": null, "metadata": {}, "hash": "2f9299287a3afeaf3b2def0068bf39ce1eca2146b935474248cf094e47c86b99"}, "3": {"node_id": "02835535-81cb-4b99-9c36-7f722fe56e53", "node_type": null, "metadata": {}, "hash": "b24b0bd67833645a1ebfccdb6e6e85a50c281f1938fe87df5f5c58209c41ae47"}}, "hash": "25019c40bdb85ee5999eedd9249928dfff52668c73bda9c1fe41d1be4c625a8a", "text": "\\section{Operator overloading}\n\\label{operator overloading}\n\\index{operator overloading}\n\\index{operator!overloading}\n\\index{dot product}\n\\index{scalar multiplication}\n\nSome languages make it possible to change the definition of the\nbuilt-in operators when they are applied to user-defined types.  This\nfeature is called {\\bf operator overloading}.  It is especially useful when\ndefining new mathematical types.\n\nFor example, to override the addition operator {\\tt +}, we\nprovide a method named {\\tt \\_\\_add\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Point:\n  # previously defined methods here...\n\n  def __add__(self, other):\n    return Point(self.x + other.x, self.y + other.y)\n\\end{verbatim}\n\\afterverb\n%\nAs usual, the first parameter is the object on which the method is\ninvoked.  The second parameter is conveniently named {\\tt other}\nto distinguish it from {\\tt self}.  To add two {\\tt Point}s, we create\nand return a new {\\tt Point} that contains  the sum of the\n$x$ coordinates and the sum of the $y$ coordinates.\n\nNow, when we apply the {\\tt +} operator to {\\tt Point} objects, Python\ninvokes {\\tt \\_\\_add\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   p1 = Point(3, 4)\n>>>   p2 = Point(5, 7)\n>>>   p3 = p1 + p2\n>>>   print p3\n(8, 11)\n\\end{verbatim}\n\\afterverb\n%\nThe expression {\\tt p1 + p2} is equivalent to\n{\\tt p1.\\_\\_add\\_\\_(p2)}, but obviously more elegant.\n\n\\begin{quote}\n{\\em As an exercise, add a method {\\tt \\_\\_sub\\_\\_(self, other)} that\noverloads the subtraction operator, and try it out.}\n\\end{quote}\n\nThere are several ways to override the behavior of the\nmultiplication operator: by defining a method named\n{\\tt \\_\\_mul\\_\\_}, or {\\tt \\_\\_rmul\\_\\_}, or both.\n\nIf the left operand of {\\tt *} is a {\\tt Point}, Python invokes\n{\\tt \\_\\_mul\\_\\_}, which assumes that the other operand is also\na {\\tt Point}.  It computes the {\\bf dot product} of the two\npoints, defined according to the rules of linear algebra:\n\n\\beforeverb\n\\begin{verbatim}\ndef __mul__(self, other):\n  return self.x * other.x + self.y * other.y\n\\end{verbatim}\n\\afterverb\n%\nIf the left operand of {\\tt *} is a primitive type and the right\noperand is a {\\tt Point}, Python invokes {\\tt \\_\\_rmul\\_\\_}, which\nperforms {\\bf scalar multiplication}:\n\n\\beforeverb\n\\begin{verbatim}\ndef __rmul__(self, other):\n  return Point(other * self.x,  other * self.y)\n\\end{verbatim}\n\\afterverb\n%\nThe result is a new {\\tt Point} whose coordinates are a multiple\nof the original coordinates.  If {\\tt other} is a type that cannot\nbe multiplied by a floating-point number, then\n{\\tt \\_\\_rmul\\_\\_} will yield an error.\n\nThis example demonstrates both kinds of multiplication:\n\n\\beforeverb\n\\begin{verbatim}\n>>> p1 = Point(3, 4)\n>>> p2 = Point(5, 7)\n>>> print p1 * p2\n43\n>>> print 2 * p2\n(10, 14)\n\\end{verbatim}\n\\afterverb\n%\nWhat happens if we try to evaluate {\\tt p2 * 2}?  Since\nthe first operand is a {\\tt Point}, Python invokes\n{\\tt \\_\\_mul\\_\\_} with {\\tt 2} as the second argument.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "02835535-81cb-4b99-9c36-7f722fe56e53": {"__data__": {"id_": "02835535-81cb-4b99-9c36-7f722fe56e53", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "51feec6d-2627-4b9e-a339-7524953b135c", "node_type": null, "metadata": {}, "hash": "25019c40bdb85ee5999eedd9249928dfff52668c73bda9c1fe41d1be4c625a8a"}, "3": {"node_id": "97fbcb7a-7a67-46dd-bdb5-c8fdb7742a0b", "node_type": null, "metadata": {}, "hash": "0c3b580fa3ef72e5ff87d9b928d55c2dd65960e707d43cd58f02fef5121d1ae9"}}, "hash": "b24b0bd67833645a1ebfccdb6e6e85a50c281f1938fe87df5f5c58209c41ae47", "text": "Inside {\\tt \\_\\_mul\\_\\_}, the program tries to access the {\\tt x}\ncoordinate of {\\tt other}, which fails because\nan integer has no attributes:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print p2 * 2\nAttributeError: 'int' object has no attribute 'x'\n\\end{verbatim}\n\\afterverb\n%\nUnfortunately, the error message is a bit opaque.  This example\ndemonstrates some of the difficulties of object-oriented programming.\nSometimes it is hard enough just to figure out what code is running.\n\nFor a more complete example of operator overloading, see\nAppendix~\\ref{overloading}.\n\n\n\\section{Polymorphism}\n\\index{polymorphism}\n\nMost of the methods we have written only work for a specific\ntype.  When you create a new object, you write methods that operate\non that type.\n\nBut there are certain operations that you will want to apply to many\ntypes, such as the arithmetic operations in the previous sections.\nIf many types support the same set of operations, you\ncan write functions that work on any of those types.\n\nFor example, the {\\tt multadd} operation (which is common in\nlinear algebra) takes three arguments; it multiplies the first\ntwo and then adds the third.  We can write it in Python like\nthis:\n\n\\beforeverb\n\\begin{verbatim}\ndef multadd (x, y, z):\n  return x * y + z\n\\end{verbatim}\n\\afterverb\n%\nThis method will work for any values of {\\tt x} and {\\tt y}\nthat can be multiplied and for any value of {\\tt z} that can be\nadded to the product.\n\nWe can invoke it with numeric values:\n\n\\beforeverb\n\\begin{verbatim}\n>>> multadd (3, 2, 1)\n7\n\\end{verbatim}\n\\afterverb\n%\nOr with {\\tt Point}s:\n\n\\beforeverb\n\\begin{verbatim}\n>>> p1 = Point(3, 4)\n>>> p2 = Point(5, 7)\n>>> print multadd (2, p1, p2)\n(11, 15)\n>>> print multadd (p1, p2, 1)\n44\n\\end{verbatim}\n\\afterverb\n%\nIn the first case, the {\\tt Point} is multiplied by a scalar\nand then added to another {\\tt Point}.\nIn the second case, the dot product yields a numeric\nvalue, so the third argument also has to be a numeric value.\n\nA function like this that can take arguments with different\ntypes is called {\\bf polymorphic}.\n\nAs another example, consider the method {\\tt frontAndBack},\nwhich prints a list twice, forward and backward:\n\n\\beforeverb\n\\begin{verbatim}\ndef frontAndBack(front):\n  import copy\n  back = copy.copy(front)\n  back.reverse()\n  print str(front) + str(back)\n\\end{verbatim}\n\\afterverb\n%\nBecause the {\\tt reverse} method is a modifier, we make a copy\nof the list before reversing it.  That way, this method doesn't\nmodify the list it gets as an argument.\n\nHere's an example that applies {\\tt frontAndBack} to a list:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   myList = [1, 2, 3, 4]\n>>>   frontAndBack(myList)\n[1, 2, 3, 4][4, 3, 2, 1]\n\\end{verbatim}\n\\afterverb\n%\nOf course, we intended to apply this function to lists, so\nit is not surprising that it works.\nWhat would be surprising is if we could apply it to a {\\tt Point}.\n\nTo determine whether a function can be applied to a new type,\nwe apply the fundamental rule of polymorphism:\n\n\\begin{quote}\n{\\bf If all of the operations inside the function can be applied\nto the type, the function can be applied to the type.}\n\\end{quote}\n\nThe operations in the method include {\\tt copy}, {\\tt reverse}, and\n{\\tt print}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97fbcb7a-7a67-46dd-bdb5-c8fdb7742a0b": {"__data__": {"id_": "97fbcb7a-7a67-46dd-bdb5-c8fdb7742a0b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "366d85d8-9b45-40c4-992e-849cf65da266", "node_type": null, "metadata": {}, "hash": "e7dba67f7b63caf9ad5ee7f43f9b5c8f2b26ab0df48ef4ce2802f24f66c670a6"}, "2": {"node_id": "02835535-81cb-4b99-9c36-7f722fe56e53", "node_type": null, "metadata": {}, "hash": "b24b0bd67833645a1ebfccdb6e6e85a50c281f1938fe87df5f5c58209c41ae47"}}, "hash": "0c3b580fa3ef72e5ff87d9b928d55c2dd65960e707d43cd58f02fef5121d1ae9", "text": "{\\tt copy} works on any object, and we have already written\na {\\tt \\_\\_str\\_\\_} method for {\\tt Point}s, so all we need\nis a {\\tt reverse} method in the {\\tt Point} class:\n\n\\beforeverb\n\\begin{verbatim}\ndef reverse(self):\n  self.x , self.y = self.y, self.x\n\\end{verbatim}\n\\afterverb\n%\nThen we can pass {\\tt Point}s to {\\tt frontAndBack}:\n\n\\beforeverb\n\\begin{verbatim}\n>>>   p = Point(3, 4)\n>>>   frontAndBack(p)\n(3, 4)(4, 3)\n\\end{verbatim}\n\\afterverb\n%\nThe best kind of polymorphism is the unintentional kind, where\nyou discover that a function you have already written can be\napplied to a type for which you never planned.\n\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[object-oriented language:] A language that provides\nfeatures, such as user-defined classes and inheritance, that facilitate\nobject-oriented programming.\n\n\\item[object-oriented programming:] A style of programming in which\ndata and the operations that manipulate it are organized into classes\nand methods.\n\n\\item[method:] A function that is defined inside a class definition and\nis invoked on instances of that class.\n\n\\item[override:] To replace a default.  Examples include replacing a default\nvalue with a particular argument and replacing a default method\nby providing a new method with the same name.\n\n\\item[initialization method:] A special method that is invoked automatically\nwhen a new object is created and that initializes the object's attributes.\n\n\\item[operator overloading:] Extending built-in operators\n({\\tt +}, {\\tt -}, {\\tt *}, {\\tt >}, {\\tt <}, etc.) so that they work\nwith user-defined types.\n\n\\item[dot product:] An operation defined in linear algebra that\nmultiplies two {\\tt Point}s and yields a numeric value.\n\n\\item[scalar multiplication:] An operation defined in linear algebra that\nmultiplies each of the coordinates of a {\\tt Point} by a numeric\nvalue.\n\n\\item[polymorphic:] A function that can operate on more than one\ntype.  If all the operations in a function can be\napplied to a type, then the function can be applied to a type.\n\n\n\\index{object-oriented programming language}\n\\index{method}\n\\index{initialization method}\n\\index{override}\n\\index{overloading}\n\\index{operator overloading}\n\\index{dot product}\n\\index{scalar multiplication}\n\\index{polymorphic}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d428515b-e422-458d-bb7c-b19c19acc64f": {"__data__": {"id_": "d428515b-e422-458d-bb7c-b19c19acc64f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "3": {"node_id": "4dc159c0-87f3-4130-8b29-fa95cb66e1bc", "node_type": null, "metadata": {}, "hash": "d6eb1ce3dcd65d3816205f481b4326b92c4ad584347d4c0405b190ae8a15ca0a"}}, "hash": "ce9cc4d7f158e93fd0695065adee00f2cabf8bf698da3b12604b526fd0bdd429", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Sets of objects}\n\n\\section{Composition}\n\\index{composition}\n\\index{nested structure}\n\nBy now, you have seen several examples of composition.\nOne of the\nfirst examples was using a method invocation as part of an\nexpression.  Another example is the nested structure of statements;\nyou can put an {\\tt if} statement within a {\\tt while} loop, within\nanother {\\tt if} statement, and so on.\n\nHaving seen this pattern, and having learned about lists and objects,\nyou should not be surprised to learn that you can create lists of\nobjects.  You can also create objects that contain lists (as\nattributes); you can create lists that contain lists; you can\ncreate objects that contain objects; and so on.\n\nIn this chapter and the next, we will look at some examples of these\ncombinations, using {\\tt Card} objects as an example.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4dc159c0-87f3-4130-8b29-fa95cb66e1bc": {"__data__": {"id_": "4dc159c0-87f3-4130-8b29-fa95cb66e1bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "d428515b-e422-458d-bb7c-b19c19acc64f", "node_type": null, "metadata": {}, "hash": "ce9cc4d7f158e93fd0695065adee00f2cabf8bf698da3b12604b526fd0bdd429"}, "3": {"node_id": "8b135e07-e798-40ba-af9c-57338f8631ef", "node_type": null, "metadata": {}, "hash": "6899501b84c600436d66b5d567d75c4a824be929c044416dc936f7986ad599a1"}}, "hash": "d6eb1ce3dcd65d3816205f481b4326b92c4ad584347d4c0405b190ae8a15ca0a", "text": "\\section{{\\tt Card} objects}\n\\index{Card}\n\\index{class!Card}\n\nIf you are not familiar with common playing cards, now would be a good\ntime to get a deck, or else this chapter might not make much sense.\nThere are fifty-two cards in a deck, each of which belongs to one of four\nsuits and one of thirteen ranks.  The suits are Spades, Hearts, Diamonds, and\nClubs (in descending order in bridge).  The ranks are Ace, 2, 3, 4, 5,\n6, 7, 8, 9, 10, Jack, Queen, and King.  Depending on the game that you are\nplaying, the rank of Ace may be higher than King or lower than 2.\n\n\\index{rank}\n\\index{suit}\n\nIf we want to define a new object to represent a playing card, it is\nobvious what the attributes should be: {\\tt rank} and\n{\\tt suit}.  It is not as obvious what type the attributes\nshould be.  One possibility is to use strings containing words like\n{\\tt \"Spade\"} for suits and {\\tt \"Queen\"} for ranks.  One problem with\nthis implementation is that it would not be easy to compare cards to\nsee which had a higher rank or suit.\n\n\\index{encode}\n\\index{encrypt}\n\\index{map to}\n\nAn alternative is to use integers to {\\bf encode} the ranks and suits.\nBy ``encode,'' we do not mean what some people think, which is to\nencrypt or translate into a secret code.  What a computer scientist\nmeans by ``encode'' is ``to define a mapping between a\nsequence of numbers and the items I want to represent.'' For example:\n\n\\beforefig\n\\begin{tabular}{l c l}\nSpades & $\\mapsto$ & 3 \\\\\nHearts & $\\mapsto$ & 2 \\\\\nDiamonds & $\\mapsto$ & 1 \\\\\nClubs & $\\mapsto$ & 0\n\\end{tabular}\n\\afterfig\n\nAn obvious feature of this mapping is that the suits map to integers in\norder, so we can compare suits by comparing integers.  The mapping for\nranks is fairly obvious; each of the numerical ranks maps to the\ncorresponding integer, and for face cards:\n\n\\beforefig\n\\begin{tabular}{l c l}\nJack & $\\mapsto$ & 11 \\\\\nQueen & $\\mapsto$ & 12 \\\\\nKing & $\\mapsto$ & 13 \\\\\n\\end{tabular}\n\\afterfig\n\nThe reason we are using mathematical notation for these mappings is\nthat they are not part of the Python program.  They are part of the\nprogram design, but they never appear explicitly in the code.  The\nclass definition for the {\\tt Card} type looks like this:\n\n\\beforeverb\n\\begin{verbatim}\nclass Card:\n  def __init__(self, suit=0, rank=2):\n    self.suit = suit\n    self.rank = rank\n\\end{verbatim}\n\\afterverb\n%\nAs usual, we provide an initialization method that takes an optional\nparameter for each attribute.  The default value of {\\tt suit} is\n0, which represents Clubs.\n\n\\index{constructor}\n\nTo create a Card, we invoke the Card constructor with the\nsuit and rank of the card we want.\n\n\\beforeverb\n\\begin{verbatim}\nthreeOfClubs = Card(3, 1)\n\\end{verbatim}\n\\afterverb\n%\nIn the next section we'll figure out which card we just made.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8b135e07-e798-40ba-af9c-57338f8631ef": {"__data__": {"id_": "8b135e07-e798-40ba-af9c-57338f8631ef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "4dc159c0-87f3-4130-8b29-fa95cb66e1bc", "node_type": null, "metadata": {}, "hash": "d6eb1ce3dcd65d3816205f481b4326b92c4ad584347d4c0405b190ae8a15ca0a"}, "3": {"node_id": "c2d8f160-644e-487d-a842-4813e7c6728d", "node_type": null, "metadata": {}, "hash": "c010cb5298dcb69ffc5b352ad8a919cbda75092b18e5318c0836318bb3552096"}}, "hash": "6899501b84c600436d66b5d567d75c4a824be929c044416dc936f7986ad599a1", "text": "\\section{Class attributes and the {\\tt \\_\\_str\\_\\_} method}\n\\index{class attribute}\n\\index{attribute!class}\n\nIn order to print {\\tt Card} objects in a way that people can easily\nread, we want to map the integer codes onto words.  A natural way to\ndo that is with lists of strings.  We assign these lists to {\\bf class\nattributes} at the top of the class definition:\n\n\\beforeverb\n\\begin{verbatim}\nclass Card:\n  suitList = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n  rankList = [\"narf\", \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"]\n\n  #init method omitted\n\n  def __str__(self):\n    return (self.rankList[self.rank] + \" of \" + \n            self.suitList[self.suit])\n\\end{verbatim}\n\\afterverb\n%\nA class attribute is defined outside of any method, and it can be\naccessed from any of the methods in the class.\n\nInside {\\tt \\_\\_str\\_\\_}, we can use {\\tt suitList} and {\\tt rankList}\nto map the numerical values of {\\tt suit} and {\\tt rank} to strings.\nFor example, the expression \\verb+self.suitList[self.suit]+ means\n``use the attribute {\\tt suit} from the object {\\tt self} as an index\ninto the class attribute named {\\tt suitList}, and select the\nappropriate string.''\n\nThe reason for the {\\tt \"narf\"} in the first element in {\\tt\nrankList} is to act as a place keeper for the zero-eth element of the\nlist, which should never be used.  The only valid ranks are 1 to 13.  This\nwasted item is not entirely necessary.  We could have started at 0,\nas usual, but it is less confusing to encode 2 as 2, 3 as 3, and so on.\n\nWith the methods we have so far, we can create and print cards:\n\n\\beforeverb\n\\begin{verbatim}\n>>> card1 = Card(1, 11)\n>>> print card1\nJack of Diamonds\n\\end{verbatim}\n\\afterverb\n%\nClass attributes like {\\tt suitList} are shared by all {\\tt Card}\nobjects.  The advantage of this is that we can use any {\\tt Card}\nobject to access the class attributes:\n\n\\beforeverb\n\\begin{verbatim}\n>>> card2 = Card(1, 3)\n>>> print card2\n3 of Diamonds\n>>> print card2.suitList[1]\nDiamonds\n\\end{verbatim}\n\\afterverb\n%\nThe disadvantage is that if we modify a class attribute, it\naffects every instance of the class.  For example, if we decide\nthat ``Jack of Diamonds'' should really be called\n``Jack of Swirly Whales,'' we could do this:\n\n\\index{instance!object}\n\\index{object instance}\n\n\\beforeverb\n\\begin{verbatim}\n>>> card1.suitList[1] = \"Swirly Whales\"\n>>> print card1\nJack of Swirly Whales\n\\end{verbatim}\n\\afterverb\n%\nThe problem is that {\\em all} of the Diamonds just became\nSwirly Whales:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print card2\n3 of Swirly Whales\n\\end{verbatim}\n\\afterverb\n%\nIt is usually not a good idea to modify class attributes.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c2d8f160-644e-487d-a842-4813e7c6728d": {"__data__": {"id_": "c2d8f160-644e-487d-a842-4813e7c6728d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "8b135e07-e798-40ba-af9c-57338f8631ef", "node_type": null, "metadata": {}, "hash": "6899501b84c600436d66b5d567d75c4a824be929c044416dc936f7986ad599a1"}, "3": {"node_id": "7c41061f-967d-433f-978a-b0172c1cb3cd", "node_type": null, "metadata": {}, "hash": "c910eb9d8d1eca71319aacbd190890c1ad9c9ea7c453f44df8793e5804d04e1f"}}, "hash": "c010cb5298dcb69ffc5b352ad8a919cbda75092b18e5318c0836318bb3552096", "text": "\\section{Comparing cards}\n\\label{comparecard}\n\\index{operator!conditional}\n\\index{conditional operator}\n\nFor primitive types, there are conditional operators\n({\\tt <}, {\\tt >}, {\\tt ==}, etc.)\nthat compare\nvalues and determine when one is greater than, less than, or equal to\nanother.  For user-defined types, we can override the behavior of\nthe built-in operators by providing a method named\n{\\tt \\_\\_cmp\\_\\_}.  By convention, {\\tt \\_\\_cmp\\_\\_}\nhas two parameters, {\\tt self} and {\\tt other}, and returns\n1 if the first object is greater, -1 if the\nsecond object is greater, and 0 if they are equal to each other.\n\n\\index{override}\n\\index{operator overloading}\n\\index{ordering}\n\\index{complete ordering}\n\\index{partial ordering}\n\nSome types are completely ordered, which means that you can compare\nany two elements and tell which is bigger.  For example, the integers\nand the floating-point numbers are completely ordered.  Some sets are\nunordered, which means that there is no meaningful way to say that one\nelement is bigger than another.  For example, the fruits are\nunordered, which is why you cannot compare apples and oranges.\n\nThe set of playing cards is partially ordered, which means that\nsometimes you can compare cards and sometimes not.  For example, you\nknow that the 3 of Clubs is higher than the 2 of Clubs, and the 3 of\nDiamonds is higher than the 3 of Clubs.  But which is better, the 3 of\nClubs or the 2 of Diamonds?  One has a higher rank, but the other has\na higher suit.\n\n\\index{comparable}\n\nIn order to make cards comparable, you have to decide which is more\nimportant, rank or suit.  To be honest, the choice is\narbitrary.  For the sake of choosing, we will say that suit is more\nimportant, because a new deck of cards comes sorted\nwith all the Clubs together, followed by all the Diamonds, and so on.\n\nWith that decided, we can write {\\tt \\_\\_cmp\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\ndef __cmp__(self, other):\n  # check the suits\n  if self.suit > other.suit: return 1\n  if self.suit < other.suit: return -1\n  # suits are the same... check ranks\n  if self.rank > other.rank: return 1\n  if self.rank < other.rank: return -1\n  # ranks are the same... it's a tie\n  return 0\n\\end{verbatim}\n\\afterverb\n%\nIn this ordering, Aces appear lower than Deuces (2s).\n\n\\begin{quote}\n{\\em As an exercise, modify {\\tt \\_\\_cmp\\_\\_} so that Aces are\nranked higher than Kings.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7c41061f-967d-433f-978a-b0172c1cb3cd": {"__data__": {"id_": "7c41061f-967d-433f-978a-b0172c1cb3cd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "c2d8f160-644e-487d-a842-4813e7c6728d", "node_type": null, "metadata": {}, "hash": "c010cb5298dcb69ffc5b352ad8a919cbda75092b18e5318c0836318bb3552096"}, "3": {"node_id": "74be3d9d-1ed6-45ea-a122-395f60330929", "node_type": null, "metadata": {}, "hash": "5cd6f70b2804d1b24aec15e1e826138f33c05d9ae9ce2d698a98212122060565"}}, "hash": "c910eb9d8d1eca71319aacbd190890c1ad9c9ea7c453f44df8793e5804d04e1f", "text": "\\section{Decks}\n\\index{list!of objects}\n\\index{object!list of}\n\\index{deck}\n\nNow that we have objects to represent {\\tt Card}s, the next logical\nstep is to define a class to represent a {\\tt Deck}.  Of course, a\ndeck is made up of cards, so each {\\tt Deck} object will contain a\nlist of cards as an attribute.\n\n\\index{initialization method}\n\\index{method!initialization}\n\nThe following is a class definition for the {\\tt Deck} class.  The\ninitialization method creates the attribute {\\tt cards} and generates\nthe standard set of fifty-two cards:\n\n\\index{composition}\n\\index{loop!nested}\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  def __init__(self):\n    self.cards = []\n    for suit in range(4):\n      for rank in range(1, 14):\n        self.cards.append(Card(suit, rank))\n\\end{verbatim}\n\\afterverb\n%\nThe easiest way to populate the deck is with a nested loop.  The outer\nloop enumerates the suits from 0 to 3.  The inner loop enumerates the\nranks from 1 to 13.  Since the outer loop iterates four times, and the\ninner loop iterates thirteen times, the total number of times the body\nis executed is fifty-two (thirteen times four).  Each iteration\ncreates a new instance of {\\tt Card} with the current suit and rank,\nand appends that card to the {\\tt cards} list.\n\nThe {\\tt append} method works on lists but not, of course, tuples.\n\n\\index{append method}\n\\index{list method}\n\\index{method!list}\n\n\\adjustpage{1}\n\n\\section{Printing the deck}\n\\label{printdeck}\n\\index{printing!deck object}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "74be3d9d-1ed6-45ea-a122-395f60330929": {"__data__": {"id_": "74be3d9d-1ed6-45ea-a122-395f60330929", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "7c41061f-967d-433f-978a-b0172c1cb3cd", "node_type": null, "metadata": {}, "hash": "c910eb9d8d1eca71319aacbd190890c1ad9c9ea7c453f44df8793e5804d04e1f"}, "3": {"node_id": "31272119-3229-40a3-86bb-2282ac6d6fe3", "node_type": null, "metadata": {}, "hash": "e7874bd96c74c16941dd40551f92dcf0e95adeab5b15bdeb478937b0b69903dd"}}, "hash": "5cd6f70b2804d1b24aec15e1e826138f33c05d9ae9ce2d698a98212122060565", "text": "As usual, when we define a new type of object we want a method\nthat prints the contents of an object.\nTo print a {\\tt Deck}, we traverse the list and print each {\\tt Card}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def printDeck(self):\n    for card in self.cards:\n      print card\n\\end{verbatim}\n\\afterverb\n%\nHere, and from now on, the ellipsis ({\\tt ...}) indicates that we have\nomitted the other methods in the class.\n\nAs an alternative to {\\tt printDeck}, we could\nwrite a {\\tt \\_\\_str\\_\\_} method for the {\\tt Deck} class.  The\nadvantage of {\\tt \\_\\_str\\_\\_} is that it is more flexible.  Rather\nthan just printing the contents of the object, it generates a string\nrepresentation that other parts of the program can manipulate\nbefore printing, or store for later use.\n\nHere is a version of {\\tt \\_\\_str\\_\\_} that returns a string\nrepresentation of a {\\tt Deck}.\nTo add a bit of pizzazz, it arranges the cards in a cascade\nwhere each card is indented one space more than the previous card:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def __str__(self):\n    s = \"\"\n    for i in range(len(self.cards)):\n      s = s + \" \"*i + str(self.cards[i]) + \"\\n\"\n    return s\n\\end{verbatim}\n\\afterverb\n%\nThis example demonstrates several features.  First, instead of\ntraversing {\\tt self.cards} and assigning each card to a variable,\nwe are using {\\tt i} as a loop\nvariable and an index into the list of cards.\n\nSecond, we are using the string multiplication operator to indent\neach card by one more space than the last.  The expression\n{\\tt \" \"*i} yields a number of spaces equal to the current value\nof {\\tt i}.\n\nThird, instead of using the {\\tt print} command to print the cards,\nwe use the {\\tt str} function.  Passing an object as an argument to\n{\\tt str} is equivalent to invoking the {\\tt \\_\\_str\\_\\_} method on\nthe object.\n\n\\index{accumulator}\n\nFinally, we are using the variable {\\tt s} as an {\\bf accumulator}.\nInitially, {\\tt s} is the empty string.  Each time through the loop, a\nnew string is generated and concatenated with the old value of {\\tt s}\nto get the new value.  When the loop ends, {\\tt s} contains the\ncomplete string representation of the {\\tt Deck}, which looks like\nthis:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\n>>> deck = Deck()\n>>> print deck\nAce of Clubs\n 2 of Clubs\n  3 of Clubs\n   4 of Clubs\n    5 of Clubs\n     6 of Clubs\n      7 of Clubs\n       8 of Clubs\n        9 of Clubs\n         10 of Clubs\n          Jack of Clubs\n           Queen of Clubs\n            King of Clubs\n             Ace of Diamonds\n\\end{verbatim}\n\\afterverb\n%\nAnd so on.  Even though the result appears on 52 lines, it is\none long string that contains newlines.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "31272119-3229-40a3-86bb-2282ac6d6fe3": {"__data__": {"id_": "31272119-3229-40a3-86bb-2282ac6d6fe3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "74be3d9d-1ed6-45ea-a122-395f60330929", "node_type": null, "metadata": {}, "hash": "5cd6f70b2804d1b24aec15e1e826138f33c05d9ae9ce2d698a98212122060565"}, "3": {"node_id": "27c585f2-eae8-4e0d-a64f-18a6221e0644", "node_type": null, "metadata": {}, "hash": "ee9e254face0623d802cc1c88a4ae0391c730d5972e7453e5068a08c57e3ec23"}}, "hash": "e7874bd96c74c16941dd40551f92dcf0e95adeab5b15bdeb478937b0b69903dd", "text": "\\section{Shuffling the deck}\n\\index{shuffle}\n\nIf a deck is perfectly shuffled, then any card is equally likely\nto appear anywhere in the deck, and any location in the deck is\nequally likely to contain any card.\n\n\\index{random}\n\\index{randrange}\n\nTo shuffle the deck, we will use the {\\tt randrange} function\nfrom the {\\tt random} module.  With two integer arguments,\n{\\tt a} and {\\tt b}, {\\tt randrange} chooses a random integer in\nthe range {\\tt a <= x < b}.  Since the upper bound is strictly\nless than {\\tt b}, we can use the length of a list as the\nsecond argument, and we are guaranteed to get a legal index.\nFor example, this expression chooses the index of a random card in a deck:\n\n\\beforeverb\n\\begin{verbatim}\nrandom.randrange(0, len(self.cards))\n\\end{verbatim}\n\\afterverb\n%\nAn easy way to shuffle the deck is by traversing the cards and\nswapping each card with a randomly chosen one.  It is possible that\nthe card will be swapped with itself, but that is fine.  In fact, if\nwe precluded that possibility, the order of the cards would be less\nthan entirely random:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def shuffle(self):\n    import random\n    nCards = len(self.cards)\n    for i in range(nCards):\n      j = random.randrange(i, nCards)\n      self.cards[i], self.cards[j] = self.cards[j], self.cards[i]\n\\end{verbatim}\n\\afterverb\n%\nRather than assume that there are fifty-two cards in the deck, we get\nthe actual length of the list and store it in {\\tt nCards}.\n\n\\index{swap}\n\\index{tuple assignment}\n\\index{assignment!tuple}\n\nFor each card in the deck, we choose a random card from among the\ncards that haven't been shuffled yet.  Then we swap the current\ncard ({\\tt i}) with the selected card ({\\tt j}).  To swap the\ncards we use a tuple assignment, as in Section~\\ref{tuple assignment}:\n\n\\beforeverb\n\\begin{verbatim}\nself.cards[i], self.cards[j] = self.cards[j], self.cards[i]\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, rewrite this line of code\nwithout using a sequence assignment.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27c585f2-eae8-4e0d-a64f-18a6221e0644": {"__data__": {"id_": "27c585f2-eae8-4e0d-a64f-18a6221e0644", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646aed1c-3013-452e-ad89-93702220a065", "node_type": null, "metadata": {}, "hash": "220e5e4f0f62c9339c866ac3da15b4197cf19527f2df03d4137de2d4218ee8fc"}, "2": {"node_id": "31272119-3229-40a3-86bb-2282ac6d6fe3", "node_type": null, "metadata": {}, "hash": "e7874bd96c74c16941dd40551f92dcf0e95adeab5b15bdeb478937b0b69903dd"}}, "hash": "ee9e254face0623d802cc1c88a4ae0391c730d5972e7453e5068a08c57e3ec23", "text": "\\section{Removing and dealing cards}\n\\index{removing cards}\n\nAnother method that would be useful for the {\\tt Deck} class is {\\tt\nremoveCard}, which takes a card as an argument, removes it, and\nreturns {\\tt True} if the card was in the deck and {\\tt False}\notherwise:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def removeCard(self, card):\n    if card in self.cards:\n      self.cards.remove(card)\n      return True\n    else: \n      return False\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt in} operator returns true if the first operand is in the\nsecond, which must be a list or a tuple.  If the first operand is an\nobject, Python uses the object's {\\tt \\_\\_cmp\\_\\_} method to determine\nequality with items in the list.  Since the {\\tt \\_\\_cmp\\_\\_} in the\n{\\tt Card} class checks for deep equality, the {\\tt removeCard} method\nchecks for deep equality.\n\n\\index{in operator}\n\\index{operator!in}\n\nTo deal cards, we want to remove and return the top card.\nThe list method {\\tt pop} provides a convenient way to do that:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def popCard(self):\n    return self.cards.pop()\n\\end{verbatim}\n\\afterverb\n%\nActually, {\\tt pop} removes the {\\em last} card in the list, so we are in\neffect dealing from the bottom of the deck.\n\n\\index{boolean function}\n\\index{function!boolean}\n\nOne more operation that we are likely to want is the boolean function\n{\\tt isEmpty}, which returns true if the deck contains no cards:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck:\n  ...\n  def isEmpty(self):\n    return (len(self.cards) == 0)\n\\end{verbatim}\n\\afterverb\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[encode:]  To represent one set of values using another\nset of values by constructing a mapping between them.\n\n\\item[class attribute:] A variable that is defined inside\na class definition but outside any method.  Class attributes\nare accessible from any method in the class and are shared\nby all instances of the class.\n\n\\item[accumulator:] A variable used in a loop to accumulate\na series of values, such as by concatenating them onto\na string or adding them to a running sum.\n\n\\index{encode}\n\\index{class attribute}\n\\index{attribute!class}\n\\index{accumulator}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e4ea8093-4e35-4b68-86b8-5e5d52df3c5e": {"__data__": {"id_": "e4ea8093-4e35-4b68-86b8-5e5d52df3c5e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "3": {"node_id": "efb2b508-2e2f-4b13-8294-bb36a71e2634", "node_type": null, "metadata": {}, "hash": "6845a6b79bf426ef06758c89090cd292058386cb3481f5833b53fd8381ad4278"}}, "hash": "56713eb38bfce0b6cecc0bad8195c6ecd9647ea18c040acbe6dc24b4ffa4da1f", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Inheritance}\n\n\\section{Inheritance}\n\\index{inheritance}\n\\index{object-oriented programming}\n\\index{parent class}\n\\index{child class}\n\\index{subclass}\n\nThe language feature most often associated with object-oriented\nprogramming is {\\bf inheritance}.  Inheritance is the ability to\ndefine a new class that is a modified version of an existing\nclass.\n\nThe primary advantage of this feature is that you can add new methods\nto a class without modifying the existing class.  It is\ncalled ``inheritance'' because the new class inherits all of the\nmethods of the existing class.  Extending this metaphor, the existing\nclass is sometimes called the {\\bf parent} class.  The new class may\nbe called the {\\bf child} class or sometimes ``subclass.''\n\n\\index{object-oriented design}\n\nInheritance is a powerful feature.  Some programs that would be\ncomplicated without inheritance can be written concisely and simply\nwith it.  Also, inheritance can facilitate code reuse, since you can\ncustomize the behavior of parent classes without having to modify\nthem.  In some cases, the inheritance structure reflects the natural\nstructure of the problem, which makes the program easier to\nunderstand.\n\nOn the other hand, inheritance can make programs difficult to read.\nWhen a method is invoked, it is sometimes not clear where to find its\ndefinition.  The relevant code may be scattered among several modules.\nAlso, many of the things that can be done using inheritance can be\ndone as elegantly (or more so) without it.  If the natural\nstructure of the problem does not lend itself to inheritance, this\nstyle of programming can do more harm than good.\n\nIn this chapter we will demonstrate the use of inheritance as part of\na program that plays the card game Old Maid.  One of our goals is to\nwrite code that could be reused to implement other card games.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "efb2b508-2e2f-4b13-8294-bb36a71e2634": {"__data__": {"id_": "efb2b508-2e2f-4b13-8294-bb36a71e2634", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "e4ea8093-4e35-4b68-86b8-5e5d52df3c5e", "node_type": null, "metadata": {}, "hash": "56713eb38bfce0b6cecc0bad8195c6ecd9647ea18c040acbe6dc24b4ffa4da1f"}, "3": {"node_id": "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e", "node_type": null, "metadata": {}, "hash": "eeda2fc197f222a84f728ad71382816cbb05f127ffbc740048ab6bf76e7c491d"}}, "hash": "6845a6b79bf426ef06758c89090cd292058386cb3481f5833b53fd8381ad4278", "text": "\\section{A hand of cards}\n\nFor almost any card game, we need to represent a hand of cards.\nA hand is similar to a deck, of course.  Both are made up of\na set of cards, and both require operations like adding and\nremoving cards.  Also, we might like the ability to shuffle\nboth decks and hands.\n\nA hand is also different from a deck.  Depending on the game being\nplayed, we might want to perform some operations on hands that\ndon't make sense for a deck.  For example, in poker we might classify\na hand (straight, flush, etc.) or compare it with another hand.  In\nbridge, we might want to compute a score for a hand in order to make\na bid.\n\nThis situation suggests the use of inheritance.  If {\\tt Hand} is a\nsubclass of {\\tt Deck}, it will have all the methods\nof {\\tt Deck}, and new methods can be added.\n\n\\index{parent class}\n\\index{class!parent}\n\nIn the class definition, the name of the parent class appears\nin parentheses:\n\n\\beforeverb\n\\begin{verbatim}\nclass Hand(Deck):\n  pass\n\\end{verbatim}\n\\afterverb\n%\nThis statement indicates that the new {\\tt Hand} class inherits from\nthe existing {\\tt Deck} class.\n\nThe {\\tt Hand} constructor initializes the attributes\nfor the hand, which are {\\tt name} and {\\tt cards}.  The string {\\tt name}\nidentifies this hand, probably by the name of\nthe player that holds it.  The name is an optional parameter with\nthe empty string as a default value.\n{\\tt cards} is the list of cards in\nthe hand, initialized to the empty list:\n\n\\beforeverb\n\\begin{verbatim}\nclass Hand(Deck):\n  def __init__(self, name=\"\"):\n    self.cards = []\n    self.name = name\n\\end{verbatim}\n\\afterverb\n%\nFor just about any card game, it is necessary to add and\nremove cards from the deck.  Removing cards is already taken\ncare of, since {\\tt Hand} inherits {\\tt removeCard} from {\\tt Deck}.\nBut we have to write {\\tt addCard}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Hand(Deck):\n  ...\n  def addCard(self,card) :\n    self.cards.append(card)\n\\end{verbatim}\n\\afterverb\n%\nAgain, the ellipsis indicates that we have omitted other methods.\nThe list {\\tt append} method adds the new card to\nthe end of the list of cards.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e": {"__data__": {"id_": "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "efb2b508-2e2f-4b13-8294-bb36a71e2634", "node_type": null, "metadata": {}, "hash": "6845a6b79bf426ef06758c89090cd292058386cb3481f5833b53fd8381ad4278"}, "3": {"node_id": "aec60a8e-dde5-4c5d-884a-af18bb204b1e", "node_type": null, "metadata": {}, "hash": "8d438a45faf9044d0e7a4937e3ad378950ddbcb05f5c65a28fbebe83788b75c5"}}, "hash": "eeda2fc197f222a84f728ad71382816cbb05f127ffbc740048ab6bf76e7c491d", "text": "\\section{Dealing cards}\n\\index{dealing cards}\n\nNow that we have a {\\tt Hand} class, we want to deal cards from the\n{\\tt Deck} into hands.  It is not immediately obvious whether this\nmethod should go in the {\\tt Hand} class or in the {\\tt Deck} class,\nbut since it operates on a single deck and (possibly) several hands,\nit is more natural to put it in {\\tt Deck}.\n\n{\\tt deal} should be fairly general,\nsince different games will have different requirements.  We may want\nto deal out the entire deck at once or add one card to each hand.\n\n{\\tt deal} takes three parameters: the deck, a list (or tuple) of\nhands, and the total number of cards to deal.  If there are not enough\ncards in the deck, the method deals out all of the cards and stops:\n\n\\beforeverb\n\\begin{verbatim}\nclass Deck :\n  ...\n  def deal(self, hands, nCards=999):\n    nHands = len(hands)\n    for i in range(nCards):\n      if self.isEmpty(): break    # break if out of cards\n      card = self.popCard()       # take the top card\n      hand = hands[i % nHands]    # whose turn is next?\n      hand.addCard(card)          # add the card to the hand\n\\end{verbatim}\n\\afterverb\n%\nThe last parameter, {\\tt nCards}, is optional; the default is a large\nnumber, which effectively means that all of the cards in the deck\nwill get dealt.\n\n\\index{loop variable}\n\\index{variable!loop}\n\nThe loop variable {\\tt i} goes from 0 to {\\tt nCards-1}.  Each\ntime through the loop, a card is removed from the deck using the\nlist method {\\tt pop}, which removes and returns the last item\nin the list.\n\n\\index{modulus operator}\n\\index{operator!modulus}\n\nThe modulus operator ({\\tt \\%}) allows us to deal cards in a\nround robin (one card at a time to each hand).  When {\\tt i} is\nequal to the number of hands in the list, the expression\n{\\tt i \\% nHands} wraps around to the beginning of the list\n(index 0).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aec60a8e-dde5-4c5d-884a-af18bb204b1e": {"__data__": {"id_": "aec60a8e-dde5-4c5d-884a-af18bb204b1e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e", "node_type": null, "metadata": {}, "hash": "eeda2fc197f222a84f728ad71382816cbb05f127ffbc740048ab6bf76e7c491d"}, "3": {"node_id": "35a31964-52f0-4c13-bab7-e0ab575a3d7f", "node_type": null, "metadata": {}, "hash": "d5dca9c98d00e103e62cf33160781328a89bfdd4ebd813796d8407743654acc5"}}, "hash": "8d438a45faf9044d0e7a4937e3ad378950ddbcb05f5c65a28fbebe83788b75c5", "text": "\\section {Printing a Hand}\n\\index{printing!hand of cards}\n\nTo print the contents of a hand, we can take advantage of\nthe {\\tt printDeck} and {\\tt \\_\\_str\\_\\_} methods inherited\nfrom {\\tt Deck}.  For example:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\n>>> deck = Deck()\n>>> deck.shuffle()\n>>> hand = Hand(\"frank\")\n>>> deck.deal([hand], 5)\n>>> print hand\nHand frank contains\n2 of Spades\n 3 of Spades\n  4 of Spades\n   Ace of Hearts\n    9 of Clubs\n\\end{verbatim}\n\\afterverb\n%\nIt's not a great hand, but it has the makings\nof a straight flush.\n\n\\index{straight flush}\n\nAlthough it is convenient to inherit the existing methods,\nthere is additional information in a {\\tt Hand}\nobject we might want to include when we print one.  To do that,\nwe can provide a {\\tt \\_\\_str\\_\\_} method in the {\\tt Hand} class\nthat overrides the one in the {\\tt Deck} class:\n\n\\beforeverb\n\\begin{verbatim}\nclass Hand(Deck)\n  ...\n  def __str__(self):\n    s = \"Hand \" + self.name\n    if self.isEmpty():\n      return s + \" is empty\\n\"\n    else:\n      return s + \" contains\\n\" + Deck.__str__(self)\n\\end{verbatim}\n\\afterverb\n%\nInitially, {\\tt s} is a string that identifies the hand.  If the hand\nis empty, the program appends the words {\\tt is empty} and returns the\nresult.\n\nOtherwise, the program appends the word {\\tt contains} and the string\nrepresentation of the {\\tt Deck}, computed by invoking the {\\tt\n\\_\\_str\\_\\_} method in the {\\tt Deck} class on {\\tt self}.\n\nIt may seem odd to send {\\tt self}, which refers to the current {\\tt\nHand}, to a {\\tt Deck} method, until you remember that a {\\tt Hand} is\na kind of {\\tt Deck}.  {\\tt Hand} objects can do everything {\\tt Deck}\nobjects can, so it is legal to send a {\\tt Hand} to a {\\tt Deck}\nmethod.\n\n\\index{subclass}\n\\index{parent class}\n\\index{class!parent}\n\nIn general, it is always legal to use an instance of a subclass\nin place of an instance of a parent class.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "35a31964-52f0-4c13-bab7-e0ab575a3d7f": {"__data__": {"id_": "35a31964-52f0-4c13-bab7-e0ab575a3d7f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "aec60a8e-dde5-4c5d-884a-af18bb204b1e", "node_type": null, "metadata": {}, "hash": "8d438a45faf9044d0e7a4937e3ad378950ddbcb05f5c65a28fbebe83788b75c5"}, "3": {"node_id": "23d3f456-47be-4dd3-8b8c-6c00f1d47889", "node_type": null, "metadata": {}, "hash": "0e47dd7e8c9e1d1c8405d07d07141960cc371b55a2521ac5eb943198ea00def7"}}, "hash": "d5dca9c98d00e103e62cf33160781328a89bfdd4ebd813796d8407743654acc5", "text": "\\section {The {\\tt CardGame} class}\n\nThe {\\tt CardGame} class takes care\nof some basic chores common to all games, such as creating the\ndeck and shuffling it:\n\n\\beforeverb\n\\begin{verbatim}\nclass CardGame:\n  def __init__(self):\n    self.deck = Deck()\n    self.deck.shuffle()\n\\end{verbatim}\n\\afterverb\n%\nThis is the first case we have seen where the initialization\nmethod performs a significant computation, beyond initializing\nattributes.\n\nTo implement specific games, we can inherit from {\\tt CardGame}\nand add features for the new game.\nAs an example, we'll write\na simulation of Old Maid.\n\nThe object of Old Maid is to get rid of cards in your hand.  You do\nthis by matching cards by rank and color.  For example, the 4 of Clubs\nmatches the 4 of Spades since both suits are black.  The Jack of Hearts\nmatches the Jack of Diamonds since both are red.\n\nTo begin the game, the Queen of Clubs is removed from the deck so that\nthe Queen of Spades has no match.  The fifty-one remaining cards are\ndealt to the players in a round robin.  After the deal, all players\nmatch and discard as many cards as possible.\n\nWhen no more matches can be made, play begins.  In turn, each player\npicks a card (without looking) from the closest neighbor to the left\nwho still has cards.  If the chosen card matches a card in the\nplayer's hand, the pair is removed.  Otherwise, the card is added to\nthe player's hand.  Eventually all possible matches are made, leaving\nonly the Queen of Spades in the loser's hand.\n\nIn our computer simulation of the game, the computer plays\nall hands.  Unfortunately, some nuances of the real game are lost.\nIn a real game, the player with the Old Maid\ngoes to some effort to get their neighbor to pick that card,\nby displaying it a little more prominently, or perhaps failing\nto display it more prominently, or even failing to fail to display\nthat card more prominently.  The computer simply picks a neighbor's\ncard at random.\n\n\n\\section {{\\tt OldMaidHand} class}\n\\index{class!OldMaidHand}\n\nA hand for playing Old Maid requires some abilities beyond the\ngeneral abilities of a {\\tt Hand}.  We will define a new class, {\\tt\nOldMaidHand}, that inherits from {\\tt Hand} and provides an additional\nmethod called {\\tt removeMatches}:", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "23d3f456-47be-4dd3-8b8c-6c00f1d47889": {"__data__": {"id_": "23d3f456-47be-4dd3-8b8c-6c00f1d47889", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "35a31964-52f0-4c13-bab7-e0ab575a3d7f", "node_type": null, "metadata": {}, "hash": "d5dca9c98d00e103e62cf33160781328a89bfdd4ebd813796d8407743654acc5"}, "3": {"node_id": "ff51296b-eafb-4862-88aa-ff2bae8c82eb", "node_type": null, "metadata": {}, "hash": "1274e1c2a558a9509c835f08e844109519d283a8b4928dc7e2b6d19cf21d7784"}}, "hash": "0e47dd7e8c9e1d1c8405d07d07141960cc371b55a2521ac5eb943198ea00def7", "text": "\\beforeverb\n\\begin{verbatim}\nclass OldMaidHand(Hand):\n  def removeMatches(self):\n    count = 0\n    originalCards = self.cards[:]\n    for card in originalCards:\n      match = Card(3 - card.suit, card.rank)\n      if match in self.cards:\n        self.cards.remove(card)\n        self.cards.remove(match)\n        print \"Hand %s: %s matches %s\" % (self.name,card,match)\n        count = count + 1\n    return count\n\\end{verbatim}\n\\afterverb\n%\nWe start by making a copy of the list of cards, so that we can\ntraverse the copy while removing cards from the original.\nSince {\\tt self.cards} is modified in the\nloop, we don't want to use it to control the traversal.  Python can get\nquite confused if it is traversing a list that is changing!\n\n\\index{traversal}\n\n\\adjustpage{1}\n\nFor each card in the hand, we figure out what the matching card is and\ngo looking for it.  The match card has the same rank and the other\nsuit of the same color.  The expression {\\tt 3 - card.suit} turns a\nClub (suit 0) into a Spade (suit 3) and a Diamond (suit 1) into a\nHeart (suit 2).  You should satisfy yourself that the opposite\noperations also work.  If the match card is also in the hand, both\ncards are removed.\n\nThe following example demonstrates how to use {\\tt removeMatches}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> game = CardGame()\n>>> hand = OldMaidHand(\"frank\")\n>>> game.deck.deal([hand], 13)\n>>> print hand\nHand frank contains\nAce of Spades\n 2 of Diamonds\n  7 of Spades\n   8 of Clubs\n    6 of Hearts\n     8 of Spades\n      7 of Clubs\n       Queen of Clubs\n        7 of Diamonds\n         5 of Clubs\n          Jack of Diamonds\n           10 of Diamonds\n            10 of Hearts\n\n>>> hand.removeMatches()\nHand frank: 7 of Spades matches 7 of Clubs\nHand frank: 8 of Spades matches 8 of Clubs\nHand frank: 10 of Diamonds matches 10 of Hearts\n>>> print hand\nHand frank contains\nAce of Spades\n 2 of Diamonds\n  6 of Hearts\n   Queen of Clubs\n    7 of Diamonds\n     5 of Clubs\n      Jack of Diamonds\n\\end{verbatim}\n\\afterverb\n%\nNotice that there is no {\\tt \\_\\_init\\_\\_} method for the\n{\\tt OldMaidHand} class.  We inherit it from {\\tt Hand}.\n\n\n\\section {{\\tt OldMaidGame} class}\n\\index{class!OldMaidGame}\n\nNow we can turn our attention to the game itself.\n{\\tt OldMaidGame} is a subclass of {\\tt CardGame} with a new\nmethod called {\\tt play} that takes a list of players as an argument.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ff51296b-eafb-4862-88aa-ff2bae8c82eb": {"__data__": {"id_": "ff51296b-eafb-4862-88aa-ff2bae8c82eb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "23d3f456-47be-4dd3-8b8c-6c00f1d47889", "node_type": null, "metadata": {}, "hash": "0e47dd7e8c9e1d1c8405d07d07141960cc371b55a2521ac5eb943198ea00def7"}, "3": {"node_id": "4399a22c-d2d7-45fb-ab9b-06d16c6ca9dd", "node_type": null, "metadata": {}, "hash": "b471cd308127118a448259ca5d2f91be229191023dea978dd129615ad04cff92"}}, "hash": "1274e1c2a558a9509c835f08e844109519d283a8b4928dc7e2b6d19cf21d7784", "text": "Since {\\tt \\_\\_init\\_\\_} is inherited from {\\tt CardGame},\na new {\\tt OldMaidGame} object contains a new shuffled deck:\n\n\\adjustpage{-1}\n\n\\beforeverb\n\\begin{verbatim}\nclass OldMaidGame(CardGame):\n  def play(self, names):\n    # remove Queen of Clubs\n    self.deck.removeCard(Card(0,12))\n\n    # make a hand for each player\n    self.hands = []\n    for name in names :\n      self.hands.append(OldMaidHand(name))\n\n    # deal the cards\n    self.deck.deal(self.hands)\n    print \"---------- Cards have been dealt\"\n    self.printHands()\n\n    # remove initial matches\n    matches = self.removeAllMatches()\n    print \"---------- Matches discarded, play begins\"\n    self.printHands()\n\n    # play until all 50 cards are matched\n    turn = 0\n    numHands = len(self.hands)\n    while matches < 25:\n      matches = matches + self.playOneTurn(turn)\n      turn = (turn + 1) % numHands\n\n    print \"---------- Game is Over\"\n    self.printHands()\n\\end{verbatim}\n\\afterverb\n%\nSome of the steps of the game have been separated into methods.\n{\\tt removeAllMatches} traverses the list of hands and\ninvokes {\\tt removeMatches} on each:\n\n\\beforeverb\n\\begin{verbatim}\nclass OldMaidGame(CardGame):\n  ...\n  def removeAllMatches(self):\n    count = 0\n    for hand in self.hands:\n      count = count + hand.removeMatches()\n    return count\n\\end{verbatim}\n\\afterverb\n%\n\\begin{quote}\n{\\em As an exercise, write {\\tt printHands} which traverses\n{\\tt self.hands} and prints each hand.}\n\\end{quote}\n\n{\\tt count} is\nan accumulator that adds up the number of matches in each\nhand and returns the total.\n\n\\index{accumulator}\n\nWhen the total number of matches reaches twenty-five,\nfifty cards have been removed from the hands, which means that\nonly one card is left and the game is over.\n\nThe variable {\\tt turn} keeps track of which player's turn\nit is.  It starts at 0 and increases by one each time;\nwhen it reaches {\\tt numHands}, the modulus operator\nwraps it back around to 0.\n\nThe method {\\tt playOneTurn} takes an argument that indicates\nwhose turn it is.  The return value is the number of matches\nmade during this turn:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\nclass OldMaidGame(CardGame):\n  ...\n  def playOneTurn(self, i):\n    if self.hands[i].isEmpty():\n      return 0\n    neighbor = self.findNeighbor(i)\n    pickedCard = self.hands[neighbor].popCard()\n    self.hands[i].addCard(pickedCard)\n    print \"Hand\", self.hands[i].name, \"picked\", pickedCard\n    count = self.hands[i].removeMatches()\n    self.hands[i].shuffle()\n    return count\n\\end{verbatim}\n\\afterverb\n%\nIf a player's hand is empty, that player is out of the game, so he or she\ndoes nothing and returns 0.\n\nOtherwise, a turn consists of finding the first player on the left\nthat has cards, taking one card from the neighbor, and checking\nfor matches.  Before returning, the cards in the hand are shuffled\nso that the next player's choice is random.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4399a22c-d2d7-45fb-ab9b-06d16c6ca9dd": {"__data__": {"id_": "4399a22c-d2d7-45fb-ab9b-06d16c6ca9dd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6addee7a-a48c-4a90-9101-cb696f59a62d", "node_type": null, "metadata": {}, "hash": "81a01c3b214dce7ac1d9a9bade0a5d9b1f4c71a890ce260c13bd955ecf7c8d6f"}, "2": {"node_id": "ff51296b-eafb-4862-88aa-ff2bae8c82eb", "node_type": null, "metadata": {}, "hash": "1274e1c2a558a9509c835f08e844109519d283a8b4928dc7e2b6d19cf21d7784"}}, "hash": "b471cd308127118a448259ca5d2f91be229191023dea978dd129615ad04cff92", "text": "The method {\\tt findNeighbor} starts with the player to the\nimmediate left and continues around the circle until it finds\na player that still has cards:\n\n\\beforeverb\n\\begin{verbatim}\nclass OldMaidGame(CardGame):\n  ...\n  def findNeighbor(self, i):\n    numHands = len(self.hands)\n    for next in range(1,numHands):\n      neighbor = (i + next) % numHands\n      if not self.hands[neighbor].isEmpty():\n        return neighbor\n\\end{verbatim}\n\\afterverb\n%\nIf {\\tt findNeighbor} ever went all the way around the circle without\nfinding cards, it would return {\\tt None} and cause an error\nelsewhere in the program.  Fortunately, we can prove that that will\nnever happen (as long as the end of the game is detected correctly).\n\nWe have omitted the {\\tt printHands} method.  You\ncan write that one yourself.\n\nThe following output is from a truncated form of the game where only\nthe top fifteen cards (tens and higher) were dealt to three players.\nWith this small deck, play stops after seven matches instead of\ntwenty-five.\n\n\\beforeverb\n\\begin{verbatim}\n>>> import cards\n>>> game = cards.OldMaidGame()\n>>> game.play([\"Allen\",\"Jeff\",\"Chris\"])\n---------- Cards have been dealt\nHand Allen contains\nKing of Hearts\n Jack of Clubs\n  Queen of Spades\n   King of Spades\n    10 of Diamonds\n\nHand Jeff contains\nQueen of Hearts\n Jack of Spades\n  Jack of Hearts\n   King of Diamonds\n    Queen of Diamonds\n\nHand Chris contains\nJack of Diamonds\n King of Clubs\n  10 of Spades\n   10 of Hearts\n    10 of Clubs\n\nHand Jeff: Queen of Hearts matches Queen of Diamonds\nHand Chris: 10 of Spades matches 10 of Clubs\n---------- Matches discarded, play begins\nHand Allen contains\nKing of Hearts\n Jack of Clubs\n  Queen of Spades\n   King of Spades\n    10 of Diamonds\n\nHand Jeff contains\nJack of Spades\n Jack of Hearts\n  King of Diamonds\n\nHand Chris contains\nJack of Diamonds\n King of Clubs\n  10 of Hearts\n\nHand Allen picked King of Diamonds\nHand Allen: King of Hearts matches King of Diamonds\nHand Jeff picked 10 of Hearts\nHand Chris picked Jack of Clubs\nHand Allen picked Jack of Hearts\nHand Jeff picked Jack of Diamonds\nHand Chris picked Queen of Spades\nHand Allen picked Jack of Diamonds\nHand Allen: Jack of Hearts matches Jack of Diamonds\nHand Jeff picked King of Clubs\nHand Chris picked King of Spades\nHand Allen picked 10 of Hearts\nHand Allen: 10 of Diamonds matches 10 of Hearts\nHand Jeff picked Queen of Spades\nHand Chris picked Jack of Spades\nHand Chris: Jack of Clubs matches Jack of Spades\nHand Jeff picked King of Spades\nHand Jeff: King of Clubs matches King of Spades\n---------- Game is Over\nHand Allen is empty\n\nHand Jeff contains\nQueen of Spades\n\nHand Chris is empty\n\n\\end{verbatim}\n\\afterverb\n%\nSo Jeff loses.\n\n\n\n\\section{Glossary}\n\n\\begin{description}\n\n\\item[inheritance:] The ability to define a new class that is a\nmodified version of a previously defined class.\n\n\\item[parent class:] The class from which a child class inherits.\n\n\\item[child class:] A new class created by inheriting from an\nexisting class; also called a ``subclass.''\n\n\\index{inheritance}\n\\index{parent class}\n\\index{child class}\n\\index{subclass}\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ce31c578-fc0a-442c-acfd-232fb07ca028": {"__data__": {"id_": "ce31c578-fc0a-442c-acfd-232fb07ca028", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "3": {"node_id": "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b", "node_type": null, "metadata": {}, "hash": "b6acd7c1de2b5526221930acebb962014b6692f62952ccd588cd38d3c4255c7f"}}, "hash": "f198ae69d02251fa4b9fc8fce14f45658799c226378a5c5dfaf016130a7a664f", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (C) 1999  Allen B. Downey\n\n% This LaTeX source is free software; you can redistribute it and/or\n% modify it under the terms of the GNU General Public License as\n% published by the Free Software Foundation (version 2).\n\n% This LaTeX source is distributed in the hope that it will be useful,\n% but WITHOUT ANY WARRANTY; without even the implied warranty of\n% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n% General Public License for more details.\n\n% Compiling this LaTeX source has the effect of generating\n% a device-independent representation of a textbook, which\n% can be converted to other formats and printed.  All intermediate\n% representations (including DVI and Postscript), and all printed\n% copies of the textbook are also covered by the GNU General\n% Public License.\n\n% This distribution includes a file named COPYING that contains the text\n% of the GNU General Public License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n\\chapter{Linked lists}\n\\label{list}\n\\index{list}\n\n\\section{Embedded references}\n\\index{reference}\n\\index{embedded reference}\n\\index{reference!embedded}\n\\index{linked list}\n\\index{list!linked}\n\\index{node}\n\\index{cargo}\n\nWe have seen examples of attributes that refer to other objects, which\nwe called {\\bf embedded references} (see Section~\\ref{embedded}).  A\ncommon data structure, the {\\bf linked list}, takes advantage of this\nfeature.\n\nLinked lists are made up of {\\bf nodes}, where each node contains a\nreference to the next node in the list.  In addition, each node\ncontains a unit of data called the {\\bf cargo}.\n\nA linked list is considered a {\\bf recursive data\nstructure} because it has a recursive definition.\n\n\\begin{quote}\nA linked list is either:\n\\begin{itemize}\n\n\\item the empty list, represented by {\\tt None}, or\n\n\\item a node that contains a cargo object and a reference\nto a linked list.\n\n\\end{itemize}\n\n\\end{quote}\n\n\\index{recursive data structure}\n\\index{data structure!recursive}\n\nRecursive data structures lend themselves to\nrecursive methods.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b": {"__data__": {"id_": "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "ce31c578-fc0a-442c-acfd-232fb07ca028", "node_type": null, "metadata": {}, "hash": "f198ae69d02251fa4b9fc8fce14f45658799c226378a5c5dfaf016130a7a664f"}, "3": {"node_id": "6429847b-17f8-4e4e-8ec9-289a9f5b74d1", "node_type": null, "metadata": {}, "hash": "f1a511c92efd1c56cacf7a38c8aa95b4b0eccb7b74f9adf32fbd7877a601cb8c"}}, "hash": "b6acd7c1de2b5526221930acebb962014b6692f62952ccd588cd38d3c4255c7f", "text": "\\section{The {\\tt Node} class}\n\\index{Node class}\n\\index{class!Node}\n\nAs usual when writing a new class, we'll start with the\ninitialization and {\\tt \\_\\_str\\_\\_} methods so that we\ncan test the basic mechanism of creating and displaying the new\ntype:\n\n\\beforeverb\n\\begin{verbatim}\nclass Node:\n  def __init__(self, cargo=None, next=None):\n    self.cargo = cargo\n    self.next  = next\n\n  def __str__(self):\n    return str(self.cargo)\n\\end{verbatim}\n\\afterverb\n%\nAs usual, the parameters for the initialization method are optional. By\ndefault, both the cargo and the link, {\\tt next}, are set\nto {\\tt None}.\n\nThe string representation of a node is just the string representation\nof the cargo.  Since any value can be passed to the {\\tt str}\nfunction, we can store any value in a list.\n\nTo test the implementation so far, we can create a {\\tt Node}\nand print it:\n\n\\beforeverb\n\\begin{verbatim}\n>>> node = Node(\"test\")\n>>> print node\ntest\n\\end{verbatim}\n\\afterverb\n%\nTo make it interesting, we need a list with more than\none node:\n\n\\beforeverb\n\\begin{verbatim}\n>>> node1 = Node(1)\n>>> node2 = Node(2)\n>>> node3 = Node(3)\n\\end{verbatim}\n\\afterverb\n%\nThis code creates three nodes, but we don't have a list yet\nbecause the nodes are not {\\bf linked}.  The state diagram\nlooks like this:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/link1.eps}}\n\\afterfig\n\nTo link the nodes, we have to make the first node refer to the\nsecond and the second node refer to the third:\n\n\\beforeverb\n\\begin{verbatim}\n>>> node1.next = node2\n>>> node2.next = node3\n\\end{verbatim}\n\\afterverb\n%\nThe reference of the third node is {\\tt None}, which indicates that\nit is the end of the list.  Now the state diagram looks like this:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/link2.eps}}\n\\afterfig\n\nNow you know how to create nodes and link them into lists.  What\nmight be less clear at this point is why.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6429847b-17f8-4e4e-8ec9-289a9f5b74d1": {"__data__": {"id_": "6429847b-17f8-4e4e-8ec9-289a9f5b74d1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b", "node_type": null, "metadata": {}, "hash": "b6acd7c1de2b5526221930acebb962014b6692f62952ccd588cd38d3c4255c7f"}, "3": {"node_id": "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd", "node_type": null, "metadata": {}, "hash": "7e0a196bdd4d8ebc78d86ba0bbf5e0df62cd34e730f234e7d810b60d31ee7af1"}}, "hash": "f1a511c92efd1c56cacf7a38c8aa95b4b0eccb7b74f9adf32fbd7877a601cb8c", "text": "\\section{Lists as collections}\n\\index{collection}\n\nLists are useful because they provide a way to assemble multiple\nobjects into a single entity, sometimes called a {\\bf collection}.  In\nthe example, the first node of the list serves as a reference to the\nentire list.\n\n\\index{list!printing}\n\\index{list!as argument}\n\nTo pass the list as an argument, we only have to pass a\nreference to the first node.  For example, the function {\\tt printList}\ntakes a single node as an argument.  Starting with the head of the\nlist, it prints each node until it gets to the end:\n\n\\beforeverb\n\\begin{verbatim}\ndef printList(node):\n  while node:\n    print node,\n    node = node.next\n  print\n\\end{verbatim}\n\\afterverb\n%\nTo invoke this function, we pass a reference to the\nfirst node:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printList(node1)\n1 2 3\n\\end{verbatim}\n\\afterverb\n%\nInside {\\tt printList} we have a reference to the first node\nof the list, but there is no variable that refers to the other\nnodes.  We have to use the {\\tt next} value from each node\nto get to the next node.\n\nTo traverse a linked list, it is common to use a loop variable like\n{\\tt node} to refer to each of the nodes in succession.\n\n\\index{loop variable}\n\\index{list!traversal}\n\\index{traverse}\n\nThis diagram shows the nodes in the list and the values that\n{\\tt node} takes on:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/link3.eps}}\n\\afterfig\n\n\\begin{quote}\n{\\em By convention, lists are often printed in brackets with commas\nbetween the elements, as in {\\tt [1, 2, 3]}.  As an exercise, modify\n{\\tt printList} so that it generates output in this format.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd": {"__data__": {"id_": "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "6429847b-17f8-4e4e-8ec9-289a9f5b74d1", "node_type": null, "metadata": {}, "hash": "f1a511c92efd1c56cacf7a38c8aa95b4b0eccb7b74f9adf32fbd7877a601cb8c"}, "3": {"node_id": "3f2a1579-dc10-4d61-84ec-282a3582fe16", "node_type": null, "metadata": {}, "hash": "2a20f834115c4851cff73e9d108a92aec459ebc79fa23d4839c6c5daa9fc972e"}}, "hash": "7e0a196bdd4d8ebc78d86ba0bbf5e0df62cd34e730f234e7d810b60d31ee7af1", "text": "\\section{Lists and recursion}\n\\label{listrecursion}\n\\index{list!traverse recursively}\n\\index{traverse}\n\nIt is natural to express many list operations using recursive methods.\nFor example, the following is a recursive algorithm for printing a list\nbackwards:\n\n\\begin{enumerate}\n\n\\item Separate the list into two pieces: the first node (called\nthe head); and the rest (called the tail).\n\n\\item Print the tail backward.\n\n\\item Print the head.\n\n\\end{enumerate}\n\nOf course, Step 2, the recursive call, assumes that we have a way of\nprinting a list backward.  But if we assume that the recursive\ncall works---the leap of faith---then we can convince ourselves that\nthis algorithm works.\n\n\\index{leap of faith}\n\\index{list!printing backwards}\n\nAll we need are a base case and a way of proving that for\nany list, we will eventually get to the base case.  Given the\nrecursive definition of a list, a natural base case is\nthe empty list, represented by {\\tt None}:\n\n\\beforeverb\n\\begin{verbatim}\ndef printBackward(list):\n  if list == None: return\n  head = list\n  tail = list.next\n  printBackward(tail)\n  print head,\n\\end{verbatim}\n\\afterverb\n%\nThe first line handles the base case by doing nothing.  The\nnext two lines split the list into {\\tt head} and {\\tt tail}.\nThe last two lines print the list.  The comma at the end of the\nlast line keeps Python from printing a newline after each node.\n\nWe invoke this function as we invoked {\\tt printList}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printBackward(node1)\n3 2 1\n\\end{verbatim}\n\\afterverb\n%\nThe result is a backward list.\n\nYou might wonder why {\\tt printList} and {\\tt printBackward} are\nfunctions and not methods in the {\\tt Node} class.  The reason is that\nwe want to use {\\tt None} to represent the empty list and it is not\nlegal to invoke a method on {\\tt None}.  This limitation makes it\nawkward to write list-manipulating code in a clean object-oriented\nstyle.\n\nCan we prove that {\\tt printBackward} will always terminate?   In other\nwords, will it always reach the base case?  In fact, the answer\nis no.  Some lists will make this function crash.\n\n\n\\section{Infinite lists}\n\\index{infinite list}\n\\index{list!infinite}\n\\index{loop!in list}\n\\index{list!loop}\n\nThere is nothing to prevent a node from referring back to\nan earlier node in the list, including itself.  For example,\nthis figure shows a list with two nodes, one of which refers\nto itself:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/link4.eps}}\n\\afterfig\n\nIf we invoke {\\tt printList} on this list, it will loop forever.\nIf we invoke {\\tt printBackward}, it will recurse infinitely.\nThis sort of behavior makes infinite lists difficult to work\nwith.\n\nNevertheless, they are occasionally useful.  For example, we\nmight represent a number as a list of digits and use an infinite\nlist to represent a repeating fraction.\n\nRegardless, it is problematic that we cannot prove that {\\tt printList}\nand {\\tt printBackward} terminate.  The best we can do is the\nhypothetical statement, ``If the list contains no loops, then these\nfunctions will terminate.''  This sort of claim is called a {\\bf\nprecondition}.  It imposes a constraint on one of the arguments and\ndescribes the behavior of the function if the constraint is satisfied.\nYou will see more examples soon.\n\n\\index{precondition}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3f2a1579-dc10-4d61-84ec-282a3582fe16": {"__data__": {"id_": "3f2a1579-dc10-4d61-84ec-282a3582fe16", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd", "node_type": null, "metadata": {}, "hash": "7e0a196bdd4d8ebc78d86ba0bbf5e0df62cd34e730f234e7d810b60d31ee7af1"}, "3": {"node_id": "b84c306f-9568-4e43-93d6-8e8a7e64cc3a", "node_type": null, "metadata": {}, "hash": "dc01ee77f70cf366da39bc3ac1907312e1a9e6d5f46469557773eebae24a7e02"}}, "hash": "2a20f834115c4851cff73e9d108a92aec459ebc79fa23d4839c6c5daa9fc972e", "text": "\\section{The fundamental ambiguity theorem}\n\\index{ambiguity!fundamental theorem}\n\\index{theorem!fundamental ambiguity}\n\nOne part of {\\tt printBackward} might have raised\nan eyebrow:\n\n\\beforeverb\n\\begin{verbatim}\n    head = list\n    tail = list.next\n\\end{verbatim}\n\\afterverb\n%\nAfter the first assignment, {\\tt head} and {\\tt list} have the same\ntype and the same value.  So why did we create a new variable?\n\nThe reason is that the two variables play different roles.  We think\nof {\\tt head} as a reference to a single node, and we think of\n{\\tt list} as a reference to the first node of a list.  These\n``roles'' are not part of the program; they are in the mind of the\nprogrammer.\n\n\\index{variable!roles}\n\\index{role!variable}\n\nIn general we can't tell by looking at a program what role a\nvariable plays.\nThis ambiguity can be useful, but it can also make programs\ndifficult to read.  We often use variable names like {\\tt node}\nand {\\tt list} to document how we intend to use a variable and\nsometimes create additional variables to disambiguate.\n\nWe could have written {\\tt printBackward} without {\\tt head}\nand {\\tt tail}, which makes it more concise but possibly\nless clear:\n\n\\beforeverb\n\\begin{verbatim}\ndef printBackward(list) :\n  if list == None : return\n  printBackward(list.next)\n  print list,\n\\end{verbatim}\n\\afterverb\n%\nLooking at the two function calls, we have to remember that {\\tt\nprintBackward} treats its argument as a collection and {\\tt print}\ntreats its argument as a single object.\n\nThe {\\bf fundamental ambiguity theorem} describes the ambiguity\nthat is inherent in a reference to a node:\n\n\\begin{quote}\n{\\bf A variable that refers to a node might treat the node as a single\nobject or as the first in a list of nodes.}\n\\end{quote}\n\n\n\n\\section{Modifying lists}\n\\index{list!modifying}\n\\index{modifying lists}\n\nThere are two ways to modify a linked list.  Obviously, we can change\nthe cargo of one of the nodes, but the more interesting operations are\nthe ones that add, remove, or reorder the nodes.\n\nAs an example, let's write a function that removes the second\nnode in the list and returns a reference to the removed node:\n\n\\beforeverb\n\\begin{verbatim}\ndef removeSecond(list):\n  if list == None: return\n  first = list\n  second = list.next\n  # make the first node refer to the third\n  first.next = second.next\n  # separate the second node from the rest of the list\n  second.next = None\n  return second\n\\end{verbatim}\n\\afterverb\n%\nAgain, we are using temporary variables to make the code more\nreadable.  Here is how to use this function:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printList(node1)\n1 2 3\n>>> removed = removeSecond(node1)\n>>> printList(removed)\n2\n>>> printList(node1)\n1 3\n\\end{verbatim}\n\\afterverb\n%\nThis state diagram shows the effect of the operation:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/link5.eps}}\n\\afterfig\n\nWhat happens if you invoke this function and pass a list with only one\nelement (a {\\bf singleton})?  What happens if you pass the empty list\nas an argument?  Is there a precondition for this function?  If so, fix\nthe function to handle a violation of the precondition in a reasonable\nway.\n\n\\index{singleton}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b84c306f-9568-4e43-93d6-8e8a7e64cc3a": {"__data__": {"id_": "b84c306f-9568-4e43-93d6-8e8a7e64cc3a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "3f2a1579-dc10-4d61-84ec-282a3582fe16", "node_type": null, "metadata": {}, "hash": "2a20f834115c4851cff73e9d108a92aec459ebc79fa23d4839c6c5daa9fc972e"}, "3": {"node_id": "8e899819-777f-4540-b925-c8eaa4b25258", "node_type": null, "metadata": {}, "hash": "2d3ed8cff1dd13f332c62e49eecc7f9add5718567118890eb5f1ae3ad187ed38"}}, "hash": "dc01ee77f70cf366da39bc3ac1907312e1a9e6d5f46469557773eebae24a7e02", "text": "\\section{Wrappers and helpers}\n\\index{wrapper function}\n\\index{function!wrapper}\n\\index{helper function}\n\\index{function!helper}\n\nIt is often useful to divide a list operation into\ntwo functions.  For example, to print a list\nbackward in the\nformat {\\tt [3 2 1]} we can use the\n{\\tt printBackward} function to print {\\tt 3 2 1} but we need\na separate function to print the brackets.\nLet's call it {\\tt printBackwardNicely}:\n\n\\beforeverb\n\\begin{verbatim}\ndef printBackwardNicely(list) :\n  print \"[\",\n  printBackward(list)\n  print \"]\",\n\\end{verbatim}\n\\afterverb\n%\nAgain, it is a good idea to check functions like this to see\nif they work with special cases like an empty list or\na singleton.\n\n\\index{singleton}\n\nWhen we use this function elsewhere in the program, we\ninvoke {\\tt printBackwardNicely} directly, and it invokes\n{\\tt printBackward} on our behalf.  In that sense,\n{\\tt printBackwardNicely} acts as a {\\bf wrapper}, and it uses\n{\\tt printBackward} as a {\\bf helper}.\n\n\n\\section {The {\\tt LinkedList} class}\n\\index{LinkedList}\n\\index{class!LinkedList}\n\nThere are some subtle problems with the way we have been\nimplementing lists.  In a reversal of cause and effect, we'll\npropose an alternative implementation first and then explain what\nproblems it solves.\n\nFirst, we'll create a new class called {\\tt LinkedList}.  Its\nattributes are an integer that contains the length of the list\nand a reference to the first node.  {\\tt LinkedList} objects\nserve as handles for manipulating lists of {\\tt Node} objects:\n\n\\beforeverb\n\\begin{verbatim}\nclass LinkedList :\n  def __init__(self) :\n    self.length = 0\n    self.head   = None\n\\end{verbatim}\n\\afterverb\n%\nOne nice thing about the {\\tt LinkedList} class is that it provides\na natural place to put wrapper functions like\n{\\tt printBackwardNicely}, which we can make a\nmethod of the {\\tt LinkedList} class:\n\n\\beforeverb\n\\begin{verbatim}\nclass LinkedList:\n  ...\n  def printBackward(self):\n    print \"[\",\n    if self.head != None:\n      self.head.printBackward()\n    print \"]\",\n\nclass Node:\n  ...\n  def printBackward(self):\n    if self.next != None:\n      tail = self.next\n      tail.printBackward()\n    print self.cargo,\n\\end{verbatim}\n\\afterverb\n%\nJust to make things confusing, we renamed {\\tt printBackwardNicely}.\nNow there are two methods named {\\tt printBackward}: one in the {\\tt\nNode} class (the helper); and one in the {\\tt LinkedList} class (the\nwrapper).  When the wrapper invokes {\\tt self.head.printBackward},\nit is invoking the helper, because {\\tt self.head} is a\n{\\tt Node} object.\n\nAnother benefit of the {\\tt LinkedList} class is that it\nmakes it easier to add or remove the first element of a list.  For\nexample, {\\tt addFirst} is a method for {\\tt LinkedList}s; it\ntakes an item of cargo as an argument and puts it at the beginning of the\nlist:\n\n\\beforeverb\n\\begin{verbatim}\nclass LinkedList:\n  ...\n  def addFirst(self, cargo):\n    node = Node(cargo)\n    node.next = self.head\n    self.head = node\n    self.length = self.length + 1\n\\end{verbatim}\n\\afterverb\n%\nAs usual, you should check code like this to see if it handles\nthe special cases.  For example, what happens if the list is initially\nempty?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8e899819-777f-4540-b925-c8eaa4b25258": {"__data__": {"id_": "8e899819-777f-4540-b925-c8eaa4b25258", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf315b5-29d8-46ec-a209-9313b0a60382", "node_type": null, "metadata": {}, "hash": "6d3808e5914606c11880160615dbcb136f86dd3162bee419a76e1f11b8637a81"}, "2": {"node_id": "b84c306f-9568-4e43-93d6-8e8a7e64cc3a", "node_type": null, "metadata": {}, "hash": "dc01ee77f70cf366da39bc3ac1907312e1a9e6d5f46469557773eebae24a7e02"}}, "hash": "2d3ed8cff1dd13f332c62e49eecc7f9add5718567118890eb5f1ae3ad187ed38", "text": "\\section {Invariants}\n\\index{invariant}\n\\index{object invariant}\n\\index{list!well-formed}\n\nSome lists are ``well formed\"; others are not.  For example, if a list\ncontains a loop, it will cause many of our methods to crash, so we\nmight want to require that lists contain no loops.  Another\nrequirement is that the {\\tt length} value in the {\\tt LinkedList}\nobject should be equal to the actual number of nodes in the list.\n\nRequirements like these are called {\\bf invariants} because, ideally,\nthey should be true of every object all the time.  Specifying\ninvariants for objects is a useful programming practice because it\nmakes it easier to prove the correctness of code, check the integrity\nof data structures, and detect errors.\n\nOne thing that is sometimes confusing about invariants is that\nthere are times when they are violated.  For example, in the\nmiddle of {\\tt addFirst}, after we have added the node but\nbefore we have incremented {\\tt length}, the invariant is\nviolated.  This kind of violation is acceptable; in fact, it is\noften impossible to modify an object without violating an\ninvariant for at least a little while.  Normally, we require\nthat every method that violates an invariant must restore\nthe invariant.\n\nIf there is any significant stretch of code in which the invariant\nis violated, it is important for the comments to make that clear,\nso that no operations are performed that depend on the invariant.\n\n\\index{documentation}\n\n\n\\section{Glossary}\n\\index{embedded reference}\n\\index{reference!embedded}\n\\index{recursive data structure}\n\\index{data structure!recursive}\n\\index{linked list}\n\\index{list!linked}\n\\index{node}\n\\index{cargo}\n\\index{link}\n\\index{precondition}\n\\index{invariant}\n\\index{wrapper}\n\\index{helper method}\n\\index{fundamental ambiguity theorem}\n\\index{singleton}\n\n\\begin{description}\n\n\\item[embedded reference:] A reference stored in an attribute of\nan object.\n\n\\item[linked list:] A data structure that implements a collection using\na sequence of linked nodes.\n\n\\item[node:] An element of a list, usually implemented as an object\nthat contains a reference to another object of the same type.\n\n\\item[cargo:] An item of data contained in a node.\n\n\\item[link:] An embedded reference used to link one object to\nanother.\n\n\\item[precondition:] An assertion that must be true in order for a\nmethod to work correctly.\n\n\\item[fundamental ambiguity theorem:] A reference to a list\nnode can be treated as a single\nobject or as the first in a list of nodes.\n\n\\item[singleton:] A linked list with a single node.\n\n\\item[wrapper:] A method that acts as a middleman between a\ncaller and a helper method, often making the method easier or\nless error-prone to invoke.\n\n\\item[helper:] A method that is not invoked directly by a caller\nbut is used by another method to perform part of an operation.\n\n\\item[invariant:] An assertion that should be true of an object at\nall times (except perhaps while the object is being modified).\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a12a726d-e5d7-4615-8f14-60665e34ec67": {"__data__": {"id_": "a12a726d-e5d7-4615-8f14-60665e34ec67", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3", "node_type": null, "metadata": {}, "hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "3": {"node_id": "523b9723-f604-4ad0-9140-1f46a38c90fd", "node_type": null, "metadata": {}, "hash": "4122c20abd81e8691d018e9088e99d27852f6acde85eddbfc732a4266d7c5e00"}}, "hash": "d4644a0e7b7e2f2bc85d9aa1c86e5573f4123b3a52c423a5222934b0137b53b2", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\n\\chapter{Stacks}\n\n\\section{Abstract data types}\n\\index{abstract data type|see{ADT}}\n\\index{ADT}\n\\index{encapsulation}\n\nThe data types you have seen so far are all concrete, in the\nsense that we have completely specified how they are implemented.\nFor example, the {\\tt Card} class represents a card using two\nintegers.  As we discussed at the time, that is not the only way\nto represent a card; there are many alternative implementations.\n\nAn {\\bf abstract data type}, or ADT, specifies a set of operations (or\nmethods) and the semantics of the operations (what they do), but it\ndoes not specify the implementation of the operations.  That's\nwhat makes it abstract.\n\nWhy is that useful?\n\n\\begin{itemize}\n\n\\item It simplifies the task of specifying an algorithm if you\ncan denote the operations you need without having to think at the\nsame time about how the operations are performed.\n\n\\item Since there are usually many ways to implement an ADT,\nit might be useful to write an algorithm that can be used with\nany of the possible implementations.\n\n\\item Well-known ADTs, such as the Stack ADT in this chapter,\nare often implemented in standard libraries so they can be written\nonce and used by many programmers.\n\n\\item The operations on ADTs provide a common high-level language\nfor specifying and talking about algorithms.\n\n\\end{itemize}\n\nWhen we talk about ADTs, we often distinguish the code that uses\nthe ADT, called the {\\bf client} code, from the code that implements\nthe ADT, called the {\\bf provider} code.\n\n\\index{client}\n\\index{provider}\n\n\n\\section{The Stack ADT}\n\\index{stack}\n\\index{collection}\n\\index{ADT!Stack}\n\nIn this chapter, we will look at one common ADT, the {\\bf stack}.  A\nstack is a collection, meaning that it is a data structure that\ncontains multiple elements.  Other collections we have seen include\ndictionaries and lists.\n\n\\index{interface}\n\nAn ADT is defined by the operations that can be performed on it, which\nis called an {\\bf interface}.  The interface for a stack consists of\nthese operations:\n\n\\begin{description}\n\n\\item[{\\tt \\_\\_init\\_\\_}:] Initialize a new empty stack.\n\n\\item[{\\tt push}:] Add a new item to the stack.\n\n\\item[{\\tt pop}:] Remove and return an item from the stack.  The item\nthat is returned is always the last one that was added.\n\n\\item[{\\tt isEmpty}:] Check whether the stack is empty.\n\n\\end{description}\n\nA stack is sometimes called a ``last in, first out'' or LIFO\ndata structure, because the last item added is the first to\nbe removed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "523b9723-f604-4ad0-9140-1f46a38c90fd": {"__data__": {"id_": "523b9723-f604-4ad0-9140-1f46a38c90fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3", "node_type": null, "metadata": {}, "hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "2": {"node_id": "a12a726d-e5d7-4615-8f14-60665e34ec67", "node_type": null, "metadata": {}, "hash": "d4644a0e7b7e2f2bc85d9aa1c86e5573f4123b3a52c423a5222934b0137b53b2"}, "3": {"node_id": "97f8d001-26d2-4042-87a6-da4c7e9df3d1", "node_type": null, "metadata": {}, "hash": "ff1182aff21e30e45365304dbd5f8cb7c21d7dc5a77967f4dc1761521faa8ec5"}}, "hash": "4122c20abd81e8691d018e9088e99d27852f6acde85eddbfc732a4266d7c5e00", "text": "\\section {Implementing stacks with Python lists}\n\\index{Stack}\n\\index{class!Stack}\n\\index{generic data structure}\n\\index{data structure!generic}\n\nThe list\noperations that Python provides are similar to the operations that\ndefine a stack.  The interface isn't exactly what it is supposed\nto be, but we can write code to translate from the Stack ADT\nto the built-in operations.\n\nThis code is called an {\\bf implementation} of the Stack ADT.\nIn general, an implementation is a set of methods that satisfy\nthe syntactic and semantic requirements of an interface.\n\nHere is an implementation of the Stack ADT that uses a Python list:\n\n\\beforeverb\n\\begin{verbatim}\nclass Stack :\n  def __init__(self) :\n    self.items = []\n\n  def push(self, item) :\n    self.items.append(item)\n\n  def pop(self) :\n    return self.items.pop()\n\n  def isEmpty(self) :\n    return (self.items == [])\n\\end{verbatim}\n\\afterverb\n%\nA {\\tt Stack} object contains an attribute named {\\tt items}\nthat is a list of items in the stack.  The initialization method\nsets {\\tt items} to the empty list.\n\nTo push a new item onto the stack, {\\tt push} appends it onto {\\tt\nitems}.  To pop an item off the stack, {\\tt pop} uses the\nhomonymous\\footnote{same-named} list method to remove and return the\nlast item on the list.\n\nFinally, to check if the stack is empty, {\\tt isEmpty} compares\n{\\tt items} to the empty list.\n\n\\index{veneer}\n\nAn implementation like this, in which the methods consist of simple\ninvocations of existing methods, is called a {\\bf veneer}.  In real\nlife, veneer is a thin coating of good quality wood used in\nfurniture-making to hide lower quality wood underneath.  Computer\nscientists use this metaphor to describe a small piece of code that\nhides the details of an implementation and provides a simpler, or more\nstandard, interface.\n\n\n\\section{Pushing and popping}\n\\index{push}\n\\index{pop}\n\\index{generic data structure}\n\\index{data structure!generic}\n\nA stack is a {\\bf generic data structure}, which means that we can\nadd any type of item to it.  The following example pushes\ntwo integers and a string onto the stack:\n\n\\beforeverb\n\\begin{verbatim}\n>>> s = Stack()\n>>> s.push(54)\n>>> s.push(45)\n>>> s.push(\"+\")\n\\end{verbatim}\n\\afterverb\n%\nWe can use {\\tt isEmpty} and {\\tt pop} to remove and print\nall of the items on the stack:\n\n\\beforeverb\n\\begin{verbatim}\nwhile not s.isEmpty() :\n  print s.pop(),\n\\end{verbatim}\n\\afterverb\n%\nThe output is {\\tt + 45 54}.  In other words, we just used a stack\nto print the items backward!  Granted, it's not the\nstandard format for printing a list, but by using a stack, it was\nremarkably easy to do.\n\nYou should compare this bit of code to the implementation of {\\tt\nprintBackward} in Section~\\ref{listrecursion}.  There is a natural\nparallel between the recursive version of {\\tt printBackward} and the\nstack algorithm here.  The difference is that {\\tt printBackward} uses\nthe runtime stack to keep track of the nodes while it traverses the\nlist, and then prints them on the way back from the recursion.  The\nstack algorithm does the same thing, except that it uses a {\\tt Stack}\nobject instead of the runtime stack.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97f8d001-26d2-4042-87a6-da4c7e9df3d1": {"__data__": {"id_": "97f8d001-26d2-4042-87a6-da4c7e9df3d1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3", "node_type": null, "metadata": {}, "hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "2": {"node_id": "523b9723-f604-4ad0-9140-1f46a38c90fd", "node_type": null, "metadata": {}, "hash": "4122c20abd81e8691d018e9088e99d27852f6acde85eddbfc732a4266d7c5e00"}, "3": {"node_id": "aacf5ef9-6dbd-40de-991b-a512b0552188", "node_type": null, "metadata": {}, "hash": "6988493b68075730d2a7e7b9f4c8bf2f5fb1a648e20961b24df72ddc1fddeded"}}, "hash": "ff1182aff21e30e45365304dbd5f8cb7c21d7dc5a77967f4dc1761521faa8ec5", "text": "\\section {Using a stack to evaluate postfix}\n\\index{postfix}\n\\index{infix}\n\\index{expression}\n\nIn most programming languages, mathematical expressions are\nwritten with the operator between the two operands, as in\n{\\tt 1+2}.  This format is called {\\bf infix}.  An alternative\nused by some calculators is called {\\bf postfix}.  In\npostfix, the operator follows the operands, as in {\\tt 1 2 +}.\n\nThe reason postfix is sometimes useful is that there is a\nnatural way to evaluate a postfix expression using a stack:\n\n\\begin{itemize}\n\n\\item Starting at the beginning of the expression, get one\nterm (operator or operand) at a time.\n\n  \\begin{itemize}\n\n  \\item If the term is an operand, push it on the stack.\n\n  \\item If the term is an operator, pop two operands off\n  the stack, perform the operation on them, and push the\n  result back on the stack.\n\n  \\end{itemize}\n\n\\item When you get to the end of the expression, there should\nbe exactly one operand left on the stack.  That operand is the\nresult.\n\n\\end{itemize}\n\n\\begin{quote}\n{\\em As an exercise, apply this algorithm to the expression\n{\\tt 1 2 + 3 *}.}\n\\end{quote}\n\nThis example demonstrates one of the advantages of postfix---there is\nno need to use parentheses to control the order of operations.  To get\nthe same result in infix, we would have to write {\\tt (1 + 2) * 3}.\n\n\\begin{quote}\n{\\em As an exercise, write a postfix expression that is equivalent to\n{\\tt 1 + 2 * 3}.}\n\\end{quote}\n\n\n\\section {Parsing}\n\\index{parse}\n\\index{token}\n\\index{delimiter}\n\\index{regular expression}\n\nTo implement the previous algorithm, we need\nto be able to traverse a string and break it into operands and\noperators.  This process is an example of {\\bf parsing}, and the\nresults---the individual chunks of the string---are called {\\bf\ntokens}.  You might remember these words from Chapter 1.\n\nPython provides a {\\tt split} method in both the {\\tt string} and {\\tt\nre} (regular expression) modules. The function {\\tt string.split}\nsplits a string into a list using a single character as a {\\bf delimiter}.\nFor example:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import string\n>>> string.split(\"Now is the time\",\" \")\n['Now', 'is', 'the', 'time']\n\\end{verbatim}\n\\afterverb\n%\nIn this case, the delimiter is the space character, so the string\nis split at each space.\n\nThe function {\\tt re.split} is more powerful, allowing us to\nprovide a regular expression instead of a delimiter.\nA regular expression is a way of specifying a set of strings.\nFor example, \\verb+[A-z]+ is the set of all letters and\n\\verb+[0-9]+ is the set of all digits.  The \\verb+^+ operator\nnegates a set, so \\verb+[^0-9]+ is the set of every character that\nis not a digit, which is exactly the set we want to use to\nsplit up postfix expressions:\n\n\\beforeverb\n\\begin{verbatim}\n>>> import re\n>>> re.split(\"([^0-9])\", \"123+456*/\")\n['123', '+', '456', '*', '', '/', '']\n\\end{verbatim}\n\\afterverb\n%\nNotice that the order of the\narguments is different from {\\tt string.split}; the delimiter comes\nbefore the string.\n\nThe resulting list includes the operands {\\tt 123} and {\\tt 456} and\nthe operators {\\tt *} and {\\tt /}.  It also includes two empty\nstrings that are inserted as ``phantom operands,'' whenever an\noperator appears without a number before or after it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aacf5ef9-6dbd-40de-991b-a512b0552188": {"__data__": {"id_": "aacf5ef9-6dbd-40de-991b-a512b0552188", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3", "node_type": null, "metadata": {}, "hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "2": {"node_id": "97f8d001-26d2-4042-87a6-da4c7e9df3d1", "node_type": null, "metadata": {}, "hash": "ff1182aff21e30e45365304dbd5f8cb7c21d7dc5a77967f4dc1761521faa8ec5"}, "3": {"node_id": "decefc81-7ed0-450c-b7ad-bbc3f17b4994", "node_type": null, "metadata": {}, "hash": "308874d968e9a1f54122dfba8f08a0139070e9fd371d93aa38ffb613154d7f12"}}, "hash": "6988493b68075730d2a7e7b9f4c8bf2f5fb1a648e20961b24df72ddc1fddeded", "text": "\\section {Evaluating postfix}\n\nTo evaluate a postfix expression, we will use the parser from\nthe previous section and the algorithm from the section before that.\nTo keep things simple, we'll start with an evaluator that\nonly implements the operators {\\tt +} and {\\tt *}:\n\n\\adjustpage{-3}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\ndef evalPostfix(expr):\n  import re\n  tokenList = re.split(\"([^0-9])\", expr)\n  stack = Stack()\n  for token in tokenList:\n    if  token == '' or token == ' ':\n      continue\n    if  token == '+':\n      sum = stack.pop() + stack.pop()\n      stack.push(sum)\n    elif token == '*':\n      product = stack.pop() * stack.pop()\n      stack.push(product)\n    else:\n      stack.push(int(token))\n  return stack.pop()\n\\end{verbatim}\n\\afterverb\n%\nThe first condition takes care of spaces and empty strings.  The next\ntwo conditions handle operators. We assume, for now, that anything\nelse must be an operand.  Of course, it would be better to check for\nerroneous input and report an error message, but we'll get to that\nlater.\n\nLet's test it by evaluating the postfix form of {\\tt (56+47)*2}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> print evalPostfix (\"56 47 + 2 *\")\n206\n\\end{verbatim}\n\\afterverb\n%\nThat's close enough.\n\n\n\\section {Clients and providers}\n\\index{encapsulation}\n\\index{ADT}\n\nOne of the fundamental goals of an ADT is to separate the\ninterests of the provider, who writes the code that implements\nthe ADT, and the client, who uses the ADT.\nThe provider only has to worry\nabout whether the implementation is correct---in accord\nwith the specification of the ADT---and not how it will be used.\n\nConversely, the client {\\em assumes} that the implementation of the\nADT is correct and doesn't worry about the details.  When you\nare using one of Python's built-in types, you have the luxury\nof thinking exclusively as a client.\n\nOf course, when you implement an ADT, you also have\nto write client code to test it.  In that case, you play both\nroles, which can be confusing.  You should make some effort\nto keep track of which role you are playing at any moment.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "decefc81-7ed0-450c-b7ad-bbc3f17b4994": {"__data__": {"id_": "decefc81-7ed0-450c-b7ad-bbc3f17b4994", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc58a467-8927-4a0e-8f27-d70a9b65fae3", "node_type": null, "metadata": {}, "hash": "29f4318e743373b158f315f8d22038f24902967296115a8d28dab0db9c70cf25"}, "2": {"node_id": "aacf5ef9-6dbd-40de-991b-a512b0552188", "node_type": null, "metadata": {}, "hash": "6988493b68075730d2a7e7b9f4c8bf2f5fb1a648e20961b24df72ddc1fddeded"}}, "hash": "308874d968e9a1f54122dfba8f08a0139070e9fd371d93aa38ffb613154d7f12", "text": "\\section{Glossary}\n\\index{ADT}\n\\index{client}\n\\index{provider}\n\\index{infix}\n\\index{postfix}\n\\index{parse}\n\\index{token}\n\\index{delimiter}\n\n\\begin{description}\n\n\\item[abstract data type (ADT):]  A data type (usually a collection\nof objects) that is defined by a set of operations but that can\nbe implemented in a variety of ways.\n\n\\item[interface:] The set of operations that define an ADT.\n\n\\item[implementation:] Code that satisfies the syntactic and semantic\nrequirements of an interface.\n\n\\item[client:]  A program (or the person who wrote it) that uses an ADT.\n\n\\item[provider:] The code (or the person\nwho wrote it) that implements an ADT.\n\n\\item[veneer:]  A class definition that implements an ADT with\nmethod definitions that are invocations of other methods, sometimes\nwith simple transformations.  The veneer does no significant work,\nbut it improves or standardizes the interface seen by the client.\n\n\\item[generic data structure:] A kind of data structure that can\ncontain data of any type.\n\n\\item[infix:]  A way of writing mathematical expressions with the\noperators between the operands.\n\n\\item[postfix:]  A way of writing mathematical expressions with the\noperators after the operands.\n\n\\item[parse:]  To read a string of characters or tokens and analyze\nits grammatical structure.\n\n\\item[token:]  A set of characters that are treated as a unit for\npurposes of parsing, such as the words in a natural language.\n\n\\item[delimiter:]  A character that is used to separate tokens,\nsuch as punctuation in a natural language.\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1f5f825e-ba06-4f69-8c26-0ce2aeaff2d6": {"__data__": {"id_": "1f5f825e-ba06-4f69-8c26-0ce2aeaff2d6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "3": {"node_id": "c3556ce3-e8dc-44df-9263-115d43ae8b65", "node_type": null, "metadata": {}, "hash": "0fb3dc59b92afc33c1046e28b3a9eb3e7a95eb91c6d567991ddbac9ea17ee459"}}, "hash": "b31873bf80194ccd1fa5a7ec223dafdef36d3f7c5a79ba6c82ded8b6bb0f2565", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n\\chapter{Queues}\n\\label{queue}\n\\index{queue}\n\\index{ADT!Queue}\n\\index{priority queue}\n\\index{ADT!Priority Queue}\n\\index{FIFO}\n\\index{queueing policy}\n\\index{priority queueing}\n\nThis chapter presents two ADTs: the Queue and the Priority Queue.\nIn real life, a {\\bf queue} is a line of customers waiting for service\nof some kind.  In most cases, the first customer in line is the\nnext customer to be served.  There are exceptions, though.\nAt airports, customers whose flights are leaving soon\nare sometimes taken from the middle of the queue.  At\nsupermarkets, a polite customer might let someone with only a\nfew items go first.\n\nThe rule that determines who goes next is called the\n{\\bf queueing policy}.  The simplest queueing policy is\ncalled {\\bf FIFO}, for ``first-in-first-out.''  The most general\nqueueing policy is {\\bf priority queueing}, in which each customer\nis assigned a priority and the customer with the highest priority\ngoes first, regardless of the order of arrival.  We\nsay this is the most general policy because the priority\ncan be based on anything: what time a flight leaves; how many\ngroceries the customer has; or how important the customer is.\nOf course, not all queueing policies are ``fair,'' but\nfairness is in the eye of the beholder.\n\nThe Queue ADT and the Priority Queue ADT have the same set\nof operations.  The difference\nis in the semantics of the operations: a queue uses the FIFO\npolicy; and a priority queue (as the name suggests) uses the\npriority queueing policy.\n\n\\adjustpage{1}\n\n\\section{The Queue ADT}\n\\index{ADT!Queue}\n\\index{Queue ADT}\n\\index{implementation!Queue}\n\\index{queue!List implementation}\n\nThe Queue ADT is defined by the following operations:\n\n\\begin{description}\n\n\\item[{\\tt \\_\\_init\\_\\_}:] Initialize a new empty queue.\n\n\\item[{\\tt insert}:] Add a new item to the queue.\n\n\\item[{\\tt remove}:] Remove and return an item from the queue.  The item\nthat is returned is the first one that was added.\n\n\\item[{\\tt isEmpty}:] Check whether the queue is empty.\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c3556ce3-e8dc-44df-9263-115d43ae8b65": {"__data__": {"id_": "c3556ce3-e8dc-44df-9263-115d43ae8b65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "2": {"node_id": "1f5f825e-ba06-4f69-8c26-0ce2aeaff2d6", "node_type": null, "metadata": {}, "hash": "b31873bf80194ccd1fa5a7ec223dafdef36d3f7c5a79ba6c82ded8b6bb0f2565"}, "3": {"node_id": "b7618784-7da4-4ea7-a537-e13e4e6958a4", "node_type": null, "metadata": {}, "hash": "a013dba54d0d6ef7c3d103be964f9858564bddfb6f8b09b9566a24f40d4b2f65"}}, "hash": "0fb3dc59b92afc33c1046e28b3a9eb3e7a95eb91c6d567991ddbac9ea17ee459", "text": "\\section{Linked Queue}\n\\index{linked queue}\n\\index{queue!linked implementation}\n\nThe first implementation of the Queue ADT we will look at is\ncalled a {\\bf linked queue} because it is made up of linked\n{\\tt Node} objects.  Here is the class definition:\n\n\\beforeverb\n\\begin{verbatim}\nclass Queue:\n  def __init__(self):\n    self.length = 0\n    self.head = None\n\n  def isEmpty(self):\n    return (self.length == 0)\n\n  def insert(self, cargo):\n    node = Node(cargo)\n    node.next = None\n    if self.head == None:\n      # if list is empty the new node goes first\n      self.head = node\n    else:\n      # find the last node in the list\n      last = self.head\n      while last.next: last = last.next\n      # append the new node\n      last.next = node\n    self.length = self.length + 1\n\n  def remove(self):\n    cargo = self.head.cargo\n    self.head = self.head.next\n    self.length = self.length - 1\n    return cargo\n\\end{verbatim}\n\\afterverb\n%\nThe methods {\\tt isEmpty} and {\\tt remove} are identical to the\n{\\tt LinkedList} methods {\\tt isEmpty} and {\\tt removeFirst}.\nThe {\\tt insert} method is new and a bit more complicated.\n\nWe want to insert new items at the end of the list.\nIf the queue is empty, we just set {\\tt\nhead} to refer to the new node.\n\nOtherwise, we traverse the list to the last node and\ntack the new node on the end.  We can identify the last node because\nits {\\tt next} attribute is {\\tt None}.\n\nThere are two invariants for a properly formed {\\tt Queue} object.\nThe value of {\\tt length} should be the number of nodes in the\nqueue, and the last node should have {\\tt next} equal to\n{\\tt None}.  Convince yourself that this method preserves\nboth invariants.\n\n\n\\section{Performance characteristics}\n\\index{performance}\n\nNormally when we invoke a method, we are not concerned with the\ndetails of its implementation.  But there is one ``detail''\nwe might want to know---the performance characteristics of the\nmethod.  How long does it take, and how does the run time change\nas the number of items in the collection increases?\n\nFirst look at {\\tt remove}.\nThere are no loops or function calls here, suggesting that\nthe runtime of this method is the same every time.  Such a method\nis called a {\\bf constant time} operation.\nIn reality, the method might be slightly faster\nwhen the list is empty since it skips the body of the conditional,\nbut that difference is not significant.\n\n\\index{constant time}\n\nThe performance of {\\tt insert} is very different.\nIn the general case, we have to\ntraverse the list to find the last element.\n\nThis traversal takes time proportional to the length of the\nlist.  Since the runtime is a linear function of the length,\nthis method is called {\\bf linear time}.  Compared to\nconstant time, that's very bad.\n\n\\index{linear time}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b7618784-7da4-4ea7-a537-e13e4e6958a4": {"__data__": {"id_": "b7618784-7da4-4ea7-a537-e13e4e6958a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "2": {"node_id": "c3556ce3-e8dc-44df-9263-115d43ae8b65", "node_type": null, "metadata": {}, "hash": "0fb3dc59b92afc33c1046e28b3a9eb3e7a95eb91c6d567991ddbac9ea17ee459"}, "3": {"node_id": "015f77e0-1857-45de-9299-ae361ba2bb5a", "node_type": null, "metadata": {}, "hash": "8d8286332f0e7f59ff18614dbf4933ad752ae082c2deea18b21836c3cf414681"}}, "hash": "a013dba54d0d6ef7c3d103be964f9858564bddfb6f8b09b9566a24f40d4b2f65", "text": "\\section{Improved Linked Queue}\n\\index{queue!improved implementation}\n\\index{improved queue}\n\nWe would like an implementation of the Queue ADT that can\nperform all operations in constant time.  One way to\ndo that is to modify the Queue class so that it\nmaintains a reference to both the first and the last node,\nas shown in the figure:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/queue1.eps}}\n\\afterfig\n\nThe {\\tt ImprovedQueue} implementation looks like this:\n\n\\beforeverb\n\\begin{verbatim}\nclass ImprovedQueue:\n  def __init__(self):\n    self.length = 0\n    self.head   = None\n    self.last   = None\n\n  def isEmpty(self):\n    return (self.length == 0)\n\\end{verbatim}\n\\afterverb\n%\nSo far, the only change is the attribute {\\tt last}. It is used in\n{\\tt insert} and {\\tt remove} methods:\n\n\\beforeverb\n\\begin{verbatim}\nclass ImprovedQueue:\n  ...\n  def insert(self, cargo):\n    node = Node(cargo)\n    node.next = None\n    if self.length == 0:\n      # if list is empty, the new node is head and last\n      self.head = self.last = node\n    else:\n      # find the last node\n      last = self.last\n      # append the new node\n      last.next = node\n      self.last = node\n    self.length = self.length + 1\n\\end{verbatim}\n\\afterverb\n%\nSince {\\tt last} keeps track of the last node, we don't have to search\nfor it.  As a result, this method is constant time.\n\nThere is a price to pay for that speed.  We have to add a special case\nto {\\tt remove} to set {\\tt last} to {\\tt None} when the last node is\nremoved:\n\n\\beforeverb\n\\begin{verbatim}\nclass ImprovedQueue:\n  ...\n  def remove(self):\n    cargo     = self.head.cargo\n    self.head = self.head.next\n    self.length = self.length - 1\n    if self.length == 0:\n      self.last = None\n    return cargo\n\\end{verbatim}\n\\afterverb\n%\nThis implementation is more complicated than the\nLinked Queue implementation, and it is more difficult to demonstrate\nthat it is correct.  The advantage is that we have achieved\nthe goal---both {\\tt insert} and {\\tt remove} are constant time\noperations.\n\n\\begin{quote}\n{\\em As an exercise, write an implementation of the Queue ADT using\na Python list.  Compare the performance of this implementation to the\n{\\tt ImprovedQueue} for a range of queue lengths.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "015f77e0-1857-45de-9299-ae361ba2bb5a": {"__data__": {"id_": "015f77e0-1857-45de-9299-ae361ba2bb5a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "2": {"node_id": "b7618784-7da4-4ea7-a537-e13e4e6958a4", "node_type": null, "metadata": {}, "hash": "a013dba54d0d6ef7c3d103be964f9858564bddfb6f8b09b9566a24f40d4b2f65"}, "3": {"node_id": "c8f16d49-c530-47af-a49c-3e0f2e6edac3", "node_type": null, "metadata": {}, "hash": "e1b541c5ec4f4da58c5fc27e332a45414061851b923c608bbae6df4f69256b64"}}, "hash": "8d8286332f0e7f59ff18614dbf4933ad752ae082c2deea18b21836c3cf414681", "text": "\\section{Priority queue}\n\\index{priority queue!ADT}\n\\index{ADT!Priority Queue}\n\nThe Priority Queue ADT has the same interface as the Queue ADT, but\ndifferent semantics.  Again, the interface is:\n\n\\begin{description}\n\n\\item[{\\tt \\_\\_init\\_\\_}:] Initialize a new empty queue.\n\n\\item[{\\tt insert}:] Add a new item to the queue.\n\n\\item[{\\tt remove}:] Remove and return an item from the queue.  The item\nthat is returned is the one with the highest priority.\n\n\\item[{\\tt isEmpty}:] Check whether the queue is empty.\n\n\\end{description}\n\nThe semantic difference is that the item that is removed from the\nqueue is not necessarily the first one that was added.  Rather, it is\nthe item in the queue that has the highest priority.  What the\npriorities are and how they compare to each other are not specified by\nthe Priority Queue implementation.  It depends on which items are in\nthe queue.\n\nFor example, if the items in the queue have names, we might choose\nthem in alphabetical order.  If they are bowling scores, we might go\nfrom highest to lowest, but if they are golf scores, we would go from\nlowest to highest.  As long as we can compare the items in the queue,\nwe can find and remove the one with the highest priority.\n\nThis implementation of Priority Queue has as an attribute\na Python list that\ncontains the items in the queue.\n\n\\beforeverb\n\\begin{verbatim}\nclass PriorityQueue:\n  def __init__(self):\n    self.items = []\n\n  def isEmpty(self):\n    return self.items == []\n\n  def insert(self, item):\n    self.items.append(item)\n\\end{verbatim}\n\\afterverb\n%\nThe initialization method, {\\tt isEmpty}, and {\\tt insert} are all\nveneers on list operations.  The only interesting method is {\\tt\nremove}:\n\n\\beforeverb\n\\begin{verbatim}\nclass PriorityQueue:\n  ...\n  def remove(self):\n    maxi = 0\n    for i in range(1,len(self.items)):\n      if self.items[i] > self.items[maxi]:\n        maxi = i\n    item = self.items[maxi]\n    self.items[maxi:maxi+1] = []\n    return item\n\\end{verbatim}\n\\afterverb\n%\nAt the beginning of each iteration, {\\tt maxi} holds the index of the\nbiggest item (highest priority) we have seen {\\em so far}.  Each time\nthrough the loop, the program compares the {\\tt i}-eth item to the champion.\nIf the new item is bigger, the value of {\\tt maxi} is set to {\\tt i}.\n\n\\index{traverse}\n\nWhen the {\\tt for} statement completes,\n{\\tt maxi} is the index of the biggest item.  This item\nis removed from the list and returned.\n\nLet's test the implementation:\n\n\\beforeverb\n\\begin{verbatim}\n>>> q = PriorityQueue()\n>>> q.insert(11)\n>>> q.insert(12)\n>>> q.insert(14)\n>>> q.insert(13)\n>>> while not q.isEmpty(): print q.remove()\n14\n13\n12\n11\n\\end{verbatim}\n\\afterverb\n%\nIf the queue contains simple numbers or strings, they are\nremoved in numerical or alphabetical order, from highest to\nlowest.  Python can find the biggest integer or string because\nit can compare them using the built-in comparison operators.\n\nIf the queue contains an object type, it has to provide\na {\\tt \\_\\_cmp\\_\\_} method.  When {\\tt remove} uses the {\\tt >}\noperator to compare items, it invokes the {\\tt \\_\\_cmp\\_\\_}\nfor one of the items and passes the other as an argument.  As\nlong as the {\\tt \\_\\_cmp\\_\\_} method works correctly, the\nPriority Queue will work.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c8f16d49-c530-47af-a49c-3e0f2e6edac3": {"__data__": {"id_": "c8f16d49-c530-47af-a49c-3e0f2e6edac3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "2": {"node_id": "015f77e0-1857-45de-9299-ae361ba2bb5a", "node_type": null, "metadata": {}, "hash": "8d8286332f0e7f59ff18614dbf4933ad752ae082c2deea18b21836c3cf414681"}, "3": {"node_id": "751318bf-7121-43da-88b3-b0c3e382e2f8", "node_type": null, "metadata": {}, "hash": "cff5a136b79ff1a13723070392fd599de7d3897b65364e9bdaae5b7bb9e5dd95"}}, "hash": "e1b541c5ec4f4da58c5fc27e332a45414061851b923c608bbae6df4f69256b64", "text": "\\section{The {\\tt Golfer} class}\n\\index{Golfer}\n\\index{class!Golfer}\n\\index{priority}\n\\index{operator overloading}\n\\index{overloading!operator}\n\nAs an example of an object with an unusual definition of priority, let's\nimplement a class called {\\tt Golfer} that keeps track of the\nnames and scores of golfers.  As usual, we start by defining {\\tt\n\\_\\_init\\_\\_} and {\\tt \\_\\_str\\_\\_}:\n\n\\beforeverb\n\\begin{verbatim}\nclass Golfer:\n  def __init__(self, name, score):\n    self.name = name\n    self.score= score\n\n  def __str__(self):\n    return \"%-16s: %d\" % (self.name, self.score)\n\\end{verbatim}\n\\afterverb\n%\n{\\tt \\_\\_str\\_\\_} uses the format operator to put the names\nand scores in neat columns.\n\n\\index{format operator}\n\\index{operator!format}\n\nNext we define a version of {\\tt \\_\\_cmp\\_\\_} where the lowest\nscore gets highest priority.  As always, {\\tt \\_\\_cmp\\_\\_} returns\n1 if {\\tt self} is ``greater than'' {\\tt other}, -1 if {\\tt self}\nis ``less than'' other, and 0 if they are equal.\n\n\\beforeverb\n\\begin{verbatim}\nclass Golfer:\n  ...\n  def __cmp__(self, other):\n    if self.score < other.score: return  1   # less is more\n    if self.score > other.score: return -1\n    return 0\n\\end{verbatim}\n\\afterverb\n%\nNow we are ready to test the priority queue with the {\\tt Golfer} class:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tiger = Golfer(\"Tiger Woods\",    61)\n>>> phil  = Golfer(\"Phil Mickelson\", 72)\n>>> hal   = Golfer(\"Hal Sutton\",     69)\n>>>\n>>> pq = PriorityQueue()\n>>> pq.insert(tiger)\n>>> pq.insert(phil)\n>>> pq.insert(hal)\n>>> while not pq.isEmpty(): print pq.remove()\nTiger Woods    : 61\nHal Sutton     : 69\nPhil Mickelson : 72\n\\end{verbatim}\n\\afterverb\n\n\\begin{quote}\n{\\em As an exercise, write an implementation of the Priority Queue ADT \nusing a linked list.  You should keep the list sorted so that removal\nis a constant time operation.  Compare the performance of this\nimplementation with the Python list implementation.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "751318bf-7121-43da-88b3-b0c3e382e2f8": {"__data__": {"id_": "751318bf-7121-43da-88b3-b0c3e382e2f8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a", "node_type": null, "metadata": {}, "hash": "821cd266646ed64793309ae8262943cce5e8d6ead88e44167c7fb5984f6e734b"}, "2": {"node_id": "c8f16d49-c530-47af-a49c-3e0f2e6edac3", "node_type": null, "metadata": {}, "hash": "e1b541c5ec4f4da58c5fc27e332a45414061851b923c608bbae6df4f69256b64"}}, "hash": "cff5a136b79ff1a13723070392fd599de7d3897b65364e9bdaae5b7bb9e5dd95", "text": "\\section{Glossary}\n\\index{queue}\n\\index{queueing policy}\n\\index{FIFO}\n\\index{priority queue}\n\\index{veneer}\n\\index{constant time}\n\\index{linear time}\n\\index{performance hazard}\n\\index{linked queue}\n\\index{circular buffer}\n\\index{abstract class}\n\\index{interface}\n\n\\begin{description}\n\n\\item[queue:]  An ordered set of objects waiting for a service of\nsome kind.\n\n\\item[Queue:]  An ADT that performs the operations one might perform\non a queue.\n\n\\item[queueing policy:]  The rules that determine which member\nof a queue is removed next.\n\n\\item[FIFO:]  ``First In, First Out,'' a queueing policy in which\nthe first member to arrive is the first to be removed.\n\n\\item[priority queue:]  A queueing policy in which\neach member has a priority determined by external factors.\nThe member with the highest priority is the first to be removed.\n\n\\item[Priority Queue:]  An ADT that defines the operations one\nmight perform on a priority queue.\n\n\\item[linked queue:]  An implementation of a queue using a linked\nlist.\n\n\\item[constant time:]  An operation whose runtime does not\ndepend on the size of the data structure.\n\n\\item[linear time:]  An operation whose runtime is a linear\nfunction of the size of the data structure.\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0938a373-57be-4f0f-bb30-8bd66beac402": {"__data__": {"id_": "0938a373-57be-4f0f-bb30-8bd66beac402", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "3": {"node_id": "b8d3d508-5cbc-4dc0-b528-dc4943c195cc", "node_type": null, "metadata": {}, "hash": "c31d6acee2a9557ee3687a5da5cc1a82ccac2eebc18186b533cdc7385a0789d8"}}, "hash": "c3fff470a16513cb292218e49b6203dd8277351a27e02d9c17d72b2702c6990f", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\n\\chapter{Trees}\n\\index{tree}\n\\index{node}\n\\index{tree node}\n\\index{cargo}\n\\index{embedded reference}\n\\index{binary tree}\n\nLike linked lists, trees are made up of nodes.  A common kind of tree\nis a {\\bf binary tree}, in which each node contains a reference to two\nother nodes (possibly null).  These references are referred to as the\nleft and right subtrees.  Like list nodes, tree nodes also contain\ncargo.  A state diagram for a tree looks like this:\n\n\\label{tree}\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/tree1.eps,height=1.7in}}\n\\afterfig\n\nTo avoid cluttering up the picture, we often omit the\n{\\tt Nones}.\n\nThe top of the tree (the node {\\tt tree} refers to) is called the\n{\\bf root}.  In keeping with the tree metaphor, the other nodes are\ncalled branches and the nodes at the tips with null references are\ncalled {\\bf leaves}.  It may seem odd that we draw the picture with\nthe root at the top and the leaves at the bottom, but that is not the\nstrangest thing.\n\n\\index{root node}\n\\index{leaf node}\n\\index{parent node}\n\\index{child node}\n\\index{level}\n\nTo make things worse, computer scientists mix in another\nmetaphor---the family tree.  The top node is sometimes called\na {\\bf parent} and the nodes it refers to are its {\\bf children}.\nNodes with the same parent are called {\\bf siblings}.\n\nFinally, there is a geometric vocabulary for talking\nabout trees.  We already mentioned left and right, but there is\nalso ``up'' (toward the parent/root) and ``down'' (toward the\nchildren/leaves).  Also, all of the nodes that are the same\ndistance from the root comprise a {\\bf level} of the tree.\n\nWe probably don't need three metaphors for talking about trees,\nbut there they are.\n\nLike linked lists, trees are recursive data structures because\nthey are defined recursively.\n\n\\index{recursive data structure}\n\\index{data structure!recursive}\n\n\\begin{quote}\nA tree is either:\n\n\\begin{itemize}\n\n\\item the empty tree, represented by {\\tt None}, or\n\n\\item a node that contains an object reference and two\ntree references.\n\n\\end{itemize}\n\n\\end{quote}\n\n\\index{tree!empty}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b8d3d508-5cbc-4dc0-b528-dc4943c195cc": {"__data__": {"id_": "b8d3d508-5cbc-4dc0-b528-dc4943c195cc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "0938a373-57be-4f0f-bb30-8bd66beac402", "node_type": null, "metadata": {}, "hash": "c3fff470a16513cb292218e49b6203dd8277351a27e02d9c17d72b2702c6990f"}, "3": {"node_id": "d67269bf-5add-49da-8086-3ce46606e311", "node_type": null, "metadata": {}, "hash": "625b688d45e930159a20f739b58a69b56f82b5183b0a2d0b22ddae0a52823e69"}}, "hash": "c31d6acee2a9557ee3687a5da5cc1a82ccac2eebc18186b533cdc7385a0789d8", "text": "\\section {Building trees}\n\nThe process of assembling a tree is similar\nto the process of assembling a linked list.\nEach constructor invocation builds a single node.\n\n\\beforeverb\n\\begin{verbatim}\nclass Tree:\n  def __init__(self, cargo, left=None, right=None):\n    self.cargo = cargo\n    self.left  = left\n    self.right = right\n\n  def __str__(self):\n    return str(self.cargo)\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt cargo} can\nbe any type, but the arguments for {\\tt left} and {\\tt right} should be\ntree nodes.  {\\tt left} and {\\tt right} are optional; the default\nvalue is {\\tt None}.\n\nTo print a node, we just print the cargo.\n\nOne way to build a tree is from the bottom up.\nAllocate the child nodes first:\n\n\\beforeverb\n\\begin{verbatim}\nleft = Tree(2)\nright = Tree(3)\n\\end{verbatim}\n\\afterverb\n%\nThen create the parent node and link it to the children:\n\n\\beforeverb\n\\begin{verbatim}\ntree = Tree(1, left, right);\n\\end{verbatim}\n\\afterverb\n%\nWe can write this code more concisely by nesting constructor\ninvocations:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tree = Tree(1, Tree(2), Tree(3))\n\\end{verbatim}\n\\afterverb\n%\nEither way, the result is the tree at the beginning of the\nchapter.\n\n\n\\section {Traversing trees}\n\\index{tree!traversal}\n\\index{traverse}\n\\index{recursion}\n\nAny time you see a new data structure, your first\nquestion should be, ``How do I traverse it?''  The most natural\nway to traverse a tree is recursively.  For example, if the\ntree contains integers as cargo, this function returns their sum:\n\n\\beforeverb\n\\begin{verbatim}\ndef total(tree):\n  if tree == None: return 0\n  return total(tree.left) + total(tree.right) + tree.cargo\n\\end{verbatim}\n\\afterverb\n%\nThe base case is the empty tree, which contains no cargo, so\nthe sum is 0.\nThe recursive step\nmakes two recursive calls to find the sum of the child trees.\nWhen the recursive calls complete,\nwe add the cargo of the parent and return the\ntotal.\n\n\n\\section {Expression trees}\n\\index{tree!expression}\n\\index{expression tree}\n\\index{postfix}\n\\index{infix}\n\\index{binary operator}\n\\index{operator!binary}\n\nA tree is a natural way to represent the structure of an expression.\nUnlike other notations, it can represent the computation\nunambiguously.  For example, the infix expression {\\tt 1 + 2 * 3} is\nambiguous unless we know that the multiplication happens before the\naddition.\n\nThis expression tree represents the same computation:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/tree2.eps,height=2in}}\n\\afterfig\n\nThe nodes of an expression tree can be operands like {\\tt 1} and\n{\\tt 2} or operators like {\\tt +} and {\\tt *}.  Operands are leaf nodes;\noperator nodes contain references to their operands.  (All of these\noperators are {\\bf binary}, meaning they have exactly two operands.)\n\nWe can build this tree like this:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tree = Tree('+', Tree(1), Tree('*', Tree(2), Tree(3)))\n\\end{verbatim}\n\\afterverb\n%\nLooking at the figure, there is no question what the order of\noperations is; the multiplication happens first in order to compute\nthe second operand of the addition.\n\nExpression trees have many uses.  The example in this chapter uses\ntrees to translate expressions to postfix, prefix, and infix.\nSimilar trees are used inside compilers to parse, optimize, and\ntranslate programs.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d67269bf-5add-49da-8086-3ce46606e311": {"__data__": {"id_": "d67269bf-5add-49da-8086-3ce46606e311", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "b8d3d508-5cbc-4dc0-b528-dc4943c195cc", "node_type": null, "metadata": {}, "hash": "c31d6acee2a9557ee3687a5da5cc1a82ccac2eebc18186b533cdc7385a0789d8"}, "3": {"node_id": "9efa0d03-95f2-447c-99c0-3085b92d0f82", "node_type": null, "metadata": {}, "hash": "443a6dd30e3175fda78a8445fa8fa1838b6adebdcd52d6300685a700dd5dcf3c"}}, "hash": "625b688d45e930159a20f739b58a69b56f82b5183b0a2d0b22ddae0a52823e69", "text": "\\section {Tree traversal}\n\\index{tree!traversal}\n\\index{traverse}\n\\index{recursion}\n\\index{preorder}\n\\index{postorder}\n\\index{inorder}\n\nWe can traverse an expression tree and print the contents like this:\n\n\\beforeverb\n\\begin{verbatim}\ndef printTree(tree):\n  if tree == None: return\n  print tree.cargo,\n  printTree(tree.left)\n  printTree(tree.right)\n\\end{verbatim}\n\\afterverb\n%\n\\index{preorder}\n\\index{prefix}\n\nIn other words, to print a tree, first print the contents of\nthe root, then print the entire left subtree, and then print the\nentire right subtree.  This way of traversing a tree is called\na {\\bf preorder}, because the contents of the root appear {\\em before}\nthe contents of the children.\nFor the previous example, the output is:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tree = Tree('+', Tree(1), Tree('*', Tree(2), Tree(3)))\n>>> printTree(tree)\n+ 1 * 2 3\n\\end{verbatim}\n\\afterverb\n%\nThis format is different from both postfix and infix; it is another\nnotation called {\\bf prefix}, in which the operators appear before\ntheir operands.\n\nYou might suspect that if you traverse the tree in a\ndifferent order, you will get the expression in a different\nnotation.  For example, if you print the subtrees first and then\nthe root node, you get:\n\n\\beforeverb\n\\begin{verbatim}\ndef printTreePostorder(tree):\n  if tree == None: return\n  printTreePostorder(tree.left)\n  printTreePostorder(tree.right)\n  print tree.cargo,\n\\end{verbatim}\n\\afterverb\n%\n\\index{postorder}\n\\index{inorder}\nThe result, {\\tt 1 2 3 * +}, is in postfix!\nThis order of traversal is called {\\bf postorder}.\n\nFinally, to traverse a tree {\\bf inorder},\nyou print the left tree, then the root, and then the right tree:\n\n\\beforeverb\n\\begin{verbatim}\ndef printTreeInorder(tree):\n  if tree == None: return\n  printTreeInorder(tree.left)\n  print tree.cargo,\n  printTreeInorder(tree.right)\n\\end{verbatim}\n\\afterverb\n%\nThe result is {\\tt 1 + 2 * 3}, which is the expression in infix.\n\nTo be fair, we should point out that we have omitted an\nimportant complication.  Sometimes when we write an expression\nin infix, we have to use parentheses to preserve the order of\noperations.  So an inorder traversal is not quite sufficient to\ngenerate an infix expression.\n\nNevertheless, with a few improvements, the expression tree and the\nthree recursive traversals provide a general way to translate\nexpressions from one format to another.\n\n\\begin{quote}\n{\\em As an exercise, modify {\\tt printTreeInorder} so that it\nputs parentheses around every operator and pair of operands.\nIs the output correct and unambiguous?  Are the parentheses\nalways necessary? }\n\\end{quote}\n\nIf we do an inorder traversal and keep track of what level\nin the tree we are on, we can generate a graphical representation\nof a tree:\n\n\\beforeverb\n\\begin{verbatim}\ndef printTreeIndented(tree, level=0):\n  if tree == None: return\n  printTreeIndented(tree.right, level+1)\n  print '  '*level + str(tree.cargo)\n  printTreeIndented(tree.left, level+1)\n\\end{verbatim}\n\\afterverb\n%\nThe parameter {\\tt level} keeps track of where we are in the\ntree.  By default, it is initially 0.  Each time we make a\nrecursive call, we pass {\\tt level+1} because the child's level\nis always one greater than the parent's.  Each item is indented by\ntwo spaces per level.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9efa0d03-95f2-447c-99c0-3085b92d0f82": {"__data__": {"id_": "9efa0d03-95f2-447c-99c0-3085b92d0f82", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "d67269bf-5add-49da-8086-3ce46606e311", "node_type": null, "metadata": {}, "hash": "625b688d45e930159a20f739b58a69b56f82b5183b0a2d0b22ddae0a52823e69"}, "3": {"node_id": "f301d3a7-e76e-456d-9b46-6b971f9d23b2", "node_type": null, "metadata": {}, "hash": "f11409314c1ca089a897bbee3e231022a9e5b61f10e0119e714b5401cc45753c"}}, "hash": "443a6dd30e3175fda78a8445fa8fa1838b6adebdcd52d6300685a700dd5dcf3c", "text": "Each item is indented by\ntwo spaces per level.  The result for the example tree is:\n\n\\beforeverb\n\\begin{verbatim}\n>>> printTreeIndented(tree)\n    3\n  *\n    2\n+\n  1\n\\end{verbatim}\n\\afterverb\n%\nIf you look at the output sideways, you see a simplified version\nof the original figure.\n\n\n\n\\section{Building an expression tree}\n\\index{expression tree}\n\\index{tree!expression}\n\\index{parse}\n\\index{token}\n\nIn this section, we parse infix expressions and build the\ncorresponding expression trees.  For example, the expression\n{\\tt (3+7)*9} yields the following tree:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/tree3.eps}}\n\\afterfig\n\nNotice that we have simplified the diagram by leaving\nout the names of the attributes.\n\nThe parser we will write handles expressions that include numbers,\nparentheses, and the operators {\\tt +} and {\\tt *}.\nWe assume that the input string has already\nbeen tokenized into a Python list.  The token list for\n{\\tt (3+7)*9} is:\n\n\\beforeverb\n\\begin{verbatim}\n['(', 3, '+', 7, ')', '*', 9, 'end']\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt end} token is useful for preventing the parser from\nreading past the end of the list.\n\n\\begin{quote}\n{\\em As an exercise, write a function that takes an expression\nstring and returns a token list.}\n\\end{quote}\n\nThe first function we'll write is {\\tt getToken}, which takes a token\nlist and an expected token as arguments.  It compares the expected\ntoken to the first token on the list: if they match, it removes the\ntoken from the list and returns true; otherwise, it returns false:\n\n\\beforeverb\n\\begin{verbatim}\ndef getToken(tokenList, expected):\n  if tokenList[0] == expected:\n    del tokenList[0]\n    return True\n  else:\n    return False\n\\end{verbatim}\n\\afterverb\n%\nSince {\\tt tokenList} refers to a mutable object, the changes made\nhere are visible to any other variable that refers to the same object.\n\nThe next function, {\\tt getNumber}, handles operands.\nIf the next token in {\\tt tokenList} is a number,\n{\\tt getNumber} removes it and returns a leaf node containing\nthe number; otherwise, it returns {\\tt None}.\n\n\\beforeverb\n\\begin{verbatim}\ndef getNumber(tokenList):\n  x = tokenList[0]\n  if not isinstance(x, int): return None\n  del tokenList[0]\n  return Tree (x, None, None)\n\\end{verbatim}\n\\afterverb\n%\nBefore continuing, we should test {\\tt getNumber} in isolation.  We\nassign a list of numbers to {\\tt tokenList}, extract the first,\nprint the result, and print what remains of the token list:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [9, 11, 'end']\n>>> x = getNumber(tokenList)\n>>> printTreePostorder(x)\n9\n>>> print tokenList\n[11, 'end']\n\\end{verbatim}\n\\afterverb\n%\nThe next method we need is {\\tt getProduct}, which builds an\nexpression tree for products.  A simple product has two numbers as\noperands, like {\\tt 3 * 7}.\n\nHere is a version of {\\tt getProduct} that handles\nsimple products.\n\n\\beforeverb\n\\begin{verbatim}\ndef getProduct(tokenList):\n  a = getNumber(tokenList)\n  if getToken(tokenList, '*'):\n    b = getNumber(tokenList)\n    return Tree ('*', a, b)\n  else:\n    return a\n\\end{verbatim}\n\\afterverb\n%\nAssuming that {\\tt getNumber} succeeds and returns a singleton tree,\nwe assign the first operand to {\\tt a}.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f301d3a7-e76e-456d-9b46-6b971f9d23b2": {"__data__": {"id_": "f301d3a7-e76e-456d-9b46-6b971f9d23b2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "9efa0d03-95f2-447c-99c0-3085b92d0f82", "node_type": null, "metadata": {}, "hash": "443a6dd30e3175fda78a8445fa8fa1838b6adebdcd52d6300685a700dd5dcf3c"}, "3": {"node_id": "4c2e44e7-e40e-4937-96de-44c0628f61f4", "node_type": null, "metadata": {}, "hash": "32a8ef382b4c72e15be715b540a642628a52a346dec288fc745735ed77d703b3"}}, "hash": "f11409314c1ca089a897bbee3e231022a9e5b61f10e0119e714b5401cc45753c", "text": "If the next character is {\\tt *}, we get the second number\nand build an expression tree with {\\tt a}, {\\tt b},\nand the operator.\n\nIf the next character is anything else, then we just return\nthe leaf node with {\\tt a}.  Here are two examples:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [9, '*', 11, 'end']\n>>> tree = getProduct(tokenList)\n>>> printTreePostorder(tree)\n9 11 *\n\\end{verbatim}\n\\afterverb\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [9, '+', 11, 'end']\n>>> tree = getProduct(tokenList)\n>>> printTreePostorder(tree)\n9\n\\end{verbatim}\n\\afterverb\n%\nThe second example implies that we consider a single\noperand to be a kind of product.  This definition of\n``product'' is counterintuitive, but it turns out to\nbe useful.  \n\nNow we have to deal with compound products, like like {\\tt 3 * 5 *\n13}.  We treat this expression as a product of products, namely {\\tt 3\n* (5 * 13)}.  The resulting tree is:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/tree4.eps}}\n\\afterfig\n\nWith a small change in {\\tt getProduct}, we can handle\nan arbitrarily long product:\n\n\\beforeverb\n\\begin{verbatim}\ndef getProduct(tokenList):\n  a = getNumber(tokenList)\n  if getToken(tokenList, '*'):\n    b = getProduct(tokenList)       # this line changed\n    return Tree ('*', a, b)\n  else:\n    return a\n\\end{verbatim}\n\\afterverb\n%\nIn other words, a product can be either a singleton or a tree with\n{\\tt *} at the root, a number on the left, and a product on the right.\nThis kind of recursive definition should be starting to feel\nfamiliar.\n\n\\index{product}\n\\index{definition!recursive}\n\\index{recursive definition}\n\nLet's test the new version with a compound product:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [2, '*', 3, '*', 5 , '*', 7, 'end']\n>>> tree = getProduct(tokenList)\n>>> printTreePostorder(tree)\n2 3 5 7 * * *\n\\end{verbatim}\n\\afterverb\n%\nNext we will add the ability to parse sums.  Again, we\nuse a slightly counterintuitive definition of ``sum.''\nFor us, a sum can be a tree with {\\tt +} at the root,\na product on the left, and a sum on the right.  Or, a sum\ncan be just a product.\n\n\\index{sum}\n\nIf you are willing to play along with this definition, it has a nice\nproperty: we can represent any expression (without parentheses) as a\nsum of products.  This property is the basis of our parsing algorithm.\n\n{\\tt getSum} tries to build a tree with a product on the left and a\nsum on the right.  But if it doesn't find a {\\tt +}, it just builds a\nproduct.\n\n\\beforeverb\n\\begin{verbatim}\ndef getSum(tokenList):\n  a = getProduct(tokenList)\n  if getToken(tokenList, '+'):\n    b = getSum(tokenList)\n    return Tree ('+', a, b)\n  else:\n    return a\n\\end{verbatim}\n\\afterverb\n%\nLet's test it with {\\tt 9 * 11 + 5 * 7}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [9, '*', 11, '+', 5, '*', 7, 'end']\n>>> tree = getSum(tokenList)\n>>> printTreePostorder(tree)\n9 11 * 5 7 * +\n\\end{verbatim}\n\\afterverb\n%\nWe are almost done, but we still have to handle parentheses.\nAnywhere in an expression where there can be a number, there can\nalso be an entire sum\nenclosed in parentheses.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c2e44e7-e40e-4937-96de-44c0628f61f4": {"__data__": {"id_": "4c2e44e7-e40e-4937-96de-44c0628f61f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "f301d3a7-e76e-456d-9b46-6b971f9d23b2", "node_type": null, "metadata": {}, "hash": "f11409314c1ca089a897bbee3e231022a9e5b61f10e0119e714b5401cc45753c"}, "3": {"node_id": "7a406987-eba0-4222-a34f-7ad3724a5604", "node_type": null, "metadata": {}, "hash": "4f99a93acd3b54691adee1dbcd250a5e0d455b7a873f1006c153557e57e8d8a5"}}, "hash": "32a8ef382b4c72e15be715b540a642628a52a346dec288fc745735ed77d703b3", "text": "We just need to modify {\\tt getNumber} to\nhandle {\\bf subexpressions}:\n\n\\index{subexpression}\n\n\\beforeverb\n\\begin{verbatim}\ndef getNumber(tokenList):\n  if getToken(tokenList, '('):\n    x = getSum(tokenList)         # get the subexpression\n    getToken(tokenList, ')')      # remove the closing parenthesis\n    return x\n  else:\n    x = tokenList[0]\n    if not isinstance(x, int): return None\n    tokenList[0:1] = []\n    return Tree (x, None, None)    \n\\end{verbatim}\n\\afterverb\n%\nLet's test this code with {\\tt 9 * (11 + 5) * 7}:\n\n\\beforeverb\n\\begin{verbatim}\n>>> tokenList = [9, '*', '(', 11, '+', 5, ')', '*', 7, 'end']\n>>> tree = getSum(tokenList)\n>>> printTreePostorder(tree)\n9 11 5 + 7 * *\n\\end{verbatim}\n\\afterverb\n%\n\\adjustpage{-2}\n\\pagebreak\n\nThe parser handled the parentheses correctly; the addition happens\nbefore the multiplication.\n\nIn the final version of the program, it would be a good idea\nto give {\\tt getNumber} a name\nmore descriptive of its new role.\n\n\n\\section{Handling errors}\n\\index{handling errors}\n\\index{error handling}\n\nThroughout the parser, we've been assuming that expressions are\nwell-formed.  For example, when we reach the end of a\nsubexpression, we assume that the next character is a close\nparenthesis.  If there is an error and the next character is something\nelse, we should deal with it.\n\n\\beforeverb\n\\begin{verbatim}\ndef getNumber(tokenList):\n  if getToken(tokenList, '('):\n    x = getSum(tokenList)       \n    if not getToken(tokenList, ')'):\n      raise ValueError, 'missing parenthesis'\n    return x\n  else:\n    # the rest of the function omitted\n\\end{verbatim}\n\\afterverb\n%\nThe {\\tt raise} statement creates an exception; in this\ncase a {\\tt ValueError}.  If the function that called\n{\\tt getNumber}, or one of the other functions in the\ntraceback, handles the exception, then the program\ncan continue.  Otherwise, Python will print an error message\nand quit.\n\n\\begin{quote}\n{\\em As an exercise, find other places in these functions where errors\ncan occur and add appropriate {\\tt raise} statements.\nTest your code with improperly\nformed expressions.}\n\\end{quote}\n\n\n\\section{The animal tree}\n\\index{animal game}\n\\index{game!animal}\n\\index{knowledge base}\n\nIn this section, we develop a small program that uses a tree\nto represent a knowledge base.\n\nThe program interacts with the user to create a tree of questions\nand animal names.  Here is a sample run:\n\n\\adjustpage{-3}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\nAre you thinking of an animal? y\nIs it a bird? n\nWhat is the animals name? dog\nWhat question would distinguish a dog from a bird? Can it fly\nIf the animal were dog the answer would be? n\n\nAre you thinking of an animal? y\nCan it fly? n\nIs it a dog? n\nWhat is the animals name? cat\nWhat question would distinguish a cat from a dog? Does it bark\nIf the animal were cat the answer would be? n\n\nAre you thinking of an animal? y\nCan it fly? n\nDoes it bark? y\nIs it a dog? y\nI rule!\n\nAre you thinking of an animal?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a406987-eba0-4222-a34f-7ad3724a5604": {"__data__": {"id_": "7a406987-eba0-4222-a34f-7ad3724a5604", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "4c2e44e7-e40e-4937-96de-44c0628f61f4", "node_type": null, "metadata": {}, "hash": "32a8ef382b4c72e15be715b540a642628a52a346dec288fc745735ed77d703b3"}, "3": {"node_id": "ec793519-e044-423d-ba4b-21c3ec916891", "node_type": null, "metadata": {}, "hash": "0cc21ecce0950ad45477642b3d7ab969684cda22f2bc5464074a02cc93713111"}}, "hash": "4f99a93acd3b54691adee1dbcd250a5e0d455b7a873f1006c153557e57e8d8a5", "text": "y\nI rule!\n\nAre you thinking of an animal? n\n\\end{verbatim}\n\\afterverb\n%\nHere is the tree this dialog builds:\n\n\\beforefig\n\\centerline{\\psfig{figure=illustrations/tree5.eps}}\n\\afterfig\n\nAt the beginning of each round, the program starts at the top of the\ntree and asks the first question.  Depending on the answer, it moves\nto the left or right child and continues until it gets to a leaf\nnode.  At that point, it makes a guess.  If the guess is not correct,\nit asks the user for the name of the new animal and a question that\ndistinguishes the (bad) guess from the new animal.  Then it adds a\nnode to the tree with the new question and the new animal.\n\nHere is the code:\n\n\\adjustpage{-2}\n\\pagebreak\n\n\\beforeverb\n\\begin{verbatim}\ndef animal():\n  # start with a singleton\n  root = Tree(\"bird\")\n\n  # loop until the user quits\n  while True:\n    print\n    if not yes(\"Are you thinking of an animal? \"): break\n\n    # walk the tree\n    tree = root\n    while tree.getLeft() != None:\n      prompt = tree.getCargo() + \"? \"\n      if yes(prompt):\n        tree = tree.getRight()\n      else:\n        tree = tree.getLeft()\n\n    # make a guess\n    guess = tree.getCargo()\n    prompt = \"Is it a \" + guess + \"? \"\n    if yes(prompt):\n      print \"I rule!\"\n      continue\n\n    # get new information\n    prompt  = \"What is the animal's name? \"\n    animal  = raw_input(prompt)\n    prompt  = \"What question would distinguish a %s from a %s? \"\n    question = raw_input(prompt % (animal,guess))\n\n    # add new information to the tree\n    tree.setCargo(question)\n    prompt = \"If the animal were %s the answer would be? \"\n    if yes(prompt % animal):\n      tree.setLeft(Tree(guess))\n      tree.setRight(Tree(animal))\n    else:\n      tree.setLeft(Tree(animal))\n      tree.setRight(Tree(guess))\n\\end{verbatim}\n\\afterverb\n%\nThe function {\\tt yes} is a helper; it prints a prompt and then\ntakes input from the user.  If the response\nbegins with {\\em y} or {\\em Y}, the function returns true:\n\n\\beforeverb\n\\begin{verbatim}\ndef yes(ques):\n  from string import lower\n  ans = lower(raw_input(ques))\n  return (ans[0] == 'y')\n\\end{verbatim}\n\\afterverb\n%\nThe condition of the outer loop is {\\tt True}, which means it will\ncontinue until the {\\tt break} statement executes, if the user\nis not thinking of an animal.\n\nThe inner {\\tt while} loop walks the tree from top to bottom,\nguided by the user's responses.\n\nWhen a new node is added to the tree, the new question replaces\nthe cargo, and the two children are the new animal and the original\ncargo.\n\nOne shortcoming of the program is that when it exits, it forgets\neverything you carefully taught it!\n\n\\begin{quote}\n{\\em As an exercise, think of various ways you might save\nthe knowledge tree in a file.  Implement the one you think\nis easiest.}\n\\end{quote}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ec793519-e044-423d-ba4b-21c3ec916891": {"__data__": {"id_": "ec793519-e044-423d-ba4b-21c3ec916891", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "32abb63a-2e47-4a29-a7e8-d187222d3e60", "node_type": null, "metadata": {}, "hash": "2a79d681c4ca9a3737e9dbfb44c4ec26df4bfb59660b77179661ebe1d9190596"}, "2": {"node_id": "7a406987-eba0-4222-a34f-7ad3724a5604", "node_type": null, "metadata": {}, "hash": "4f99a93acd3b54691adee1dbcd250a5e0d455b7a873f1006c153557e57e8d8a5"}}, "hash": "0cc21ecce0950ad45477642b3d7ab969684cda22f2bc5464074a02cc93713111", "text": "Implement the one you think\nis easiest.}\n\\end{quote}\n\n\n\\section{Glossary}\n\\index{binary tree}\n\\index{node}\n\\index{root node}\n\\index{leaf node}\n\\index{parent node}\n\\index{child node}\n\\index{sibling node}\n\\index{level}\n\\index{prefix}\n\\index{preorder}\n\\index{postorder}\n\\index{inorder}\n\\index{binary operator}\n\\index{operator!binary}\n\n\\begin{description}\n\n\\item[binary tree:]  A tree in which each node refers to zero, one, or\ntwo dependent nodes.\n\n\\item[root:]  The topmost node in a tree, with no parent.\n\n\\item[leaf:]  A bottom-most node in a tree, with no children.\n\n\\item[parent:]  The node that refers to a given node.\n\n\\item[child:]  One of the nodes referred to by a node.\n\n\\item[siblings:]  Nodes that share a common parent.\n\n\\item[level:]  The set of nodes equidistant from the root.\n\n\\item[binary operator:]  An operator that takes two operands.\n\n\\item[subexpression:]  An expression in parentheses that acts\nas a single operand in a larger expression.\n\n\\item[preorder:]  A way to traverse a tree, visiting each node\nbefore its children.\n\n\\item[prefix notation:]  A way of writing a mathematical expression\nwith each operator appearing before its operands.\n\n\\item[postorder:]  A way to traverse a tree, visiting the children\nof each node before the node itself.\n\n\\item[inorder:]  A way to traverse a tree, visiting the left subtree,\nthen the root, and then the right subtree.\n\n\\end{description}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "83808199-cb49-4a60-bcfe-27a4b9d3b685": {"__data__": {"id_": "83808199-cb49-4a60-bcfe-27a4b9d3b685", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5a928013-b632-48cb-9ecd-b5670356cf8f", "node_type": null, "metadata": {}, "hash": "7f41150f0ccac5de9bd0f529d47c68f3bd3f0cae633bde82cf0e31aedc727847"}, "3": {"node_id": "3363e09a-1ab4-4c17-bb8a-e6752917130a", "node_type": null, "metadata": {}, "hash": "b310582126abe7f22a23f77d5ebbfd167da4140e0889452bb41f85d86c97afe0"}}, "hash": "d235af6c0c0d9dd50b29801e7115c4f9693143ea647f2102785801e7a1a83972", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and John Dewey.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\\chapter{Contributor List}\n\nTo paraphrase the philosophy of the Free Software Foundation, this\nbook is free like free speech, but not necessarily free like free\npizza.  It came about because of a collaboration that would not have\nbeen possible without the GNU Free Documentation License.  So we\nthank the Free Software Foundation for developing this license\nand, of course, making it available to us.\n\nWe also thank the more than 100 sharp-eyed and\nthoughtful readers who have sent us suggestions and corrections over\nthe past few years.  In the spirit of free software, we decided to\nexpress our gratitude in the form of a contributor list.  Unfortunately,\nthis list is not complete, but we are doing our best to keep it\nup to date.\n\nIf you have a chance to look through the list, you should\nrealize that each person here has spared you and all subsequent\nreaders from the confusion of a technical error or a\nless-than-transparent explanation, just by sending us a note.\n\nImpossible as it may seem after so many corrections, there may still\nbe errors in this book.  If you should stumble across one, please\ncheck the online version of the book at {\\tt http://thinkpython.com},\nwhich is the most up-to-date version.  If the error has not been\ncorrected, please take a minute to send us email at {\\tt\nfeedback@thinkpython.com}.  If we make a change due to your\nsuggestion, you will appear in the next version of the contributor\nlist (unless you ask to be omitted).  Thank you!\n\n\n\\begin{itemize}\n\n\\item Lloyd Hugh Allen sent in a correction to Section 8.4.\n%He can be reached at: {\\tt lha2@columbia.edu}\n\n\\item Yvon Boulianne sent in a correction of a semantic error in\nChapter 5.\n%She can be reached at: {\\tt mystic@monuniverse.net}\n\n\\item Fred Bremmer submitted a correction in Section 2.1.\n%He can be reached at:  {\\tt Fred.Bremmer@ubc.cu}\n\n\\item Jonah Cohen wrote the Perl scripts to convert the\nLaTeX source for this book into beautiful HTML.\n\n%His Web page is {\\tt jonah.ticalc.org}\n%and his email is {\\tt JonahCohen@aol.com}\n\n\\item Michael Conlon sent in a grammar correction in Chapter 2\nand an improvement in style in Chapter 1, and he initiated discussion\non the technical aspects of interpreters.\n\n%Michael can be reached at: {\\tt michael.conlon@sru.edu}\n\n\\item Benoit Girard sent in a\ncorrection to a humorous mistake in Section 5.6.\n\n%Benoit can be reached at:\n%{\\tt benoit.girard@gouv.qc.ca}\n\n\\item Courtney Gleason and Katherine Smith wrote {\\tt horsebet.py},\nwhich was used as a case study in an earlier version of the book.  Their\nprogram can now be found on the website.\n\n%Courtney can be reached at: {\\tt\n%orion1558@aol.com}\n\n\\item Lee Harr submitted more corrections than we have room to list\nhere, and indeed he should be listed as one of the principal editors\nof the text.\n\n%He can be reached at: {\\tt missive@linuxfreemail.com}\n\n\\item James Kaylin is a student using the text. He has submitted\nnumerous corrections.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3363e09a-1ab4-4c17-bb8a-e6752917130a": {"__data__": {"id_": "3363e09a-1ab4-4c17-bb8a-e6752917130a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5a928013-b632-48cb-9ecd-b5670356cf8f", "node_type": null, "metadata": {}, "hash": "7f41150f0ccac5de9bd0f529d47c68f3bd3f0cae633bde82cf0e31aedc727847"}, "2": {"node_id": "83808199-cb49-4a60-bcfe-27a4b9d3b685", "node_type": null, "metadata": {}, "hash": "d235af6c0c0d9dd50b29801e7115c4f9693143ea647f2102785801e7a1a83972"}, "3": {"node_id": "476b4f33-d161-4cbe-a216-dbfa745ef944", "node_type": null, "metadata": {}, "hash": "d026bf3148ce7eed284ab214d1b8281e43888f702170fcaa308d60eceb9cd4b7"}}, "hash": "b310582126abe7f22a23f77d5ebbfd167da4140e0889452bb41f85d86c97afe0", "text": "He has submitted\nnumerous corrections.\n\n%James can be reached by email at: {\\tt Jamarf@aol.com}\n\n\\item David Kershaw fixed the broken {\\tt catTwice} function in Section\n3.10.\n\n%He can be reached at: {\\tt david\\_kershaw@merck.com}\n\n\\item Eddie Lam has sent in numerous corrections to Chapters \n1, 2, and 3.\nHe also fixed the Makefile so that it creates an index the first time it is\nrun and helped us set up a versioning scheme.  \n\n%Eddie can be reached at:\n%{\\tt nautilus@yoyo.cc.monash.edu.au}\n\n\\item Man-Yong Lee sent in a correction to the example code in\nSection 2.4.  \n\n%He can be reaced at: {\\tt yong@linuxkorea.co.kr}\n\n\\item David Mayo pointed out that the word ``unconsciously\"\nin Chapter 1 needed\nto be changed to ``subconsciously\".\n\n%David can be reached at:{\\tt bdbear44@netscape.net}\n\n\\item Chris McAloon sent in several corrections to Sections 3.9 and\n3.10.\n\n%He can be reached at: {\\tt cmcaloon@ou.edu}\n\n\\item Matthew J. Moelter has been a long-time contributor who sent\nin numerous corrections and suggestions to the book.  \n\n%He can be reached at:\n%{\\tt mmoelter@calpoly.edu}\n\n\\item Simon Dicon Montford reported a missing function definition and\nseveral typos in Chapter 3.  He also found errors in the {\\tt increment}\nfunction in Chapter 13.\n\n%He can be reached at: {\\tt dicon@bigfoot.com}\n\n\\item John Ouzts corrected the definition of ``return value\"\nin Chapter 3.\n\n%He can be reached at: {\\tt jouzts@bigfoot.com}\n\n\\item Kevin Parks sent in valuable comments and suggestions as to how\nto improve the distribution of the book.\n\n%He can be reached at: {\\tt cpsoct@lycos.com}\n\n\\item David Pool sent in a typo in the glossary of Chapter 1, as well\nas kind words of encouragement.\n\n%He can be reached at: {\\tt pooldavid@hotmail.com}\n\n\\item Michael Schmitt sent in a correction to the chapter on files\nand exceptions.\n\n%He can be reached at: {\\tt ipv6\\_128@yahoo.com}\n\n\\item Robin Shaw pointed out an error in Section 13.1, where the\nprintTime function was used in an example without being defined.\n\n%Robin can be reached at: {\\tt randj@iowatelecom.net}\n\n\\item Paul Sleigh found an error in Chapter 7 and a bug in Jonah Cohen's\nPerl script that generates HTML from LaTeX.\n\n%He can be reached at: {\\tt bat@atdot.dotat.org}\n\n%\\item Christopher Smith is a computer science teacher at the Blake\n%School in Minnesota who teaches Python to his beginning students.\n\n%He can be reached at: {\\tt csmith@blakeschool.org or smiles@saysomething.com}\n\n\\item Craig T. Snydal is testing the text in a course at Drew\nUniversity.  He has contributed several valuable suggestions and corrections.\n\n%and can be reached at: {\\tt csnydal@drew.edu}\n\n\\item Ian Thomas and his students are using the text in a programming\ncourse.  They are the first ones to test the chapters in the latter half\nof the book, and they have made numerous corrections and suggestions.\n\n%Ian can be reached at: {\\tt ithomas@sd70.bc.ca}\n\n\\item Keith Verheyden sent in a correction in Chapter 3.\n\n%He can be reached at: {\\tt kverheyd@glam.ac.uk}\n\n\\item Peter Winstanley let us know about a longstanding error in\nour Latin in Chapter 3.\n\n%He can be reached at:{\\tt Peter.Winstanley@scotland.gsi.gov.uk} \n\n\\item Chris Wrobel made corrections to the code in the chapter on\nfile I/O and exceptions. \n\n%He can be reached at: {\\tt ferz980@yahoo.com}\n\n\\item Moshe Zadka has made invaluable contributions to this project.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "476b4f33-d161-4cbe-a216-dbfa745ef944": {"__data__": {"id_": "476b4f33-d161-4cbe-a216-dbfa745ef944", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5a928013-b632-48cb-9ecd-b5670356cf8f", "node_type": null, "metadata": {}, "hash": "7f41150f0ccac5de9bd0f529d47c68f3bd3f0cae633bde82cf0e31aedc727847"}, "2": {"node_id": "3363e09a-1ab4-4c17-bb8a-e6752917130a", "node_type": null, "metadata": {}, "hash": "b310582126abe7f22a23f77d5ebbfd167da4140e0889452bb41f85d86c97afe0"}, "3": {"node_id": "479ce05c-61fd-4bea-8a73-e26b16cd3e70", "node_type": null, "metadata": {}, "hash": "9ffd6d66ae282c4b6e078f4c3d0f733d65d624415d7b4f9faaa1df77421b6283"}}, "hash": "d026bf3148ce7eed284ab214d1b8281e43888f702170fcaa308d60eceb9cd4b7", "text": "In addition to writing the first draft of the chapter on Dictionaries, he\nprovided continual guidance in the early stages of the book.\n\n%He can be reached at: {\\tt moshez@math.huji.ac.il}\n\n\\item Christoph Zwerschke sent several corrections and\npedagogic suggestions, and explained the difference between {\\em gleich}\nand {\\em selbe}.\n\n\\item James Mayer sent us a whole slew of spelling and\ntypographical errors, including two in the contributor list.\n\n% james.mayer@acm.org\n\n\\item Hayden McAfee caught a potentially confusing inconsistency\nbetween two examples.\n%hayden.mcafee@mindspring.com\n\n\\item Angel Arnal is part of an international team of translators\nworking on the Spanish version of the text.  He has also found several\nerrors in the English version.\n\n\\item Tauhidul Hoque and Lex Berezhny created the illustrations\nin Chapter 1 and improved many of the other illustrations.\n\n\\item Dr. Michele Alzetta caught an error in Chapter 8 and sent\nsome interesting pedagogic comments and suggestions about Fibonacci\nand Old Maid.\n%mikalzet@libero.it\n\n\\item Andy Mitchell caught a typo in Chapter 1 and a broken example\nin Chapter 2.\n%phantom917@hotmail.com\n\n\\item Kalin Harvey suggested a clarification in Chapter 7 and\ncaught some typos.\n%kalin@metamuscle.net\n\n\\item Christopher P. Smith caught several typos and is helping us\nprepare to update the book for Python 2.2.\n%csmith@blakeschool.org\n\n\\item David Hutchins caught a typo in the Foreword.\n%jsdah2@uas.alaska.edu\n\n\\item Gregor Lingl is teaching Python at a high school in Vienna,\nAustria.  He is working on a German translation of the book,\nand he caught a couple of bad errors in Chapter 5.\n%glingl@aon.at\n\n%Sean McShane sent us a very nice note\n%sean.mcshane@sheridanc.on.ca\n\n\\item Julie Peters caught a typo in the Preface.\n%jkpeters@dmacc.cc.ia.us\n\n\\item Florin Oprina sent in an improvement in {\\tt makeTime},\na correction in {\\tt printTime}, and a nice typo.\n%oprina@student.uit.no \n\n\\item D.~J.~Webre suggested a clarification in Chapter 3.\n%d_webre@yahoo.com\n\n% \\item \n% jkane@broadlink.com\n\n\\item Ken found a fistful of errors in Chapters 8, 9 and 11.\n%ken@codeweavers.com\n\n\\item Ivo Wever caught a typo in Chapter 5 and suggested a clarification\nin Chapter 3.\n% I.J.W.Wever@student.tnw.tudelft.nl\n\n% rbeumer@knijnenberg.nl\n\n\\item Curtis Yanko suggested a clarification in Chapter 2.\n% YankoC@gspinc.com\n\n\\item Ben Logan sent in a number of typos and problems with translating\nthe book into HTML.\n%ben@wblogan.net\n\n%\\item XXX suggested a clarification in Chapter 7, but prefers not\n% to be included here.\n%ejykfy@comcast.net\n\n%\\item Florian Thiel caught an inconsistency in Chapter 2.\n%noroute@web.de\n\n\\item Jason Armstrong saw the missing word in Chapter 2.\n%jarmstrong@technicacorp.com\n\n\\item Louis Cordier noticed a spot in Chapter 16 where the code\ndidn't match the text.\n% lcordier@dsp.sun.ac.za\n\n\\item Brian Cain suggested several clarifications in Chapters 2 and 3.\n% Brian.Cain@motorola.com\n\n\\item Rob Black sent in a passel of corrections, including some\nchanges for Python 2.2.\n% Rob.Black@static2358.com\n\n\\item Jean-Philippe Rey at Ecole Centrale\nParis sent a number of patches, including some updates for Python 2.2\nand other thoughtful improvements.\n%<jean-philippe.rey@ecp.fr>\n\n\\item Jason Mader at George Washington University made a number\nof useful suggestions and corrections.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "479ce05c-61fd-4bea-8a73-e26b16cd3e70": {"__data__": {"id_": "479ce05c-61fd-4bea-8a73-e26b16cd3e70", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5a928013-b632-48cb-9ecd-b5670356cf8f", "node_type": null, "metadata": {}, "hash": "7f41150f0ccac5de9bd0f529d47c68f3bd3f0cae633bde82cf0e31aedc727847"}, "2": {"node_id": "476b4f33-d161-4cbe-a216-dbfa745ef944", "node_type": null, "metadata": {}, "hash": "d026bf3148ce7eed284ab214d1b8281e43888f702170fcaa308d60eceb9cd4b7"}}, "hash": "9ffd6d66ae282c4b6e078f4c3d0f733d65d624415d7b4f9faaa1df77421b6283", "text": "%Jason Mader <jason@ncac.gwu.edu>\n\n\\item Jan Gundtofte-Bruun reminded us that ``a error'' is an error.\n% Jan Gundtofte-Bruun <jan@g-b.dk>\n\n\\item Abel David and Alexis Dinno reminded us that the plural of\n``matrix'' is ``matrices'', not ``matrixes''.  This error was in the\nbook for years, but two readers with the same initials reported it on\nthe same day.  Weird.\n% Abel David <abel.david@gmail.com>, lexy-lou@doyenne.com\n\n\\item Charles Thayer encouraged us to get rid of the semi-colons\nwe had put at the ends of some statements and to clean up our\nuse of ``argument'' and ``parameter''.\n% Charles Thayer <catintp@yahoo.com>\n\n\\item Roger Sperberg pointed out a twisted piece of logic in Chapter 3.\n%<rsperberg@gmail.com>\n\n\\item Sam Bull pointed out a confusing paragraph in Chapter 2.\n%Sam Bull <dreamsorcerer@gmail.com>\n\n\\item Andrew Cheung pointed out two instances of ``use before def.''\n%cheunga@u.washington.edu\n\n\\item Hans Batra found an error in Chapter 16.\n\n\\item Chris Seberino suggested some improvements in the Preface.\n\n\\item Yuri Takhteyev pointed out a problem with single and double quotes.\n\n\\end{itemize}\n\n\n% correspondents\n\n% Python version\n\n% Sam\n% \"sgasster@muon.com\" <sgasster@muon.com>\n% suggestions about syntax glossary\n\n% James Pomeroy\n% moodykre8r@earthlink.net\n% suggestion about PEMDAS\n\n% Joel Jensen  << joel@ens.net >>\n% translated the book into MS html\n\n\n% Gregg Boggs <boggs+@pitt.edu>\n% correction to Pythagorean theorem\n\n% John P. Withers\n% jp_withers@yahoo.com\n% question about latex\n\n% Michael Brownfield\n% mmc81@airmail.net\n% general kind words\n\n% wolfgang teschner\n% wtr@hannover.sgh-net.de\n% general kind words\n\n% Jeff\n% jca@po.cwru.edu\n% problem with pdf, and nice comments\n\n% d_webre@yahoo.com\n% confusing comment about calculation of pi\n\n% Michael Wheatfill\n% mwheatfill@tse-us.com\n% general good comments and question about histograms\n\n% Java version\n\n% Vladimir\n% \"pisemsky@pisem.net\"\n% general praise\n\n% Yong\n% ybakos69@yahoo.com\" <ybakos69@yahoo.com>\n% clarification of interface and abstract class", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "47ee3c46-bad3-4aac-99eb-11a0b98ebf20": {"__data__": {"id_": "47ee3c46-bad3-4aac-99eb-11a0b98ebf20", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f", "node_type": null, "metadata": {}, "hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "3": {"node_id": "20146fda-7b8b-4d03-adb9-1c79e9d87125", "node_type": null, "metadata": {}, "hash": "8fb629faf6434d074fff0c3901cfb286836d07fb31a5c0d8547e951f88190ae7"}}, "hash": "b6d96f6c3bb85d8d2ef242e9324190aabf190cbb627ccce99162a6a233c4fe12", "text": "% fdl.tex\n% This file is a chapter.  It must be included in a larger document to work\n% properly.\n\n\\chapter{GNU Free Documentation License}\n\nVersion 1.1, March 2000\\\\\n\n  Copyright $\\copyright$ 2000  Free Software Foundation, Inc.\\\\\n      59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\\\\\n  Everyone is permitted to copy and distribute verbatim copies\n  of this license document, but changing it is not allowed.\n\n\\section*{Preamble}\n\nThe purpose of this License is to make a manual, textbook, or other\nwritten document ``free'' in the sense of freedom: to assure everyone\nthe effective freedom to copy and redistribute it, with or without\nmodifying it, either commercially or noncommercially.  Secondarily,\nthis License preserves for the author and publisher a way to get\ncredit for their work, while not being considered responsible for\nmodifications made by others.\n\nThis License is a kind of ``copyleft,'' which means that derivative\nworks of the document must themselves be free in the same sense.  It\ncomplements the GNU General Public License, which is a copyleft\nlicense designed for free software.\n\nWe have designed this License in order to use it for manuals for free\nsoftware, because free software needs free documentation: a free\nprogram should come with manuals providing the same freedoms that the\nsoftware does.  But this License is not limited to software manuals;\nit can be used for any textual work, regardless of subject matter or\nwhether it is published as a printed book.  We recommend this License\nprincipally for works whose purpose is instruction or reference.\n\n\\section{Applicability and Definitions}\n\nThis License applies to any manual or other work that contains a\nnotice placed by the copyright holder saying it can be distributed\nunder the terms of this License.  The ``Document,'' below, refers to any\nsuch manual or work.  Any member of the public is a licensee, and is\naddressed as ``you.''\n\nA ``Modified Version'' of the Document means any work containing the\nDocument or a portion of it, either copied verbatim, or with\nmodifications and/or translated into another language.\n\nA ``Secondary Section'' is a named appendix or a front-matter section of\nthe Document that deals exclusively with the relationship of the\npublishers or authors of the Document to the Document's overall subject\n(or to related matters) and contains nothing that could fall directly\nwithin that overall subject.  (For example, if the Document is in part a\ntextbook of mathematics, a Secondary Section may not explain any\nmathematics.)  The relationship could be a matter of historical\nconnection with the subject or with related matters, or of legal,\ncommercial, philosophical, ethical, or political position regarding\nthem.\n\nThe ``Invariant Sections'' are certain Secondary Sections whose titles\nare designated, as being those of Invariant Sections, in the notice\nthat says that the Document is released under this License.\n\nThe ``Cover Texts'' are certain short passages of text that are listed,\nas Front-Cover Texts or Back-Cover Texts, in the notice that says that\nthe Document is released under this License.\n\nA ``Transparent'' copy of the Document means a machine-readable copy,\nrepresented in a format whose specification is available to the\ngeneral public, whose contents can be viewed and edited directly and\nstraightforwardly with generic text editors or (for images composed of\npixels) generic paint programs or (for drawings) some widely available\ndrawing editor, and that is suitable for input to text formatters or\nfor automatic translation to a variety of formats suitable for input\nto text formatters.  A copy made in an otherwise Transparent file\nformat whose markup has been designed to thwart or discourage\nsubsequent modification by readers is not Transparent.  A copy that is\nnot ``Transparent'' is called ``Opaque.''\n\nExamples of suitable formats for Transparent copies include plain\nASCII without markup, Texinfo input format, \\LaTeX~input format, SGML\nor XML using a publicly available DTD, and standard-conforming simple\nHTML designed for human modification.  Opaque formats include\nPostScript, PDF, proprietary formats that can be read and edited only\nby proprietary word processors, SGML or XML for which the DTD and/or\nprocessing tools are not generally available, and the\nmachine-generated HTML produced by some word processors for output\npurposes only.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "20146fda-7b8b-4d03-adb9-1c79e9d87125": {"__data__": {"id_": "20146fda-7b8b-4d03-adb9-1c79e9d87125", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f", "node_type": null, "metadata": {}, "hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "2": {"node_id": "47ee3c46-bad3-4aac-99eb-11a0b98ebf20", "node_type": null, "metadata": {}, "hash": "b6d96f6c3bb85d8d2ef242e9324190aabf190cbb627ccce99162a6a233c4fe12"}, "3": {"node_id": "ff608a4c-36da-45aa-ad71-ea74392d397c", "node_type": null, "metadata": {}, "hash": "9e60dd0ae06caca1fc2f8663c3e0bdee8325468f7b2f7d4fb7efcc73f9497246"}}, "hash": "8fb629faf6434d074fff0c3901cfb286836d07fb31a5c0d8547e951f88190ae7", "text": "The ``Title Page'' means, for a printed book, the title page itself,\nplus such following pages as are needed to hold, legibly, the material\nthis License requires to appear in the title page.  For works in\nformats which do not have any title page as such, ``Title Page'' means\nthe text near the most prominent appearance of the work's title,\npreceding the beginning of the body of the text.\n\n\n\\section{Verbatim Copying}\n\nYou may copy and distribute the Document in any medium, either\ncommercially or noncommercially, provided that this License, the\ncopyright notices, and the license notice saying this License applies\nto the Document are reproduced in all copies, and that you add no other\nconditions whatsoever to those of this License.  You may not use\ntechnical measures to obstruct or control the reading or further\ncopying of the copies you make or distribute.  However, you may accept\ncompensation in exchange for copies.  If you distribute a large enough\nnumber of copies you must also follow the conditions in Section 3.\n\nYou may also lend copies, under the same conditions stated above, and\nyou may publicly display copies.\n\n\n\\section{Copying in Quantity}\n\nIf you publish printed copies of the Document numbering more than 100,\nand the Document's license notice requires Cover Texts, you must enclose\nthe copies in covers that carry, clearly and legibly, all these Cover\nTexts: Front-Cover Texts on the front cover, and Back-Cover Texts on\nthe back cover.  Both covers must also clearly and legibly identify\nyou as the publisher of these copies.  The front cover must present\nthe full title with all words of the title equally prominent and\nvisible.  You may add other material on the covers in addition.\nCopying with changes limited to the covers, as long as they preserve\nthe title of the Document and satisfy these conditions, can be treated\nas verbatim copying in other respects.\n\nIf the required texts for either cover are too voluminous to fit\nlegibly, you should put the first ones listed (as many as fit\nreasonably) on the actual cover, and continue the rest onto adjacent\npages.\n\nIf you publish or distribute Opaque copies of the Document numbering\nmore than 100, you must either include a machine-readable Transparent\ncopy along with each Opaque copy, or state in or with each Opaque copy\na publicly accessible computer-network location containing a complete\nTransparent copy of the Document, free of added material, which the\ngeneral network-using public has access to download anonymously at no\ncharge using public-standard network protocols.  If you use the latter\noption, you must take reasonably prudent steps, when you begin\ndistribution of Opaque copies in quantity, to ensure that this\nTransparent copy will remain thus accessible at the stated location\nuntil at least one year after the last time you distribute an Opaque\ncopy (directly or through your agents or retailers) of that edition to\nthe public.\n\nIt is requested, but not required, that you contact the authors of the\nDocument well before redistributing any large number of copies, to give\nthem a chance to provide you with an updated version of the Document.\n\n\n\\section{Modifications}\n\nYou may copy and distribute a Modified Version of the Document under\nthe conditions of Sections 2 and 3 above, provided that you release\nthe Modified Version under precisely this License, with the Modified\nVersion filling the role of the Document, thus licensing distribution\nand modification of the Modified Version to whoever possesses a copy\nof it.  In addition, you must do these things in the Modified Version:\n\n\\begin{itemize}\n\n\\item Use in the Title Page (and on the covers, if any) a title distinct\n    from that of the Document, and from those of previous versions\n    (which should, if there were any, be listed in the History section\n    of the Document).  You may use the same title as a previous version\n    if the original publisher of that version gives permission.\n\\item List on the Title Page, as authors, one or more persons or entities\n    responsible for authorship of the modifications in the Modified\n    Version, together with at least five of the principal authors of the\n    Document (all of its principal authors, if it has less than five).\n\\item State on the Title page the name of the publisher of the\n    Modified Version, as the publisher.\n\\item Preserve all the copyright notices of the Document.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ff608a4c-36da-45aa-ad71-ea74392d397c": {"__data__": {"id_": "ff608a4c-36da-45aa-ad71-ea74392d397c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f", "node_type": null, "metadata": {}, "hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "2": {"node_id": "20146fda-7b8b-4d03-adb9-1c79e9d87125", "node_type": null, "metadata": {}, "hash": "8fb629faf6434d074fff0c3901cfb286836d07fb31a5c0d8547e951f88190ae7"}, "3": {"node_id": "7a9c5d00-cd62-4a4e-9607-bd6caef08515", "node_type": null, "metadata": {}, "hash": "ee5af6ea10dab8858f260571cbd1ebf89be906bd0c04223241b6e631a54319f2"}}, "hash": "9e60dd0ae06caca1fc2f8663c3e0bdee8325468f7b2f7d4fb7efcc73f9497246", "text": "\\item Preserve all the copyright notices of the Document.\n\\item Add an appropriate copyright notice for your modifications\n    adjacent to the other copyright notices.\n\\item Include, immediately after the copyright notices, a license notice\n    giving the public permission to use the Modified Version under the\n    terms of this License, in the form shown in the Addendum below.\n\\item Preserve in that license notice the full lists of Invariant Sections\n    and required Cover Texts given in the Document's license notice.\n\\item Include an unaltered copy of this License.\n\\item Preserve the section entitled ``History,'' and its title, and add to\n    it an item stating at least the title, year, new authors, and\n    publisher of the Modified Version as given on the Title Page.  If\n    there is no section entitled ``History'' in the Document, create one\n    stating the title, year, authors, and publisher of the Document as\n    given on its Title Page, then add an item describing the Modified\n    Version as stated in the previous sentence.\n\\item Preserve the network location, if any, given in the Document for\n    public access to a Transparent copy of the Document, and likewise\n    the network locations given in the Document for previous versions\n    it was based on.  These may be placed in the ``History'' section.\n    You may omit a network location for a work that was published at\n    least four years before the Document itself, or if the original\n    publisher of the version it refers to gives permission.\n\\item In any section entitled ``Acknowledgements'' or ``Dedications,''\n    preserve the section's title, and preserve in the section all the\n    substance and tone of each of the contributor acknowledgements\n    and/or dedications given therein.\n\\item Preserve all the Invariant Sections of the Document,\n    unaltered in their text and in their titles.  Section numbers\n    or the equivalent are not considered part of the section titles.\n\\item Delete any section entitled ``Endorsements.''  Such a section\n    may not be included in the Modified Version.\n\\item Do not retitle any existing section as ``Endorsements''\n    or to conflict in title with any Invariant Section.\n\n\\end{itemize}\n\nIf the Modified Version includes new front-matter sections or\nappendices that qualify as Secondary Sections and contain no material\ncopied from the Document, you may at your option designate some or all\nof these sections as invariant.  To do this, add their titles to the\nlist of Invariant Sections in the Modified Version's license notice.\nThese titles must be distinct from any other section titles.\n\nYou may add a section entitled ``Endorsements,'' provided it contains\nnothing but endorsements of your Modified Version by various\nparties---for example, statements of peer review or that the text has\nbeen approved by an organization as the authoritative definition of a\nstandard.\n\nYou may add a passage of up to five words as a Front-Cover Text, and a\npassage of up to 25 words as a Back-Cover Text, to the end of the list\nof Cover Texts in the Modified Version.  Only one passage of\nFront-Cover Text and one of Back-Cover Text may be added by (or\nthrough arrangements made by) any one entity.  If the Document already\nincludes a cover text for the same cover, previously added by you or\nby arrangement made by the same entity you are acting on behalf of,\nyou may not add another; but you may replace the old one, on explicit\npermission from the previous publisher that added the old one.\n\nThe author(s) and publisher(s) of the Document do not by this License\ngive permission to use their names for publicity for or to assert or\nimply endorsement of any Modified Version.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a9c5d00-cd62-4a4e-9607-bd6caef08515": {"__data__": {"id_": "7a9c5d00-cd62-4a4e-9607-bd6caef08515", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f", "node_type": null, "metadata": {}, "hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "2": {"node_id": "ff608a4c-36da-45aa-ad71-ea74392d397c", "node_type": null, "metadata": {}, "hash": "9e60dd0ae06caca1fc2f8663c3e0bdee8325468f7b2f7d4fb7efcc73f9497246"}, "3": {"node_id": "f620bea9-7052-4504-ade1-ba5cf9d769a4", "node_type": null, "metadata": {}, "hash": "ae310102f38996585d9f421e65b7a66ebb1ca7935d2883e29b4f8ffcc21ed096"}}, "hash": "ee5af6ea10dab8858f260571cbd1ebf89be906bd0c04223241b6e631a54319f2", "text": "\\section{Combining Documents}\n\nYou may combine the Document with other documents released under this\nLicense, under the terms defined in Section 4 above for modified\nversions, provided that you include in the combination all of the\nInvariant Sections of all of the original documents, unmodified, and\nlist them all as Invariant Sections of your combined work in its\nlicense notice.\n\nThe combined work need only contain one copy of this License, and\nmultiple identical Invariant Sections may be replaced with a single\ncopy.  If there are multiple Invariant Sections with the same name but\ndifferent contents, make the title of each such section unique by\nadding at the end of it, in parentheses, the name of the original\nauthor or publisher of that section if known, or else a unique number.\nMake the same adjustment to the section titles in the list of\nInvariant Sections in the license notice of the combined work.\n\nIn the combination, you must combine any sections entitled ``History''\nin the various original documents, forming one section entitled\n``History''; likewise combine any sections entitled ``Acknowledgements,''\nand any sections entitled ``Dedications.'' You must delete all sections\nentitled ``Endorsements.''\n\n\n\\section{Collections of Documents}\n\nYou may make a collection consisting of the Document and other documents\nreleased under this License, and replace the individual copies of this\nLicense in the various documents with a single copy that is included in\nthe collection, provided that you follow the rules of this License for\nverbatim copying of each of the documents in all other respects.\n\nYou may extract a single document from such a collection, and distribute\nit individually under this License, provided you insert a copy of this\nLicense into the extracted document, and follow this License in all\nother respects regarding verbatim copying of that document.\n\n\n\n\\section{Aggregation with Independent Works}\n\nA compilation of the Document or its derivatives with other separate\nand independent documents or works, in or on a volume of a storage or\ndistribution medium, does not as a whole count as a Modified Version\nof the Document, provided no compilation copyright is claimed for the\ncompilation.  Such a compilation is called an ``aggregate,'' and this\nLicense does not apply to the other self-contained works thus compiled\nwith the Document, on account of their being thus compiled, if they\nare not themselves derivative works of the Document.\n\nIf the Cover Text requirement of Section 3 is applicable to these\ncopies of the Document, then if the Document is less than one quarter\nof the entire aggregate, the Document's Cover Texts may be placed on\ncovers that surround only the Document within the aggregate.\nOtherwise they must appear on covers around the whole aggregate.\n\n\n\\section{Translation}\n\nTranslation is considered a kind of modification, so you may\ndistribute translations of the Document under the terms of Section 4.\nReplacing Invariant Sections with translations requires special\npermission from their copyright holders, but you may include\ntranslations of some or all Invariant Sections in addition to the\noriginal versions of these Invariant Sections.  You may include a\ntranslation of this License provided that you also include the\noriginal English version of this License.  In case of a disagreement\nbetween the translation and the original English version of this\nLicense, the original English version will prevail.\n\n\n\\section{Termination}\n\nYou may not copy, modify, sublicense, or distribute the Document except\nas expressly provided for under this License.  Any other attempt to\ncopy, modify, sublicense, or distribute the Document is void, and will\nautomatically terminate your rights under this License.  However,\nparties who have received copies, or rights, from you under this\nLicense will not have their licenses terminated so long as such\nparties remain in full compliance.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f620bea9-7052-4504-ade1-ba5cf9d769a4": {"__data__": {"id_": "f620bea9-7052-4504-ade1-ba5cf9d769a4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a52d9267-6dab-41e4-861d-c627c9c03f5f", "node_type": null, "metadata": {}, "hash": "154dfc5544f99a8aa17a73c35d409696e8631e44468eb41aedaf3f7d258740d7"}, "2": {"node_id": "7a9c5d00-cd62-4a4e-9607-bd6caef08515", "node_type": null, "metadata": {}, "hash": "ee5af6ea10dab8858f260571cbd1ebf89be906bd0c04223241b6e631a54319f2"}}, "hash": "ae310102f38996585d9f421e65b7a66ebb1ca7935d2883e29b4f8ffcc21ed096", "text": "\\section{Future Revisions of This License}\n\nThe Free Software Foundation may publish new, revised versions\nof the GNU Free Documentation License from time to time.  Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns. See\nhttp:///www.gnu.org/copyleft/.\n\nEach version of the License is given a distinguishing version number.\nIf the Document specifies that a particular numbered version of this\nLicense \"or any later version\" applies to it, you have the option of\nfollowing the terms and conditions either of that specified version or\nof any later version that has been published (not as a draft) by the\nFree Software Foundation.  If the Document does not specify a version\nnumber of this License, you may choose any version ever published (not\nas a draft) by the Free Software Foundation.\n\n\\section{Addendum: How to Use This License for Your Documents}\n\nTo use this License in a document you have written, include a copy of\nthe License in the document and put the following copyright and\nlicense notices just after the title page:\n\n\\begin{quote}\n\n       Copyright $\\copyright$  YEAR  YOUR NAME.\n       Permission is granted to copy, distribute and/or modify this document\n       under the terms of the GNU Free Documentation License, Version 1.1\n       or any later version published by the Free Software Foundation;\n       with the Invariant Sections being LIST THEIR TITLES, with the\n       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n       A copy of the license is included in the section entitled ``GNU\n       Free Documentation License.''\n\n\\end{quote}\n\nIf you have no Invariant Sections, write ``with no Invariant Sections''\ninstead of saying which ones are invariant.  If you have no\nFront-Cover Texts, write ``no Front-Cover Texts'' instead of\n``Front-Cover Texts being LIST''; likewise for Back-Cover Texts.\n\nIf your document contains nontrivial examples of program code, we\nrecommend releasing these examples in parallel under your choice of\nfree software license, such as the GNU General Public License,\nto permit their use in free software.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4ade5e33-06eb-4908-ba7c-ff1047dc4cb7": {"__data__": {"id_": "4ade5e33-06eb-4908-ba7c-ff1047dc4cb7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d121388-4770-427c-beea-56d66cb85583", "node_type": null, "metadata": {}, "hash": "0b40d73c911a2d66b9fe0977dfd4046d01c6c7eae283e866efa9a6a2f5ba5fbe"}, "3": {"node_id": "9936a434-0aae-4070-99e6-d1abeb440546", "node_type": null, "metadata": {}, "hash": "2460627122e40a72441e17a25d4c23df94c9b47ddab6e7f916df03a5fb7c83e4"}}, "hash": "f83e3e9e3c499efceed6397ee27c034ff9c155bd4e8b363981fb506232717fd7", "text": "illustrations/assign2.eps\n\n\\centerline{\\psfig{figure=illustrations/assign2.eps}}\n\nillustrations/banana.eps\n\n\\centerline{\\psfig{figure=illustrations/banana.eps}}\n\nillustrations/compile.eps\n\n\\centerline{\\psfig{figure=illustrations/compile.eps}}\n\nillustrations/fibonacci.eps\n\n\\centerline{\\psfig{figure=illustrations/fibonacci.eps}}\n\nillustrations/interpret.eps\n\n\\centerline{\\psfig{figure=illustrations/interpret.eps}}\n\nillustrations/link1.eps\n\n\\centerline{\\psfig{figure=illustrations/link1.eps}}\n\nillustrations/link2.eps\n\n\\centerline{\\psfig{figure=illustrations/link2.eps}}\n\nillustrations/link3.eps\n\n\\centerline{\\psfig{figure=illustrations/link3.eps}}\n\nillustrations/link4.eps\n\n\\centerline{\\psfig{figure=illustrations/link4.eps}}\n\nillustrations/link5.eps\n\n\\centerline{\\psfig{figure=illustrations/link5.eps}}\n\nillustrations/list1.eps\n\n\\centerline{\\psfig{figure=illustrations/list1.eps}}\n\nillustrations/list2.eps\n\n\\centerline{\\psfig{figure=illustrations/list2.eps}}\n\nillustrations/list3.eps\n\n\\centerline{\\psfig{figure=illustrations/list3.eps}}\n\nillustrations/list4.eps\n\n%\\centerline{\\psfig{figure=illustrations/list4.eps}}\n\nillustrations/list5.eps\n\n%\\centerline{\\psfig{figure=illustrations/list5.eps}}\n\nillustrations/matrix.eps\n\n\\centerline{\\psfig{figure=illustrations/matrix.eps}}\n\nillustrations/point.eps\n\n\\centerline{\\psfig{figure=illustrations/point.eps}}\n\nillustrations/queue1.eps\n\n\\centerline{\\psfig{figure=illustrations/queue1.eps}}\n\nillustrations/queue2.eps\n\n%\\centerline{\\psfig{figure=illustrations/queue2.eps}}\n\nillustrations/queue3.eps\n\n%\\centerline{\\psfig{figure=illustrations/queue3.eps}}\n\nillustrations/queue4.eps\n\n%\\centerline{\\psfig{figure=illustrations/queue4.eps}}\n\nillustrations/queue5.eps\n\n%\\centerline{\\psfig{figure=illustrations/queue5.eps}}\n\nillustrations/rectangle2.eps\n\n\\centerline{\\psfig{figure=illustrations/rectangle2.eps}}\n\nillustrations/rectangle.eps\n\n\\centerline{\\psfig{figure=illustrations/rectangle.eps}}\n\nillustrations/sparse.eps\n\n\\centerline{\\psfig{figure=illustrations/sparse.eps}}\n\nillustrations/stack2.eps\n\n\\centerline{\\psfig{figure=illustrations/stack2.eps}}\n\nillustrations/stack3.eps\n\n\\centerline{\\psfig{figure=illustrations/stack3.eps}}\n\nillustrations/stack4.eps\n\n\\centerline{\\psfig{figure=illustrations/stack4.eps}}\n\nillustrations/stack.eps\n\n\\centerline{\\psfig{figure=illustrations/stack.eps}}\n\nillustrations/state.eps\n\n\\centerline{\\psfig{figure=illustrations/state.eps}}\n\nillustrations/time.eps\n\n\\centerline{\\psfig{figure=illustrations/time.eps}}\n\nillustrations/tree1.eps\n\n\\centerline{\\psfig{figure=illustrations/tree1.eps}}\n\nillustrations/tree2.eps\n\n\\centerline{\\psfig{figure=illustrations/tree2.eps}}\n\nillustrations/tree3.eps\n\n%\\centerline{\\psfig{figure=illustrations/tree3.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9936a434-0aae-4070-99e6-d1abeb440546": {"__data__": {"id_": "9936a434-0aae-4070-99e6-d1abeb440546", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d121388-4770-427c-beea-56d66cb85583", "node_type": null, "metadata": {}, "hash": "0b40d73c911a2d66b9fe0977dfd4046d01c6c7eae283e866efa9a6a2f5ba5fbe"}, "2": {"node_id": "4ade5e33-06eb-4908-ba7c-ff1047dc4cb7", "node_type": null, "metadata": {}, "hash": "f83e3e9e3c499efceed6397ee27c034ff9c155bd4e8b363981fb506232717fd7"}}, "hash": "2460627122e40a72441e17a25d4c23df94c9b47ddab6e7f916df03a5fb7c83e4", "text": "eps\n\n%\\centerline{\\psfig{figure=illustrations/tree3.eps}}\n\nillustrations/tree4.eps\n\n\\centerline{\\psfig{figure=illustrations/tree4.eps}}\n\nillustrations/treeadt.eps\n\n%\\centerline{\\psfig{figure=illustrations/treeadt.eps}}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "278d2c56-536c-4910-9fcb-daa1088cb994": {"__data__": {"id_": "278d2c56-536c-4910-9fcb-daa1088cb994", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b3ffcbd6-d068-4eaf-a60f-e172eaff7869", "node_type": null, "metadata": {}, "hash": "577db7bc866e14083156471eb8420b66d9371633765b835c49996779b3a70371"}}, "hash": "d0cadb0544a7ae24020f1f7f75cf378dbb16af9f5b1c78d07bc111afed98d681", "text": "\\documentclass[b5paper,draft]{book}\n\\usepackage{psfig}\n\\usepackage{makeidx}\n\\pssilent\n\n\\renewcommand\\MakeUppercase{}\n\n\\sloppy\n\\setlength{\\topmargin}{-0.375in}\n\\setlength{\\headsep}{0.25in}\n\\setlength{\\textheight}{7.25in}\n\\setlength{\\oddsidemargin}{0.0in}\n\\setlength{\\evensidemargin}{0.0in}\n\n\\setlength{\\parindent}{0.0in}\n\\setlength{\\parskip}{1.5ex plus 0.5ex minus 0.5ex}\n\\makeindex\n\n\\begin{document}\n\n\\include{figs}\n\n\\end{document}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c89bbe3f-202d-4a25-b59a-7b19e3f67aa3": {"__data__": {"id_": "c89bbe3f-202d-4a25-b59a-7b19e3f67aa3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f", "node_type": null, "metadata": {}, "hash": "0a2a113b43bfaa43a52ce8145683bbd80010569267471d3d1aec093d606025b6"}, "3": {"node_id": "df1de581-9827-42fd-b1ed-e2fc4ca4899b", "node_type": null, "metadata": {}, "hash": "0ab42e8bb8555d8d2e7dfeb401d0a405c7da1f2142367c403333f55dd55148eb"}}, "hash": "14ab568893315f28a4139c512caa7438c5c3a925383bdc5b59a46baf256caa6a", "text": "\\chapter{Foreword}\n\nBy David Beazley\n\nAs an educator, researcher, and book author, I am delighted to see the\ncompletion of this book.  Python is a fun and extremely easy-to-use\nprogramming language that has steadily gained in popularity over the\nlast few years.  Developed over ten years ago by Guido van Rossum,\nPython's simple syntax and overall feel is largely derived from ABC, a\nteaching language that was developed in the 1980's.  However, Python\nwas also created to solve real problems and it borrows a wide variety\nof features from programming languages such as C++, Java, Modula-3,\nand Scheme.  Because of this, one of Python's most remarkable features\nis its broad appeal to professional software developers, scientists,\nresearchers, artists, and educators.\n\nDespite Python's appeal to many different communities, you may still\nwonder ``why Python?'' or ``why teach programming with Python?''\nAnswering these questions is no simple task---especially when popular\nopinion is on the side of more masochistic alternatives such\nas C++ and Java.  However, I think the most direct answer is that\nprogramming in Python is simply a lot of fun and more productive.\n\nWhen I teach computer science courses, I want to cover important\nconcepts in addition to making the material interesting and engaging\nto students.  Unfortunately, there is a tendency for introductory\nprogramming courses to focus far too much attention on mathematical\nabstraction and for students to become frustrated with annoying\nproblems related to low-level details of syntax, compilation, and the\nenforcement of seemingly arcane rules.  Although such abstraction and\nformalism is important to professional software engineers and students\nwho plan to continue their study of computer science, taking such an\napproach in an introductory course mostly succeeds in making computer\nscience boring.  When I teach a course, I don't want to have a room of\nuninspired students.  I would much rather see them trying to solve\ninteresting problems by exploring different ideas, taking\nunconventional approaches, breaking the rules, and learning from their\nmistakes. In doing so, I don't want to waste half of the semester\ntrying to sort out obscure syntax problems, unintelligible compiler\nerror messages, or the several hundred ways that a program might\ngenerate a general protection fault.\n\nOne of the reasons why I like Python is that it provides a really nice\nbalance between the practical and the conceptual.  Since Python is\ninterpreted, beginners can pick up the language and start doing\nneat things almost immediately without getting lost in the problems of\ncompilation and linking.  Furthermore, Python comes with a large\nlibrary of modules that can be used to do all sorts of tasks ranging\nfrom web-programming to graphics.  Having such a practical focus is a\ngreat way to engage students and it allows them to complete\nsignificant projects.  However, Python can also serve as an excellent\nfoundation for introducing important computer science concepts.  Since\nPython fully supports procedures and classes, students can be\ngradually introduced to topics such as procedural abstraction, data\nstructures, and object-oriented programming---all of which are\napplicable to later courses on Java or C++.  Python even borrows a\nnumber of features from functional programming languages and can be\nused to introduce concepts that would be covered in more detail in\ncourses on Scheme and Lisp.\n\nIn reading Jeffrey's preface, I am struck by his comments that Python\nallowed him to see a ``higher level of success and a lower level of\nfrustration'' and that he was able to ``move faster with better\nresults.''  Although these comments refer to his introductory course, I\nsometimes use Python for these exact same reasons in advanced graduate\nlevel computer science courses at the University of Chicago.  In these\ncourses, I am constantly faced with the daunting task of covering a\nlot of difficult course material in a blistering nine week quarter.\nAlthough it is certainly possible for me to inflict a lot of pain and\nsuffering by using a language like C++, I have often found this\napproach to be counterproductive---especially when the course is about\na topic unrelated to just ``programming.''  I find that using Python\nallows me to better focus on the actual topic at hand while allowing\nstudents to complete substantial class projects.\n\nAlthough Python is still a young and evolving language, I believe that\nit has a bright future in education.  This book is an important step in\nthat direction.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df1de581-9827-42fd-b1ed-e2fc4ca4899b": {"__data__": {"id_": "df1de581-9827-42fd-b1ed-e2fc4ca4899b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f", "node_type": null, "metadata": {}, "hash": "0a2a113b43bfaa43a52ce8145683bbd80010569267471d3d1aec093d606025b6"}, "2": {"node_id": "c89bbe3f-202d-4a25-b59a-7b19e3f67aa3", "node_type": null, "metadata": {}, "hash": "14ab568893315f28a4139c512caa7438c5c3a925383bdc5b59a46baf256caa6a"}}, "hash": "0ab42e8bb8555d8d2e7dfeb401d0a405c7da1f2142367c403333f55dd55148eb", "text": "This book is an important step in\nthat direction.\n\n\\vspace{0.25in}\n\\begin{flushleft}\nDavid Beazley \\\\\nUniversity of Chicago \\\\\nAuthor of the {\\em Python Essential Reference} \\\\\n\\end{flushleft}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bb687d40-1093-4eaf-90c9-d0eb2e3dade1": {"__data__": {"id_": "bb687d40-1093-4eaf-90c9-d0eb2e3dade1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54d8490b-0b63-40b6-8012-d279ddde92c8", "node_type": null, "metadata": {}, "hash": "17a6fee2e3ea4e1355794d27faa230d4762c1c81e7e5a290d0cbcb141f9581ed"}, "3": {"node_id": "9f7ff698-db2b-41ab-9c8e-c255d8e3a586", "node_type": null, "metadata": {}, "hash": "30225d1d620a45435660145c2cf70d664f4ab379978f8abfcae8457eb644a312"}}, "hash": "157789eb3883f33793554435b09c77efb4e71b422caa0cd6926cc6df54f6d868", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001  Allen B. Downey, Jeffrey Elkner, and Chris Meyers.\n\n% Permission is granted to copy, distribute and/or modify this document under\n% the terms of the GNU Free Documentation License, Version 1.1  or any later\n% version published by the Free Software Foundation; with the Invariant\n% Sections being \"Contributor List\", \"Forward\", and \"Preface\", with no\n% Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is\n% included in the section entitled \"GNU Free Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text of the\n% GNU Free Documentation License.  If it is missing, you can obtain it from\n% www.gnu.org or by writing to the Free Software Foundation, Inc.,\n% 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n%\n\\chapter{Preface}\n\nBy Jeff Elkner\n\nThis book owes its existence to the collaboration made possible by the\nInternet and the free software movement.  Its three authors---a\ncollege professor, a high school teacher, and a professional\nprogrammer---have yet to meet face to face, but we have been able to\nwork closely together and have been aided by many wonderful folks who\nhave donated their time and energy to helping make this book better.\n\nWe think this book is a testament to the benefits and future\npossibilities of this kind of collaboration, the framework for which\nhas been put in place by Richard Stallman and the Free Software\nFoundation.\n\n\n\\section*{How and why I came to use Python}\n\nIn 1999, the College Board's Advanced Placement (AP) Computer Science\nexam was given in C++ for the first time.  As in many high schools\nthroughout the country, the decision to change languages had a direct\nimpact on the computer science curriculum at Yorktown High School in\nArlington, Virginia, where I teach.  Up to this point, Pascal was the\nlanguage of instruction in both our first-year and AP courses.  In\nkeeping with past practice of giving students two years of exposure to\nthe same language, we made the decision to switch to C++ in the\nfirst-year course for the 1997-98 school year so that we would be in\nstep with the College Board's change for the AP course the following\nyear.\n\nTwo years later, I was convinced that C++ was a poor choice to use for\nintroducing students to computer science. While it is certainly a very\npowerful programming language, it is also an extremely difficult\nlanguage to learn and teach.  I found myself constantly fighting with\nC++'s difficult syntax and multiple ways of doing things, and I was\nlosing many students unnecessarily as a result. Convinced there had to\nbe a better language choice for our first-year class, I went looking\nfor an alternative to C++.\n\nI needed a language that would run on the machines in our Linux lab as\nwell as on the Windows and Macintosh platforms most students have at\nhome.  I wanted it to be free and available electronically, so that\nstudents could use it at home regardless of their income.  I wanted a\nlanguage that was used by professional programmers, and one that had\nan active developer community around it.  It had to support both\nprocedural and object-oriented programming.  And most importantly, it\nhad to be easy to learn and teach.  When I investigated the choices\nwith these goals in mind, Python stood out as the best candidate for\nthe job.\n\nI asked one of Yorktown's talented students, Matt Ahrens, \nto give Python a try.  In two months he not only learned the language\nbut wrote an application called pyTicket that enabled our staff to\nreport technology problems via the Web.  I knew that Matt could not\nhave finished an application of that scale in so short a time in C++,\nand this accomplishment, combined with Matt's positive assessment of\nPython, suggested that Python was the solution I was looking for.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9f7ff698-db2b-41ab-9c8e-c255d8e3a586": {"__data__": {"id_": "9f7ff698-db2b-41ab-9c8e-c255d8e3a586", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54d8490b-0b63-40b6-8012-d279ddde92c8", "node_type": null, "metadata": {}, "hash": "17a6fee2e3ea4e1355794d27faa230d4762c1c81e7e5a290d0cbcb141f9581ed"}, "2": {"node_id": "bb687d40-1093-4eaf-90c9-d0eb2e3dade1", "node_type": null, "metadata": {}, "hash": "157789eb3883f33793554435b09c77efb4e71b422caa0cd6926cc6df54f6d868"}, "3": {"node_id": "d665cef5-0e08-47bb-9e34-0b0767c0f1ff", "node_type": null, "metadata": {}, "hash": "56bda4d8dc2d4757dc8c5e73aeade85037a8ae23a386cd1e07a122ee06b087b5"}}, "hash": "30225d1d620a45435660145c2cf70d664f4ab379978f8abfcae8457eb644a312", "text": "\\section*{Finding a textbook}\n\nHaving decided to use Python in both of my introductory computer\nscience classes the following year, the most pressing problem was the\nlack of an available textbook.\n\nFree content came to the rescue.  Earlier in the year, Richard\nStallman had introduced me to Allen Downey.  Both of us had written to\nRichard expressing an interest in developing free educational\ncontent.  Allen had already written a first-year computer science\ntextbook, {\\em How to Think Like a Computer Scientist}.  When I read\nthis book, I knew immediately that I wanted to use it in my class.  It\nwas the clearest and most helpful computer science text I had seen.\nIt emphasized the processes of thought involved in programming rather\nthan the features of a particular language.  Reading it immediately\nmade me a better teacher.\n\n{\\em How to Think Like a Computer Scientist} was not just an excellent\nbook, but it had been released under a GNU public license, which meant\nit could be used freely and modified to meet the needs of its user.\nOnce I decided to use Python, it occurred to me that I could translate\nAllen's original Java version of the book into the new language.\nWhile I would not have been able to write a textbook on my own, having\nAllen's book to work from made it possible for me to do so, at the\nsame time demonstrating that the cooperative development model used so\nwell in software could also work for educational content.\n\nWorking on this book for the last two years has been rewarding for\nboth my students and me, and my students played a big part in the\nprocess. Since I could make instant changes whenever someone found a\nspelling error or difficult passage, I encouraged them to look for\nmistakes in the book by giving them a bonus point each time they made\na suggestion that resulted in a change in the text. This had the\ndouble benefit of encouraging them to read the text more carefully and\nof getting the text thoroughly reviewed by its most important critics,\nstudents using it to learn computer science.\n\n% I fixed this paragraph too:\n\nFor the second half of the book on object-oriented programming, I knew\nthat someone with more real programming experience than I had would be\nneeded to do it right.  The book sat in an unfinished state for the better\npart of a year until the free software community once again provided the\nneeded means for its completion.\n\nI received an email from Chris Meyers expressing interest in the book.\nChris is a professional programmer who started teaching a programming\ncourse last year using Python at Lane Community College in Eugene,\nOregon.  The prospect of teaching the course had led Chris to the\nbook, and he started helping out with it immediately.  By the end of\nthe school year he had created a companion project on our website at\n{\\tt http://www.ibiblio.org/obp} called {\\em Python for Fun} and was\nworking with some of my most advanced students as a master teacher,\nguiding them beyond where I could take them.\n\n\n\\section*{Introducing programming with Python}\n\nThe process of translating and using {\\em How to Think Like a Computer\nScientist} for the past two years has confirmed Python's suitability\nfor teaching beginning students.  Python greatly simplifies\nprogramming examples and makes important programming ideas easier to\nteach.\n\nThe first example from the text illustrates this point.\nIt is the traditional ``hello, world'' program, which in the C++\nversion of the book looks like this:\n\n\\begin{verbatim}\n   #include <iostream.h>\n\n   void main()\n   {\n     cout << \"Hello, world.\" << endl;\n   }\n\\end{verbatim}\n\nin the Python version it becomes:\n\n\\begin{verbatim}\n   print \"Hello, World!\"\n\\end{verbatim}\n\nEven though this is a trivial example, the advantages of Python stand\nout.  Yorktown's Computer Science I course has no prerequisites, so\nmany of the students seeing this example are looking at their first\nprogram.  Some of them are undoubtedly a little nervous, having heard\nthat computer programming is difficult to learn. The C++ version has\nalways forced me to choose between two unsatisfying options: either to\nexplain {\\tt \\#include}, {\\tt void main()}, \\{, and \\},\nand risk confusing or intimidating some of the students right at the\nstart, or to tell them, ``Just don't worry about all of that stuff\nnow; we will talk about it later,'' and risk the same thing.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d665cef5-0e08-47bb-9e34-0b0767c0f1ff": {"__data__": {"id_": "d665cef5-0e08-47bb-9e34-0b0767c0f1ff", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54d8490b-0b63-40b6-8012-d279ddde92c8", "node_type": null, "metadata": {}, "hash": "17a6fee2e3ea4e1355794d27faa230d4762c1c81e7e5a290d0cbcb141f9581ed"}, "2": {"node_id": "9f7ff698-db2b-41ab-9c8e-c255d8e3a586", "node_type": null, "metadata": {}, "hash": "30225d1d620a45435660145c2cf70d664f4ab379978f8abfcae8457eb644a312"}, "3": {"node_id": "0e222bbb-583f-4ab9-84e6-79c3709b03e8", "node_type": null, "metadata": {}, "hash": "0edad6f6276b8d016b26f62fc060f05d9459472758c445b0bbb27546705a246c"}}, "hash": "56bda4d8dc2d4757dc8c5e73aeade85037a8ae23a386cd1e07a122ee06b087b5", "text": "The\neducational objectives at this point in the course are to introduce\nstudents to the idea of a programming language and to get them to\nwrite their first program, thereby introducing them to the programming\nenvironment.  The Python program has exactly what is needed to do these\nthings, and nothing more.\n\nComparing the explanatory text of the program in each version of\nthe book further illustrates what this means to the beginning student.\nThere are thirteen paragraphs of explanation of ``Hello, world!'' in the\nC++ version; in the Python version, there are only two. More importantly,\nthe missing eleven paragraphs do not deal with the ``big ideas'' in\ncomputer programming but with the minutia of C++ syntax.  I found this\nsame thing happening throughout the book.  Whole paragraphs simply\ndisappear from the Python version of the text because Python's much\nclearer syntax renders them unnecessary.\n\nUsing a very high-level language like Python allows a teacher to\npostpone talking about low-level details of the machine until students\nhave the background that they need to better make sense of the\ndetails.  It thus creates the ability to put ``first things first''\npedagogically.  One of the best examples of this is the way in which\nPython handles variables. In C++ a variable is a name for a place that\nholds a thing.  Variables have to be declared with types at least in\npart because the size of the place to which they refer needs to be\npredetermined. Thus, the idea of a variable is bound up with the\nhardware of the machine. The powerful and fundamental concept of a\nvariable is already difficult enough for beginning students (in both\ncomputer science and algebra).  Bytes and addresses do not help the\nmatter. In Python a variable is a name that refers to a thing. This is\na far more intuitive concept for beginning students and is much closer\nto the meaning of ``variable'' that they learned in their math\ncourses. I had much less difficulty teaching variables this year than\nI did in the past, and I spent less time helping students with\nproblems using them.\n\nAnother example of how Python aids in the teaching and learning of\nprogramming is in its syntax for functions.  My students have always\nhad a great deal of difficulty understanding functions. The main\nproblem centers around the difference between a function definition\nand a function call, and the related distinction between a parameter\nand an argument. Python comes to the rescue with syntax that is\nnothing short of beautiful. Function definitions begin with the\nkeyword {\\tt def}, so I simply tell my students, ``When you define a\nfunction, begin with {\\tt def}, followed by the name of the function\nthat you are defining; when you call a function, simply call (type)\nout its name.'' Parameters go with definitions; arguments go with\ncalls. There are no return types, parameter types, or reference and\nvalue parameters to get in the way, so I am now able to teach\nfunctions in less than half the time that it previously took me, with\nbetter comprehension.\n\nUsing Python has improved the effectiveness of our computer science\nprogram for all students.  I see a higher general level of success and\na lower level of frustration than I experienced during the two years I\ntaught C++.  I move faster with better results.  More students leave\nthe course with the ability to create meaningful programs and with the\npositive attitude toward the experience of programming that this\nengenders.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0e222bbb-583f-4ab9-84e6-79c3709b03e8": {"__data__": {"id_": "0e222bbb-583f-4ab9-84e6-79c3709b03e8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54d8490b-0b63-40b6-8012-d279ddde92c8", "node_type": null, "metadata": {}, "hash": "17a6fee2e3ea4e1355794d27faa230d4762c1c81e7e5a290d0cbcb141f9581ed"}, "2": {"node_id": "d665cef5-0e08-47bb-9e34-0b0767c0f1ff", "node_type": null, "metadata": {}, "hash": "56bda4d8dc2d4757dc8c5e73aeade85037a8ae23a386cd1e07a122ee06b087b5"}}, "hash": "0edad6f6276b8d016b26f62fc060f05d9459472758c445b0bbb27546705a246c", "text": "\\section*{Building a community}\n\n% Jeff: the following sentence sounds funny to me.  You mention\n% every continent and then Korea specifically.  How about just\n% the every continent part and take out the Korea?\n\n% done.\n\nI have received email from all over the globe from people using\nthis book to learn or to teach programming.  A user community has\nbegun to emerge, and many people have been contributing to the\nproject by sending in materials for the companion website at\n{\\tt http://www.thinkpython.com}.\n\nWith the publication of the book in print form, I expect the growth in\nthe user community to continue and accelerate.  The emergence of this\nuser community and the possibility it suggests for similar\ncollaboration among educators have been the most exciting parts of\nworking on this project for me.  By working together, we can increase\nthe quality of materials available for our use and save valuable time.\nI invite you to join our community and look forward to hearing from\nyou.  Please write to the authors at {\\tt feedback@thinkpython.com}.\n\n\\vspace{0.25in}\n\\begin{flushleft}\nJeffrey Elkner\\\\\nYorktown High School\\\\\nArlington, Virginia\\\\\n\\end{flushleft}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3b555f83-9634-48a7-b8c0-a207c923d7bf": {"__data__": {"id_": "3b555f83-9634-48a7-b8c0-a207c923d7bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67f8511a-826b-4d6f-acf1-6dcca534434d", "node_type": null, "metadata": {}, "hash": "f3a7b1c00b19c4b7962b8c015f2d8255201bf3176ba2b8717404b87b722c8e4a"}, "3": {"node_id": "45498fda-c622-4a9a-a1bc-4d2124f9b64d", "node_type": null, "metadata": {}, "hash": "a42a15e17cec9ebc34c5cd830e1e87a8e85c24a0575a022f3974d309df5201af"}}, "hash": "0dcc7072302d5126368c031c9a46be39e9a5c8fbc2dd8ed06d78d31f7503bcfd", "text": "\\documentclass{article}\n\\usepackage{url}\n\n\\setlength{\\parindent}{0.0in}\n\\setlength{\\parskip}{1.7ex plus 0.5ex minus 0.5ex}\n\\renewcommand{\\baselinestretch}{1.05}\n\n\\title{Book Proposal: {\\em Software Design}}\n\\author{}\n\\date{}\n\n\\begin{document}\n\n\\maketitle\n\n\\section*{Author information}\n\n\\begin{flushleft}\nProf. Allen B. Downey\\\\\nOlin College of Engineering\\\\\nOlin Way\\\\\nNeedham, MA 02492\\\\\n\\quad \\\\\ndowney@allendowney.com\\\\\n781-292-2558 (w)\\\\\n781-292-2508 (f)\\\\\n\\end{flushleft}\n\nAllen Downey is an Associate Professor of Computer Science at the Olin\nCollege of Engineering.  He has taught computer science at Wellesley\nCollege, Colby College and U.C. Berkeley.  He has a Ph.D. in Computer\nScience from U.C. Berkeley and a Master's Degree from MIT.\n\nDetailed CV at \\url{allendowney.com/downeyCV.pdf}\n\n\n\\section*{Software Design}\n\n{\\em Software Design} is a revised and\nupdated version of {\\em How to Think Like a Computer Scientist: Learning\nwith Python,} which was published in 2001.\n\nThe book is intended for students with no programming experience.  It starts\nwith the most basic concepts of programming, and is carefully designed\nto define all terms when they are first used and to develop each new\nconcept in a logical progression.  Larger pieces, like recursion and\nobject-oriented programming are divided into a sequence of smaller\nsteps and introduced over the course of several chapters.\n\nThe book is concise.  Each chapter is 10-12 pages and covers the\nmaterial for one week of a college course.  It is not a comprehensive\npresentation of Python; instead it focuses on the tools of\nsoftware design, starting with small functions and basic algorithms and\nworking up to object-oriented design.  In the vocabulary of computer\nscience pedagogy, it uses the {\\em objects late} approach.\n\n\n\\subsection*{The original book}\n\n{\\em How to Think} is published under the GNU Free Documentation\nLicense by Green Tea Press, which is a partnership of the author and\nhis wife.  Green Tea Press provides electronic versions of the book at\n\\url{thinkpython.com} and sells hardcopies to individuals, college\nbookstores, and through Amazon.\n\nThe book is well known on the Internet and well regarded.  A Google\nsearch on the title and author yields more than 16,000 hits.  The book\nhas received positive reviews from readers.  It is used as a textbook\nin classes at a number of colleges and universities, including Simon\nFraser University, Clark College, Albion College, University of\nIllinois at Urbana-Champaign, U.C. Berkeley, U.C. San Diego and San\nDiego State University.  Internationally, the electronic version is\nused at the Indian Institute of Technology at Kanpur, the University\nof New South Wales (Australia), Utrecht University (Holland) and\nSirindhorn International Institute of Technology (Thailand).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "45498fda-c622-4a9a-a1bc-4d2124f9b64d": {"__data__": {"id_": "45498fda-c622-4a9a-a1bc-4d2124f9b64d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67f8511a-826b-4d6f-acf1-6dcca534434d", "node_type": null, "metadata": {}, "hash": "f3a7b1c00b19c4b7962b8c015f2d8255201bf3176ba2b8717404b87b722c8e4a"}, "2": {"node_id": "3b555f83-9634-48a7-b8c0-a207c923d7bf", "node_type": null, "metadata": {}, "hash": "0dcc7072302d5126368c031c9a46be39e9a5c8fbc2dd8ed06d78d31f7503bcfd"}, "3": {"node_id": "53b70118-7161-41bf-9e8c-8c33daf2307b", "node_type": null, "metadata": {}, "hash": "800c73d895b6819ee26d24b9d5d2544e90e0064fdd3d6a342c549f0be092140f"}}, "hash": "a42a15e17cec9ebc34c5cd830e1e87a8e85c24a0575a022f3974d309df5201af", "text": "\\subsection*{The new book}\n\n{\\em Software Design} is in some sense the second edition of {\\em How to\nThink.}  My goals in updating and revising the book are:\n\n\\begin{enumerate}\n\n\\item To incorporate the material I have developed in my classes as a\nseries of case studies covering topics in software engineering:\nfunctional abstraction, multi-layer interface design, data structure\nselection and design, UML object and class diagrams, and basic\nobject-oriented design patterns.\n\nThese case studies are based on a software suite I have written called\nSwampy.  Swampy is a set of Python modules that can run in a standard\nPython installation.  They provide an environment for a series of\nexercises that include graphics and animation (the original book is\nall text-based).  The design and implementation of Swampy is the\nsubject of the last case study.  The current version of Swampy\nis available from \\url{allendowney.com/swampy}.\n\n\\item To update the examples in the book with features that are new in\nPython, and to demonstrate more idiomatic Python style.\n\n\\end{enumerate}\n\n\\pagebreak\nIn addition, I am considering the following changes:\n\n\\begin{enumerate}\n\n\\item Changing the title to {\\em Software Design}.  The current title is a\nwhimsical working title that stuck.  {\\em Software Design} is a more\nconcise description of the contents; I think it is also a stronger\ntitle (and it is not currently in use).\n\nA potential drawback of changing the title is that it might be more\ndifficult to take advantage of the international reputation of {\\em How to\nThink}.\n\n\\item Removing Chapters 17 through 20.  These chapters cover the\nimplementation of data structures.  They are appropriate for a college\ncourse on data structures (which is where they were developed), but\nthey are not essential to the focus of the book.  Also, they are at a\nlower level of abstraction than the rest of the book.\n\n\\item Expanding Appendix B into a regular chapter.  Defining special\nfunctions to customize the behavior of user-defined objects is\nan important technique in Python, and consistent with the new\nfocus of the book.\n\n\\end{enumerate}\n\nI expect to work on these revisions in Summer 2007.  I will have\na draft of the new chapters by July 1 and a complete manuscript by\nSeptember 1, 2007.\n\nI will prepare the manuscript in LaTeX; I can produce camera-ready PDF\nor LaTeX files ready for professional typesetting.  The manuscript\nwill include black-and-white figures like the ones in {\\em How to Think};\nthese could be used as-is or sent to a professional illustrator.\n\nI will also produce a version of Swampy that contains the programs\nneeded for the case studies, suitable for distribution along with the\nbook or on a web page.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "53b70118-7161-41bf-9e8c-8c33daf2307b": {"__data__": {"id_": "53b70118-7161-41bf-9e8c-8c33daf2307b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67f8511a-826b-4d6f-acf1-6dcca534434d", "node_type": null, "metadata": {}, "hash": "f3a7b1c00b19c4b7962b8c015f2d8255201bf3176ba2b8717404b87b722c8e4a"}, "2": {"node_id": "45498fda-c622-4a9a-a1bc-4d2124f9b64d", "node_type": null, "metadata": {}, "hash": "a42a15e17cec9ebc34c5cd830e1e87a8e85c24a0575a022f3974d309df5201af"}, "3": {"node_id": "a0fa9976-9308-4e10-bcbc-a24ff57cef61", "node_type": null, "metadata": {}, "hash": "11803adb34695647c904fff7c7a6d6a24f7bd69ac39825d453003fb6b92dd1b5"}}, "hash": "800c73d895b6819ee26d24b9d5d2544e90e0064fdd3d6a342c549f0be092140f", "text": "\\section*{Outline}\n\nThe outline of the new book will follow {\\em How to Think}, with the new\ncase studies interspersed:\n\n1.  The way of the program.\n\n2.  Variables, expressions and statements.\n\n3.  Functions.\n\n\\quad \\quad    Case study: functional abstraction.\n\n4.  Conditionals and recursion.\n\n5.  Fruitful functions.\n\n6.  Iteration.\n\n\\quad \\quad    Case study: encapsulation and generalization.\n\n7.  Strings.\n\n8.  Lists.\n\n9.  Tuples.\n\n\\quad \\quad    Case study: iteration and search.\n\n10. Dictionaries.\n\n11. Files and exceptions.\n\n12. Classes and objects.\n\n\\quad \\quad    Case study: data structure selection.\n\n13. Classes and functions.\n\n14. Classes and methods.\n\n15. Sets of objects.\n\n\\quad \\quad    Case study: algorithm design.\n\n16. Inheritance and UML.\n\n17. Customizing object behavior (revised version of Appendix B).\n\n\\quad \\quad    Case study: object-oriented design.\n\n18. GUIs with Tkinter.\n\n\\quad \\quad    Case study: design and implementation of Swampy.\n\nA.  Debugging.\n\nThe detailed table of contents from {\\em How to Think} is included with\nthis proposal.  The entire book is available from \\url{thinkpython.com}.\n\nThe chapters from {\\em How to Think} will be revised and updated.  Some\nwill be mostly unchanged; others will be substantially rewritten.\nThe case studies are new material based on homeworks I am using in my\nclass.  Each case study presents an example program and a series of\nexercises; then it presents solutions to some of the exercises and a\ndiscussion of the concept the case study is meant to demonstrate.\n\nWith 18 chapters, 7 case studies and an appendix, each 10-12 pages,\nI expect the total page count to be 260--300 pages.\n\n\n\\section*{Sample Chapters}\n\nAlong with this proposal I am submitting Chapters 12, 13 and 14 from\n{\\em How to Think}.  These chapters introduce object-oriented programming\nstarting with user-defined types and attributes, functions that\noperate on objects, and then methods.\n\nThese chapters demonstrate several features of the book:\n\n\\begin{enumerate}\n\n\\item One concept at a time: I have divided the topics that give students\nthe most trouble into a series of small steps so that students can\nexercise new concepts before going to the next step.\n\n\\item Balance of language features and concepts: The book in not\nprimarily about Python; it uses Python examples to demonstrate\nsoftware engineering concepts.  Most chapters start with language\nfeatures and end with concepts.\n\n\\item Conciseness: An important goal of the book is to be small enough\nthat students can be expected to read and understand the entire book\nin a one-semester course.  Each chapter is 10-12 pages; students can\nread 1-2 chapters per week, depending on the pace of the class.\n\n\\item Emphasis on vocabulary: I am careful to define each term the first\ntime it appears, and each chapter ends with a glossary of new terms.\n\n\\end{enumerate}\n\n\n\\section*{Readership}\n\n{\\em Software Design} is appropriate as a textbook in an introductory\ncollege or high school class.  {\\em How to Think} is currently in use\nat a number of colleges and universities, and at some high schools.\n\nAt the college level, some computer science departments are migrating\nfrom Java to Python in their intro classes.  In addition, many science\ndepartments are using Python in classes that require basic\nprogramming, especially Physics and Bioinformatics.\n\n{\\em Software Design} is also appropriate for self-teachers and\nhome-schoolers.  I get frequent email from individuals who are using\n{\\em How to Think} to teach themselves programming in Python.\n\nFor professional programmers, the introductory chapters are probably\ntoo basic, but the book is appropriate for professionals in other\nfields who need to pick up programming.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a0fa9976-9308-4e10-bcbc-a24ff57cef61": {"__data__": {"id_": "a0fa9976-9308-4e10-bcbc-a24ff57cef61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67f8511a-826b-4d6f-acf1-6dcca534434d", "node_type": null, "metadata": {}, "hash": "f3a7b1c00b19c4b7962b8c015f2d8255201bf3176ba2b8717404b87b722c8e4a"}, "2": {"node_id": "53b70118-7161-41bf-9e8c-8c33daf2307b", "node_type": null, "metadata": {}, "hash": "800c73d895b6819ee26d24b9d5d2544e90e0064fdd3d6a342c549f0be092140f"}}, "hash": "11803adb34695647c904fff7c7a6d6a24f7bd69ac39825d453003fb6b92dd1b5", "text": "\\section*{Competition}\n\nThe most direct competitors are:\n\n\\begin{itemize}\n\\item {\\em Learn to Program Using Python: A Tutorial for Hobbyists,\nSelf-Starters, and All Who Want to Learn the Art of Computer\nProgramming}, by Alan Gauld (2001).\n\n\\item {\\em Python Programming: An Introduction to Computer Science}, by John\nM. Zelle (2003).\n\\end{itemize}\n\nBoth books are aimed at beginning programmers.  Gauld's is intended\nfor self-teachers; Zelle's is intended for computer science classes.\n\nBoth books are well regarded, but when I checked the Amazon\nsales ranks, {\\em How to Think} was out-selling both (March 21, 2007).\n\n\\begin{tabular}{l|l}\nAuthor\t&\t Amazon sales rank\\\\\n\\hline\nDowney\t&         $\\sim$37,000\\\\\nZelle   &         $\\sim$135,000\\\\\nGauld\t&\t $\\sim$490,000\\\\\n\\end{tabular}\n\nGauld's book is getting old; it is possible that a new edition\nwill appear soon.  Zelle's book is relatively new and probably\nthe most direct competition for the college textbook market.\n\n\n\\section*{Copyright}\n\nThe copyright on {\\em How to Think} is held by Allen Downey, Jeff Elkner\nand Chris Meyers.  We have released it under the GNU Free\nDocumentation License (FDL), which allows anyone to copy, modify and\ndistribute it.  In fact, the Python version of the book exists because\nJeff Elkner took the Java version and translated it into Python.\n\nI am currently working with my co-authors to license their\ncontributions for use in {\\em Software Design}.  I will grant an\nexclusive license to the publishers to print and distribute the final\nversion of the book, but I would like to keep the copyright and\nmaintain a draft version of the book on my web page under the FDL,\nCreative Commons, or other license.\n\n% Best choice looks like:\n% http://creativecommons.org/licenses/by-nc-sa/3.0/\n\nMy experience with {\\em How to Think} convinces me that keeping a\nversion of the book under a permissive license has value for the\npublisher.  It encourages readers to contribute corrections and\nsuggestions (which gives us a head start on a future editions), it\nallows potential adopters to test the material before committing to\nit, and, maybe most important, it opens the door to future projects\nthat might never happen otherwise.\n\n\\end{document}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "50ce3962-d5f7-44be-81d3-35dfd06afa74": {"__data__": {"id_": "50ce3962-d5f7-44be-81d3-35dfd06afa74", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19141fb6-d671-4159-b23c-c79984a6ccf1", "node_type": null, "metadata": {}, "hash": "52248a5cca29a828d9d7e75d8e56e8251f21208e2402aff5d5c62b84939cd4fc"}, "3": {"node_id": "5cabf076-22d0-4480-a111-3d87c6574c5b", "node_type": null, "metadata": {}, "hash": "c5aae1a71b8a96beee91d7b04e40db4103decae1e2c12867fa644572c181f742"}}, "hash": "e6f860615f0c043f0c414ff83d2479880ffb8ea2f65477e4ed7810b6aa4cfb6f", "text": "% LaTeX source for textbook ``How to think like a computer scientist''\n% Copyright (c)  2001,2002  Allen B. Downey.\n\n% Permission is granted to copy, distribute and/or modify this\n% document under the terms of the GNU Free Documentation License,\n% Version 1.1  or any later version published by the Free Software\n% Foundation; with the Invariant Sections being \"Contributor List\",\n% with no Front-Cover Texts, and with no Back-Cover Texts. A copy of\n% the license is included in the section entitled \"GNU Free\n% Documentation License\".\n\n% This distribution includes a file named fdl.tex that contains the text\n% of the GNU Free Documentation License.  If it is missing, you can obtain\n% it from www.gnu.org or by writing to the Free Software Foundation,\n% Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5cabf076-22d0-4480-a111-3d87c6574c5b": {"__data__": {"id_": "5cabf076-22d0-4480-a111-3d87c6574c5b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19141fb6-d671-4159-b23c-c79984a6ccf1", "node_type": null, "metadata": {}, "hash": "52248a5cca29a828d9d7e75d8e56e8251f21208e2402aff5d5c62b84939cd4fc"}, "2": {"node_id": "50ce3962-d5f7-44be-81d3-35dfd06afa74", "node_type": null, "metadata": {}, "hash": "e6f860615f0c043f0c414ff83d2479880ffb8ea2f65477e4ed7810b6aa4cfb6f"}, "3": {"node_id": "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021", "node_type": null, "metadata": {}, "hash": "28dce084bd07ad83be25dea4ae4ab7adba66a8731985fc08700282f7d69f3fca"}}, "hash": "c5aae1a71b8a96beee91d7b04e40db4103decae1e2c12867fa644572c181f742", "text": "%\n\\documentclass[10pt]{book}\n\\usepackage[paperwidth=6.75in,paperheight=9.25in,\n  width=4.9in,height=7.2in,\n  hmarginratio=3:2,vmarginratio=3:2]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{psfig}\n\\usepackage{makeidx}\n\\pssilent\n\n\\sloppy\n% dimensions for b5paper\n%\\setlength{\\topmargin}{-0.375in}\n%\\setlength{\\oddsidemargin}{0.0in}\n%\\setlength{\\evensidemargin}{0.0in}\n\n% dimensions for 8.5 x 11\n%\\setlength{\\topmargin}{0.625in}\n%\\setlength{\\oddsidemargin}{0.875in}\n%\\setlength{\\evensidemargin}{0.875in}\n\n\\setlength{\\headsep}{3ex}\n\\setlength{\\textheight}{7.2in}\n\n\\setlength{\\parindent}{0.0in}\n\\setlength{\\parskip}{1.7ex plus 0.5ex minus 0.5ex}\n\\renewcommand{\\baselinestretch}{1.02}\n\n% see LaTeX Companion page 62\n\\setlength{\\topsep}{-0.0\\parskip}\n\\setlength{\\partopsep}{-0.5\\parskip}\n\\setlength{\\itemindent}{0.0in}\n\\setlength{\\listparindent}{0.0in}\n\n% see LaTeX Companion page 26\n% these are copied from /usr/local/teTeX/share/texmf/tex/latex/base/book.cls\n% all I changed is afterskip\n\n\\makeatletter\n\\renewcommand{\\section}{\\@startsection \n    {section} {1} {0mm}%\n    {-3.5ex \\@plus -1ex \\@minus -.2ex}%\n    {0.7ex \\@plus.2ex}%\n    {\\normalfont\\Large\\bfseries}}\n\\renewcommand\\subsection{\\@startsection {subsection}{2}{0mm}%\n    {-3.25ex\\@plus -1ex \\@minus -.2ex}%\n    {0.3ex \\@plus .2ex}%\n    {\\normalfont\\large\\bfseries}}\n\\renewcommand\\subsubsection{\\@startsection {subsubsection}{3}{0mm}%\n    {-3.25ex\\@plus -1ex \\@minus -.2ex}%\n    {0.3ex \\@plus .2ex}%\n    {\\normalfont\\normalsize\\bfseries}}\n\\makeatother\n\n\\newcommand{\\beforefig}{\\vspace{1.3\\parskip}}\n\\newcommand{\\afterfig}{\\vspace{-0.2\\parskip}}\n\n\\newcommand{\\beforeverb}{\\vspace{0.6\\parskip}}\n\\newcommand{\\afterverb}{\\vspace{0.6\\parskip}}\n\n\\newcommand{\\adjustpage}[1]{\\enlargethispage{#1\\baselineskip}}\n\n% Note: the following command seems to cause problems for Acroreader\n% on Windows, so for now I am overriding it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021": {"__data__": {"id_": "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19141fb6-d671-4159-b23c-c79984a6ccf1", "node_type": null, "metadata": {}, "hash": "52248a5cca29a828d9d7e75d8e56e8251f21208e2402aff5d5c62b84939cd4fc"}, "2": {"node_id": "5cabf076-22d0-4480-a111-3d87c6574c5b", "node_type": null, "metadata": {}, "hash": "c5aae1a71b8a96beee91d7b04e40db4103decae1e2c12867fa644572c181f742"}, "3": {"node_id": "e79cb32e-d193-420b-9804-a5e004fdb394", "node_type": null, "metadata": {}, "hash": "27ed8717605c75805706437a34d70bb46bdbcab8437ffce47367529735cf1ee4"}}, "hash": "28dce084bd07ad83be25dea4ae4ab7adba66a8731985fc08700282f7d69f3fca", "text": "\\newcommand{\\clearemptydoublepage}{\\newpage{\\pagestyle{empty}\\cleardoublepage}}\n\\renewcommand{\\clearemptydoublepage}{\\cleardoublepage}\n\n\\newcommand{\\blankpage}{\\pagestyle{empty}\\vspace*{1in}\\newpage}\n\\renewcommand{\\blankpage}{\\vspace*{1in}\\newpage}\n\n\\pagestyle{fancyplain}\n\n\\renewcommand{\\chaptermark}[1]{\\markboth{#1}{}}\n\\renewcommand{\\sectionmark}[1]{\\markright{\\thesection\\ #1}{}}\n\n\\lhead[\\fancyplain{}{\\bfseries\\thepage}]%\n      {\\fancyplain{}{\\bfseries\\rightmark}}\n\\rhead[\\fancyplain{}{\\bfseries\\leftmark}]%\n      {\\fancyplain{}{\\bfseries\\thepage}}\n\\cfoot{}\n\n% turn off the rule under the header\n%\\setlength{\\headrulewidth}{0pt}\n\n% the following is a brute-force way to prevent the headers\n% from getting transformed into all-caps\n\\renewcommand\\MakeUppercase{}\n\n\\makeindex\n\n\\begin{document}\n\n\\frontmatter\n\n%-half title--------------------------------------------------\n\\thispagestyle{empty}\n\n\\begin{flushright}\n\\vspace*{2.5in}\n\n{\\huge How to Think Like a Computer Scientist}\n\n\\vspace{1in}\n\n{\\LARGE Learning with Python}\n\n\\vfill\n\n\\end{flushright}\n\n%--verso------------------------------------------------------\n\n\\clearemptydoublepage\n%\\pagebreak\n%\\thispagestyle{empty}\n%\\vspace*{6in}\n\n%--title page--------------------------------------------------\n\\pagebreak\n\\thispagestyle{empty}\n\n\\begin{flushright}\n\\vspace*{2.5in}\n\n{\\huge How to Think Like a Computer Scientist}\n\n\\vspace{0.25in}\n\n{\\LARGE Learning with Python}\n\n\\vspace{1in}\n\n{\\Large\nAllen Downey\\\\\nJeffrey Elkner\\\\\nChris Meyers\\\\\n}\n\n\n\\vspace{1in}\n\n{\\Large Green Tea Press}\n\n{\\small Wellesley, Massachusetts}\n\n%\\psfig{figure=illustrations/logo1.eps,width=1in}\n\\vfill\n\n\\end{flushright}\n\n\n%--copyright--------------------------------------------------\n\\pagebreak\n\\thispagestyle{empty}\n\n{\\small\nCopyright \\copyright ~2002 Allen Downey, Jeffrey Elkner, and Chris Meyers.\n\nEdited by Shannon Turlington and Lisa Cutler.  Cover design by Rebecca Gimenez.\n\nPrinting history:\n\n\\begin{description}\n\n\\item[April 2002:] First edition.\n\n\\item[August 2008:] Second printing.\n\n\\end{description}\n\n\\vspace{0.2in}\n\n\\begin{flushleft}\nGreen Tea Press       \\\\\n1 Grove St.           \\\\\nP.O. Box 812901       \\\\\nWellesley, MA 02482   \\\\\n\\end{flushleft}\n\nPermission is granted to copy, distribute, and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.1 or\nany later version published by the Free Software Foundation; with the\nInvariant Sections being ``Foreword,'' ``Preface,'' and ``Contributor\nList,'' with no Front-Cover Texts, and with no Back-Cover Texts. A\ncopy of the license is included in the appendix entitled ``GNU Free\nDocumentation License.''\n\nThe GNU Free Documentation License is available from {\\tt www.gnu.org}\nor by writing to the Free Software Foundation, Inc., 59 Temple Place,\nSuite 330, Boston, MA 02111-1307, USA.\n\nThe original form of this book is \\LaTeX\\ source code.  Compiling this\n\\LaTeX\\ source has the effect of generating a device-independent\nrepresentation of a textbook, which can be converted to other formats\nand printed.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e79cb32e-d193-420b-9804-a5e004fdb394": {"__data__": {"id_": "e79cb32e-d193-420b-9804-a5e004fdb394", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19141fb6-d671-4159-b23c-c79984a6ccf1", "node_type": null, "metadata": {}, "hash": "52248a5cca29a828d9d7e75d8e56e8251f21208e2402aff5d5c62b84939cd4fc"}, "2": {"node_id": "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021", "node_type": null, "metadata": {}, "hash": "28dce084bd07ad83be25dea4ae4ab7adba66a8731985fc08700282f7d69f3fca"}}, "hash": "27ed8717605c75805706437a34d70bb46bdbcab8437ffce47367529735cf1ee4", "text": "The \\LaTeX\\ source for this book is available from\n{\\tt http://www.thinkpython.com}\n\n\\vspace{0.2in}\n\nPublisher's Cataloging-in-Publication (provided by Quality Books, Inc.)\n\n\\begin{tabbing}\nDowney, Allen\\\\\n\\qquad  How to think like a computer scientist : learning \\\\\n\\quad  with Python / Allen Downey, Jeffrey Elkner, Chris       \\\\\n\\quad  Meyers. -- 1st ed. \\\\\n\\qquad  p. cm.            \\\\\n\\qquad Includes index.    \\\\\n\\qquad ISBN 0-9716775-0-6 \\\\\n\\qquad LCCN 2002100618    \\\\\n\\\\\n\\qquad  1. Python (Computer program language)  I. Elkner, \\\\\n\\quad  Jeffrey.  II. Meyers, Chris.  III. Title           \\\\\n\\\\\n\\quad QA76.73.P98D69 2002 \\qquad \\qquad \\quad 005.13'3          \\\\\n\\qquad \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad QBI02-200031    \\\\\n\\end{tabbing}\n\n} % end small\n\n%-----------------------------------------------------------------\n\n\\include{foreword}\n\\clearemptydoublepage\n\n\\include{preface}\n\\clearemptydoublepage\n\n\\include{contrib}\n\\clearemptydoublepage\n\n% The following lines add a little extra space to the column\n% in which the Section numbers appear in the table of contents\n\\makeatletter\n\\renewcommand{\\l@section}{\\@dottedtocline{1}{1.5em}{3.0em}}\n\\makeatother\n\\setcounter{tocdepth}{1}\n\n\\tableofcontents\n\\clearemptydoublepage\n\n\\mainmatter\n\\include{chap01}\n\\clearemptydoublepage\n\\include{chap02}\n\\clearemptydoublepage\n\\include{chap03}\n\\clearemptydoublepage\n\\include{chap04}\n\\clearemptydoublepage\n\\include{chap05}\n\\clearemptydoublepage\n\\include{chap06}\n\\clearemptydoublepage\n\\include{chap07}\n\\clearemptydoublepage\n\\include{chap08}\n\\clearemptydoublepage\n\\include{chap09}\n\\clearemptydoublepage\n\\include{chap10}\n\\clearemptydoublepage\n\\include{chap11}\n\\clearemptydoublepage\n\\include{chap12}\n\\clearemptydoublepage\n\\include{chap13}\n\\clearemptydoublepage\n\\include{chap14}\n\\clearemptydoublepage\n\\include{chap15}\n\\clearemptydoublepage\n\\include{chap16}\n\\clearemptydoublepage\n\\include{chap17}\n\\clearemptydoublepage\n\\include{chap18}\n\\clearemptydoublepage\n\\include{chap19}\n\\clearemptydoublepage\n\\include{chap20}\n\\clearemptydoublepage\n\n\\appendix\n\\include{app01}\n\\clearemptydoublepage\n\\include{app02}\n\\clearemptydoublepage\n%\\include{app03}\n%\\clearemptydoublepage\n\\include{app04}\n\\clearemptydoublepage\n\n%\\include{fdl}\n%\\clearemptydoublepage\n\n\\printindex\n\n\\thispagestyle{empty} \\blankpage\n\\thispagestyle{empty} \\blankpage\n\n\\end{document}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"6685c205-00b5-4be1-b3aa-d0e9dae77c44": {"node_ids": ["1a6f88a7-9f7c-4ec8-9c81-79ef1b6c078f"], "metadata": {}}, "e5d27f08-e86f-411d-8d21-6cb9b9015eeb": {"node_ids": ["3d5bb4f7-24c8-4cdc-bccc-4c9c188bedec", "43e2934d-8b5a-4253-a65c-6963192bf333", "e6412f55-0e69-40ea-9d17-2ba2dc205df8", "30edcd48-606d-40a4-b815-a31a30ffd824", "08affb40-2cbf-4b09-aa2b-e31dde7a6daa", "a7c1cef1-ba90-4dd4-a366-05c37ea5289f", "ad10fe86-f437-47cb-873c-2c6cd3329369"], "metadata": {}}, "65bb8589-485e-470d-b83a-68f40dd30598": {"node_ids": ["a49e389c-f457-4114-bb4a-7ab41ec6490c", "c381a8cb-0c74-4ec8-9dd4-326416f7bc32", "6d7285c2-c06b-4c3e-9c04-eb4cb0482338", "5ab53850-d6e8-4e49-a1f2-65cc2571c8b9", "209fc505-f77b-42eb-a0ec-3c89bc7993dd", "38d0187e-fd3c-40fe-84c5-6038c6db529f"], "metadata": {}}, "c3fd772a-d386-4522-bf40-858dcb47beef": {"node_ids": ["e1ad94ee-b96e-43a4-8ce0-382b5ec83b21", "12129d9a-a7e2-49c1-b4a2-90a5a24b08a5", "d2c42aad-be12-4391-9d49-6f98b336a7aa", "9447d812-d668-42d7-860b-27936468ab3d", "b8d382cd-0334-429b-9834-99a34e818741", "c2feb8b6-d5ee-4952-90a2-6706bbbe9b8e", "fa24eeb0-41ac-4cd5-aa70-eadbea570e4f"], "metadata": {}}, "3f9cbb80-96f4-46f0-ba04-876c6740f788": {"node_ids": ["28a02a3b-dde7-460a-9f99-bcb347d728bb", "741aa787-463c-4189-b641-510278e53f0f", "3fa2421e-8b56-472f-bdf8-db7bd95d817d"], "metadata": {}}, "5586efe2-3b14-4421-84e8-ebd27a3acbe8": {"node_ids": ["c0b89d2e-7a53-4066-9bbd-2101bebb4f1c", "b7059d13-4bf1-4044-b228-2d2a847e89a2", "44d86782-fbbf-4972-bfa0-f05631ace2d2", "c127a5a8-e5bd-4e52-98f2-f01c12db95b3", "ea53cead-3e5e-49cf-9c71-78029f117c0a", "447c0f42-0e4f-435d-97c3-e88d6657386c"], "metadata": {}}, "6798d972-db6f-4157-b244-43106ac2bb95": {"node_ids": ["26da9a8c-b014-4fbf-b7f5-47bf05613a9e", "62c45f91-a5d5-4db9-997b-7f2538092433", "8ba81b98-7cb6-4139-8cfc-21f26e3aa11e", "95c352af-8078-4534-aad1-1124f88c56dd", "2cad634c-c9c9-4205-9361-baa79a34008c", "74429688-a399-4fd6-87c6-98bf364281ed", "5051091c-194f-49a1-8289-f686858300ec"], "metadata": {}}, "dbfcaa25-9f49-4920-a7a3-aa56fe190ede": {"node_ids": ["4f932ede-8209-44e0-9202-0d644d756afc", "5379d4a0-b2cd-45ea-b795-818ae80fb090", "34ed9af4-83b2-4f32-b700-fc003541f5a6", "5f510fb4-a8c9-4360-a742-ec2f3b45bab6", "d5bc4479-681b-42f3-914e-09acf2d7ed74", "3a459cfa-8984-45f1-a5d4-819cc5044aa9", "660b852a-0985-4490-aad3-e7b3ccfb829c", "464a4c61-76db-4671-84b1-48da946f5f78"], "metadata": {}}, "55e9377f-cd20-4e8f-b312-4037fb435a8a": {"node_ids": ["5948f425-654c-4cee-98e0-b64a0fb4bbe5", "3f9412e4-a749-4bff-8739-4606b31ea8f1", "be0a3801-aaf8-41f3-9996-6218b1366d18", "248058b8-0d54-48db-9a21-55b77aa1eb04", "59c02e3e-4304-4e19-bab8-b92039c0a2e8", "a45af541-a681-431f-8e18-14c46748011c", "9800400e-4b08-40de-8eab-a8030438fdea", "8d110233-ce34-468f-904d-59986c253e79"], "metadata": {}}, "7bf09652-9a97-4f30-bc07-da12c2260de4": {"node_ids": ["3654c353-73a0-4429-8b80-706b16bf79e3", "8c681b3e-fbde-4214-adaf-f9d1300c9aee", "8defb448-9071-4fc8-85d7-1c8c7994b068", "6bc3250c-17d6-4d82-a5d2-0d3743e2bb2a", "8a42847e-d34b-4214-83fd-6613a4b84086", "46465398-05f7-49ec-bc8c-c6f1d9696bcc", "66035af3-6ef1-495b-a24c-4e6642d277f4", "c3def67b-d763-4f94-9a2b-53b81a1be41b", "36bb8e59-f2dd-4374-897e-a97830ae042b"], "metadata": {}}, "5c1465d3-a0c2-4e5e-a868-1384fcfbdc8c": {"node_ids": ["c1505c31-0d44-4e42-964c-1889324dc33b", "bc137aa3-66e7-417d-951c-5d12b6ca21e9", "b5804993-458b-4b01-b13c-ad4cb9ea1c30", "b7cf44ff-494b-4b14-90d2-f358a2dbea32", "3a60dc4d-a8c5-4b8a-8389-dc972fdab765", "655b870a-ed3a-476f-a19f-b05285203802", "6e24f274-bc98-41ba-bba6-1275248af13c", "9ec6ef83-6a88-429a-ad72-d3cdaf84ad70", "45053040-3fa3-4bb5-aa00-7a11811e4098"], "metadata": {}}, "06e73d4b-883b-4bd7-8bf9-7799be07321a": {"node_ids": ["959cccdc-8990-470a-a8e8-64ef3ca824bd", "3c0babf6-7299-46e3-8b25-a99533bce746", "80c4a719-ec82-4874-b183-7aef4ca5dceb", "e3602a25-424c-4f8a-9898-c34357bd7420", "8875d27e-0ca8-4ae5-82bf-284d04df8f36", "0f8f3308-6725-46c7-84bd-19d9d9f68ceb", "eee0cc8b-2935-4cba-b198-f2213e577473"], "metadata": {}}, "b39a27f4-bb19-4496-9cd3-a6710b808acd": {"node_ids": ["c82bed89-8f47-4ba3-98c6-40149c08d156", "7fc185be-53f4-469d-8b85-7384546f2dae", "f395dbda-eaef-4363-890a-e136eb12c483", "edae333f-d2c1-4fc5-b558-50faf36e419a", "359df20b-7775-474e-b3a4-bfbbc0e8a56c", "2aa84b40-9b70-4ce2-9cf1-fe5156af4e6e", "f8a816c2-2836-40c3-b2e7-5e2ea5584eab", "faba4ae7-0c67-498f-a704-eabd35773868", "00b14091-118e-4451-ad88-dd7db709b135"], "metadata": {}}, "4b44e675-64e5-457e-909e-a1553348de00": {"node_ids": ["ebc2df6e-9ad0-494f-b5bd-1e02d342a82b", "31aa5116-27d2-4e25-9ea7-e39a90baf975", "bfda4cdd-355f-44cd-a333-592fb7cbade4", "7517e8c9-e829-47be-a792-3bb7aedb40a7", "eeeefeaf-d448-4ed2-967b-ac85b7dc012e", "7fd9dd64-d020-4c02-8c3e-7e498557b7e6"], "metadata": {}}, "4c0e9bc5-b047-4250-a300-230f1a16cd97": {"node_ids": ["78fce47a-97ce-40a1-a41d-45c29ec1c6ff", "270fc7ae-49fc-4d87-a3e7-04ec0577a426", "d37333a6-d060-47f4-9e0e-29273ac89aa1", "97c67d12-52ac-46ba-8df3-c740bb16e497", "1f9270dc-5439-4eb4-b6a8-bee468243ae9", "bf7b3e64-7e63-4c9a-b611-622581711e8d"], "metadata": {}}, "788cd8e1-9f6b-4481-8f9d-bcdbe99326a1": {"node_ids": ["00b4a5d7-9bbd-4055-a1cf-f54e5357911b", "cf0db177-d4a6-45eb-838d-074b79670592", "fd76a23c-a4e7-463d-a4e4-2a999724795f", "0fa3b23a-2ac3-472d-a1dd-269b7d89e86b", "932ade67-eecb-47cd-b5fe-567427a3003a", "e4bfdcf8-2f57-43ae-8958-1dff3c0ba935", "4a21db87-f1d9-4f48-97ed-ef89e1c22707", "ff5d255c-4788-45d5-b921-9cca84b2584a"], "metadata": {}}, "2d4bd6b2-e597-4231-9fd7-ee576f2d485d": {"node_ids": ["9e3a1ee4-9a16-458d-9d23-3a155e95ef79", "a5376a45-de84-4321-b327-d9e9c6742a8c", "87d37a51-fbbf-4575-a224-dfbce78025c6", "ddbf5900-58bf-41be-acf1-43b900410da6", "98b2ce96-a564-4c85-8471-1014e50c45b1", "1146c533-2788-4aa9-a68e-2f129677a095", "5501c185-c58a-4ee2-8d66-f373eb14f7f4"], "metadata": {}}, "ef7906f0-0f42-4ca1-aaea-654d1c6674a9": {"node_ids": ["7ce69457-887b-4129-bc12-be646345587b", "a19ef6b2-886a-49f0-972c-adb25d81ea44", "914c76dc-6aab-47cf-9ab6-731981d942fe", "935bce25-2dce-433f-a117-7583d47ec888", "51d8576b-7e29-4750-b6b9-0f17693077d5"], "metadata": {}}, "366d85d8-9b45-40c4-992e-849cf65da266": {"node_ids": ["55da5c49-c77a-4ce6-bd25-70b055db9658", "ba390c38-cbab-4d5e-8737-21c68d6599e7", "dec45a1b-cdf0-4c08-8ba6-ef3ff75fe107", "b62efdf3-cde0-49ba-a7d5-68d8a09f3118", "63f94e80-9f22-4700-ae0d-393029b21a47", "51feec6d-2627-4b9e-a339-7524953b135c", "02835535-81cb-4b99-9c36-7f722fe56e53", "97fbcb7a-7a67-46dd-bdb5-c8fdb7742a0b"], "metadata": {}}, "646aed1c-3013-452e-ad89-93702220a065": {"node_ids": ["d428515b-e422-458d-bb7c-b19c19acc64f", "4dc159c0-87f3-4130-8b29-fa95cb66e1bc", "8b135e07-e798-40ba-af9c-57338f8631ef", "c2d8f160-644e-487d-a842-4813e7c6728d", "7c41061f-967d-433f-978a-b0172c1cb3cd", "74be3d9d-1ed6-45ea-a122-395f60330929", "31272119-3229-40a3-86bb-2282ac6d6fe3", "27c585f2-eae8-4e0d-a64f-18a6221e0644"], "metadata": {}}, "6addee7a-a48c-4a90-9101-cb696f59a62d": {"node_ids": ["e4ea8093-4e35-4b68-86b8-5e5d52df3c5e", "efb2b508-2e2f-4b13-8294-bb36a71e2634", "b612b34b-4783-4bdd-8cd6-4f6e2e52cc2e", "aec60a8e-dde5-4c5d-884a-af18bb204b1e", "35a31964-52f0-4c13-bab7-e0ab575a3d7f", "23d3f456-47be-4dd3-8b8c-6c00f1d47889", "ff51296b-eafb-4862-88aa-ff2bae8c82eb", "4399a22c-d2d7-45fb-ab9b-06d16c6ca9dd"], "metadata": {}}, "2bf315b5-29d8-46ec-a209-9313b0a60382": {"node_ids": ["ce31c578-fc0a-442c-acfd-232fb07ca028", "4dcb5829-72ce-4ec7-bd52-b1e2dc92e71b", "6429847b-17f8-4e4e-8ec9-289a9f5b74d1", "f0c1b955-6d27-4187-9c51-1f2a8be6bbcd", "3f2a1579-dc10-4d61-84ec-282a3582fe16", "b84c306f-9568-4e43-93d6-8e8a7e64cc3a", "8e899819-777f-4540-b925-c8eaa4b25258"], "metadata": {}}, "fc58a467-8927-4a0e-8f27-d70a9b65fae3": {"node_ids": ["a12a726d-e5d7-4615-8f14-60665e34ec67", "523b9723-f604-4ad0-9140-1f46a38c90fd", "97f8d001-26d2-4042-87a6-da4c7e9df3d1", "aacf5ef9-6dbd-40de-991b-a512b0552188", "decefc81-7ed0-450c-b7ad-bbc3f17b4994"], "metadata": {}}, "9c34b3d6-eb94-4c34-b1dc-a9079fb6724a": {"node_ids": ["1f5f825e-ba06-4f69-8c26-0ce2aeaff2d6", "c3556ce3-e8dc-44df-9263-115d43ae8b65", "b7618784-7da4-4ea7-a537-e13e4e6958a4", "015f77e0-1857-45de-9299-ae361ba2bb5a", "c8f16d49-c530-47af-a49c-3e0f2e6edac3", "751318bf-7121-43da-88b3-b0c3e382e2f8"], "metadata": {}}, "32abb63a-2e47-4a29-a7e8-d187222d3e60": {"node_ids": ["0938a373-57be-4f0f-bb30-8bd66beac402", "b8d3d508-5cbc-4dc0-b528-dc4943c195cc", "d67269bf-5add-49da-8086-3ce46606e311", "9efa0d03-95f2-447c-99c0-3085b92d0f82", "f301d3a7-e76e-456d-9b46-6b971f9d23b2", "4c2e44e7-e40e-4937-96de-44c0628f61f4", "7a406987-eba0-4222-a34f-7ad3724a5604", "ec793519-e044-423d-ba4b-21c3ec916891"], "metadata": {}}, "5a928013-b632-48cb-9ecd-b5670356cf8f": {"node_ids": ["83808199-cb49-4a60-bcfe-27a4b9d3b685", "3363e09a-1ab4-4c17-bb8a-e6752917130a", "476b4f33-d161-4cbe-a216-dbfa745ef944", "479ce05c-61fd-4bea-8a73-e26b16cd3e70"], "metadata": {}}, "a52d9267-6dab-41e4-861d-c627c9c03f5f": {"node_ids": ["47ee3c46-bad3-4aac-99eb-11a0b98ebf20", "20146fda-7b8b-4d03-adb9-1c79e9d87125", "ff608a4c-36da-45aa-ad71-ea74392d397c", "7a9c5d00-cd62-4a4e-9607-bd6caef08515", "f620bea9-7052-4504-ade1-ba5cf9d769a4"], "metadata": {}}, "0d121388-4770-427c-beea-56d66cb85583": {"node_ids": ["4ade5e33-06eb-4908-ba7c-ff1047dc4cb7", "9936a434-0aae-4070-99e6-d1abeb440546"], "metadata": {}}, "b3ffcbd6-d068-4eaf-a60f-e172eaff7869": {"node_ids": ["278d2c56-536c-4910-9fcb-daa1088cb994"], "metadata": {}}, "3f62a1e2-3ca9-4d27-9e89-34815b2ae87f": {"node_ids": ["c89bbe3f-202d-4a25-b59a-7b19e3f67aa3", "df1de581-9827-42fd-b1ed-e2fc4ca4899b"], "metadata": {}}, "54d8490b-0b63-40b6-8012-d279ddde92c8": {"node_ids": ["bb687d40-1093-4eaf-90c9-d0eb2e3dade1", "9f7ff698-db2b-41ab-9c8e-c255d8e3a586", "d665cef5-0e08-47bb-9e34-0b0767c0f1ff", "0e222bbb-583f-4ab9-84e6-79c3709b03e8"], "metadata": {}}, "67f8511a-826b-4d6f-acf1-6dcca534434d": {"node_ids": ["3b555f83-9634-48a7-b8c0-a207c923d7bf", "45498fda-c622-4a9a-a1bc-4d2124f9b64d", "53b70118-7161-41bf-9e8c-8c33daf2307b", "a0fa9976-9308-4e10-bcbc-a24ff57cef61"], "metadata": {}}, "19141fb6-d671-4159-b23c-c79984a6ccf1": {"node_ids": ["50ce3962-d5f7-44be-81d3-35dfd06afa74", "5cabf076-22d0-4480-a111-3d87c6574c5b", "bb0b0bea-16f6-4e6f-95e0-1ab943aaa021", "e79cb32e-d193-420b-9804-a5e004fdb394"], "metadata": {}}}}